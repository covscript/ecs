start ./ebnf/ecs.ebnf
#########################
Begin Lexical Analysis...
#########################
############
Lexer Output
############
CP = 0    Type = id	Data = begin_	Pos = (0, 0)
CP = 1    Type = sig	Data = ::=	Pos = (6, 0)
CP = 2    Type = id	Data = stmts_	Pos = (10, 0)
CP = 3    Type = sig	Data = ;	Pos = (17, 0)
CP = 4    Type = id	Data = ignore_	Pos = (0, 2)
CP = 5    Type = sig	Data = ::=	Pos = (8, 2)
CP = 6    Type = brac	Data = {	Pos = (12, 2)
CP = 7    Type = token	Data = ENDL	Pos = (14, 2)
CP = 8    Type = brac	Data = }	Pos = (19, 2)
CP = 9    Type = sig	Data = ;	Pos = (21, 2)
CP = 10   Type = id	Data = endline_	Pos = (0, 4)
CP = 11   Type = sig	Data = ::=	Pos = (9, 4)
CP = 12   Type = token	Data = ENDL	Pos = (13, 4)
CP = 13   Type = sig	Data = |	Pos = (18, 4)
CP = 14   Type = slit	Data = ';'	Pos = (20, 4)
CP = 15   Type = sig	Data = ;	Pos = (24, 4)
CP = 16   Type = id	Data = stmts_	Pos = (0, 6)
CP = 17   Type = sig	Data = ::=	Pos = (7, 6)
CP = 18   Type = brac	Data = {	Pos = (11, 6)
CP = 19   Type = id	Data = statement_	Pos = (12, 6)
CP = 20   Type = brac	Data = {	Pos = (23, 6)
CP = 21   Type = token	Data = ENDL	Pos = (24, 6)
CP = 22   Type = brac	Data = }	Pos = (28, 6)
CP = 23   Type = brac	Data = }	Pos = (29, 6)
CP = 24   Type = sig	Data = ;	Pos = (31, 6)
CP = 25   Type = id	Data = decl_stmts_	Pos = (0, 8)
CP = 26   Type = sig	Data = ::=	Pos = (12, 8)
CP = 27   Type = brac	Data = {	Pos = (16, 8)
CP = 28   Type = id	Data = declaration_	Pos = (17, 8)
CP = 29   Type = brac	Data = {	Pos = (30, 8)
CP = 30   Type = token	Data = ENDL	Pos = (31, 8)
CP = 31   Type = brac	Data = }	Pos = (35, 8)
CP = 32   Type = brac	Data = }	Pos = (36, 8)
CP = 33   Type = sig	Data = ;	Pos = (38, 8)
CP = 34   Type = id	Data = endblock_	Pos = (0, 10)
CP = 35   Type = sig	Data = ::=	Pos = (10, 10)
CP = 36   Type = id	Data = end_stmt_	Pos = (14, 10)
CP = 37   Type = sig	Data = |	Pos = (24, 10)
CP = 38   Type = id	Data = else_stmt_	Pos = (26, 10)
CP = 39   Type = sig	Data = |	Pos = (37, 10)
CP = 40   Type = id	Data = until_stmt_	Pos = (39, 10)
CP = 41   Type = sig	Data = |	Pos = (51, 10)
CP = 42   Type = id	Data = catch_stmt_	Pos = (53, 10)
CP = 43   Type = sig	Data = ;	Pos = (65, 10)
CP = 44   Type = id	Data = statement_	Pos = (0, 12)
CP = 45   Type = sig	Data = ::=	Pos = (11, 12)
CP = 46   Type = id	Data = prep_stmt_	Pos = (15, 12)
CP = 47   Type = sig	Data = |	Pos = (26, 12)
CP = 48   Type = id	Data = package_stmt_	Pos = (28, 12)
CP = 49   Type = sig	Data = |	Pos = (42, 12)
CP = 50   Type = id	Data = import_stmt_	Pos = (44, 12)
CP = 51   Type = sig	Data = |	Pos = (57, 12)
CP = 52   Type = id	Data = var_stmt_	Pos = (59, 12)
CP = 53   Type = sig	Data = |	Pos = (69, 12)
CP = 54   Type = id	Data = block_stmt_	Pos = (71, 12)
CP = 55   Type = sig	Data = |	Pos = (83, 12)
CP = 56   Type = id	Data = namespace_stmt_	Pos = (85, 12)
CP = 57   Type = sig	Data = |	Pos = (101, 12)
CP = 58   Type = id	Data = using_stmt_	Pos = (103, 12)
CP = 59   Type = sig	Data = |	Pos = (115, 12)
CP = 60   Type = id	Data = if_stmt_	Pos = (117, 12)
CP = 61   Type = sig	Data = |	Pos = (126, 12)
CP = 62   Type = id	Data = switch_stmt_	Pos = (128, 12)
CP = 63   Type = sig	Data = |	Pos = (141, 12)
CP = 64   Type = id	Data = while_stmt_	Pos = (143, 12)
CP = 65   Type = sig	Data = |	Pos = (155, 12)
CP = 66   Type = id	Data = loop_stmt_	Pos = (157, 12)
CP = 67   Type = sig	Data = |	Pos = (168, 12)
CP = 68   Type = id	Data = for_stmt_	Pos = (170, 12)
CP = 69   Type = sig	Data = |	Pos = (180, 12)
CP = 70   Type = id	Data = foreach_stmt_	Pos = (182, 12)
CP = 71   Type = sig	Data = |	Pos = (196, 12)
CP = 72   Type = id	Data = control_stmt_	Pos = (198, 12)
CP = 73   Type = sig	Data = |	Pos = (212, 12)
CP = 74   Type = id	Data = function_stmt_	Pos = (214, 12)
CP = 75   Type = sig	Data = |	Pos = (229, 12)
CP = 76   Type = id	Data = return_stmt_	Pos = (231, 12)
CP = 77   Type = sig	Data = |	Pos = (244, 12)
CP = 78   Type = id	Data = try_stmt_	Pos = (246, 12)
CP = 79   Type = sig	Data = |	Pos = (256, 12)
CP = 80   Type = id	Data = throw_stmt_	Pos = (258, 12)
CP = 81   Type = sig	Data = |	Pos = (270, 12)
CP = 82   Type = id	Data = class_stmt_	Pos = (272, 12)
CP = 83   Type = sig	Data = |	Pos = (284, 12)
CP = 84   Type = id	Data = expr_stmt_	Pos = (286, 12)
CP = 85   Type = sig	Data = ;	Pos = (297, 12)
CP = 86   Type = id	Data = declaration_	Pos = (0, 14)
CP = 87   Type = sig	Data = ::=	Pos = (13, 14)
CP = 88   Type = id	Data = prep_stmt_	Pos = (17, 14)
CP = 89   Type = sig	Data = |	Pos = (28, 14)
CP = 90   Type = id	Data = namespace_stmt_	Pos = (30, 14)
CP = 91   Type = sig	Data = |	Pos = (46, 14)
CP = 92   Type = id	Data = var_stmt_	Pos = (48, 14)
CP = 93   Type = sig	Data = |	Pos = (58, 14)
CP = 94   Type = id	Data = using_stmt_	Pos = (60, 14)
CP = 95   Type = sig	Data = |	Pos = (72, 14)
CP = 96   Type = id	Data = function_stmt_	Pos = (74, 14)
CP = 97   Type = sig	Data = |	Pos = (89, 14)
CP = 98   Type = id	Data = class_stmt_	Pos = (91, 14)
CP = 99   Type = sig	Data = ;	Pos = (103, 14)
CP = 100  Type = id	Data = prep_stmt_	Pos = (0, 16)
CP = 101  Type = sig	Data = ::=	Pos = (11, 16)
CP = 102  Type = token	Data = PREP	Pos = (15, 16)
CP = 103  Type = token	Data = ENDL	Pos = (20, 16)
CP = 104  Type = sig	Data = ;	Pos = (25, 16)
CP = 105  Type = id	Data = package_stmt_	Pos = (0, 18)
CP = 106  Type = sig	Data = ::=	Pos = (14, 18)
CP = 107  Type = slit	Data = 'package'	Pos = (18, 18)
CP = 108  Type = token	Data = ID	Pos = (28, 18)
CP = 109  Type = id	Data = endline_	Pos = (31, 18)
CP = 110  Type = sig	Data = ;	Pos = (40, 18)
CP = 111  Type = id	Data = import_stmt_	Pos = (0, 20)
CP = 112  Type = sig	Data = ::=	Pos = (13, 20)
CP = 113  Type = slit	Data = 'import'	Pos = (17, 20)
CP = 114  Type = id	Data = import_list_	Pos = (26, 20)
CP = 115  Type = id	Data = endline_	Pos = (39, 20)
CP = 116  Type = sig	Data = ;	Pos = (48, 20)
CP = 117  Type = id	Data = module_list_	Pos = (0, 22)
CP = 118  Type = sig	Data = ::=	Pos = (13, 22)
CP = 119  Type = token	Data = ID	Pos = (17, 22)
CP = 120  Type = brac	Data = [	Pos = (20, 22)
CP = 121  Type = slit	Data = '.'	Pos = (21, 22)
CP = 122  Type = brac	Data = (	Pos = (25, 22)
CP = 123  Type = slit	Data = '*'	Pos = (26, 22)
CP = 124  Type = sig	Data = |	Pos = (30, 22)
CP = 125  Type = id	Data = module_list_	Pos = (32, 22)
CP = 126  Type = brac	Data = )	Pos = (45, 22)
CP = 127  Type = brac	Data = ]	Pos = (46, 22)
CP = 128  Type = sig	Data = ;	Pos = (48, 22)
CP = 129  Type = id	Data = import_list_	Pos = (0, 24)
CP = 130  Type = sig	Data = ::=	Pos = (13, 24)
CP = 131  Type = id	Data = module_list_	Pos = (17, 24)
CP = 132  Type = brac	Data = [	Pos = (30, 24)
CP = 133  Type = slit	Data = 'as'	Pos = (31, 24)
CP = 134  Type = token	Data = ID	Pos = (36, 24)
CP = 135  Type = brac	Data = ]	Pos = (39, 24)
CP = 136  Type = brac	Data = [	Pos = (41, 24)
CP = 137  Type = slit	Data = ','	Pos = (42, 24)
CP = 138  Type = id	Data = import_list_	Pos = (46, 24)
CP = 139  Type = brac	Data = ]	Pos = (59, 24)
CP = 140  Type = sig	Data = ;	Pos = (61, 24)
CP = 141  Type = id	Data = var_def_	Pos = (0, 26)
CP = 142  Type = sig	Data = ::=	Pos = (9, 26)
CP = 143  Type = id	Data = var_bind_	Pos = (13, 26)
CP = 144  Type = slit	Data = '='	Pos = (23, 26)
CP = 145  Type = id	Data = basic_expr_	Pos = (27, 26)
CP = 146  Type = sig	Data = |	Pos = (39, 26)
CP = 147  Type = id	Data = var_list_	Pos = (41, 26)
CP = 148  Type = sig	Data = ;	Pos = (50, 26)
CP = 149  Type = id	Data = var_stmt_	Pos = (0, 28)
CP = 150  Type = sig	Data = ::=	Pos = (10, 28)
CP = 151  Type = brac	Data = (	Pos = (14, 28)
CP = 152  Type = slit	Data = 'var'	Pos = (15, 28)
CP = 153  Type = sig	Data = |	Pos = (21, 28)
CP = 154  Type = slit	Data = 'link'	Pos = (23, 28)
CP = 155  Type = sig	Data = |	Pos = (30, 28)
CP = 156  Type = slit	Data = 'constant'	Pos = (32, 28)
CP = 157  Type = brac	Data = )	Pos = (42, 28)
CP = 158  Type = id	Data = var_def_	Pos = (44, 28)
CP = 159  Type = id	Data = endline_	Pos = (53, 28)
CP = 160  Type = sig	Data = ;	Pos = (62, 28)
CP = 161  Type = id	Data = var_bind_	Pos = (0, 30)
CP = 162  Type = sig	Data = ::=	Pos = (10, 30)
CP = 163  Type = slit	Data = '('	Pos = (14, 30)
CP = 164  Type = id	Data = var_bind_list_	Pos = (18, 30)
CP = 165  Type = brac	Data = {	Pos = (33, 30)
CP = 166  Type = slit	Data = ','	Pos = (34, 30)
CP = 167  Type = id	Data = var_bind_list_	Pos = (38, 30)
CP = 168  Type = brac	Data = }	Pos = (52, 30)
CP = 169  Type = slit	Data = ')'	Pos = (54, 30)
CP = 170  Type = sig	Data = ;	Pos = (58, 30)
CP = 171  Type = id	Data = var_bind_list_	Pos = (0, 32)
CP = 172  Type = sig	Data = ::=	Pos = (15, 32)
CP = 173  Type = token	Data = ID	Pos = (19, 32)
CP = 174  Type = sig	Data = |	Pos = (22, 32)
CP = 175  Type = slit	Data = '...'	Pos = (24, 32)
CP = 176  Type = sig	Data = |	Pos = (30, 32)
CP = 177  Type = id	Data = var_bind_	Pos = (32, 32)
CP = 178  Type = sig	Data = ;	Pos = (42, 32)
CP = 179  Type = id	Data = var_list_	Pos = (0, 34)
CP = 180  Type = sig	Data = ::=	Pos = (10, 34)
CP = 181  Type = token	Data = ID	Pos = (14, 34)
CP = 182  Type = slit	Data = '='	Pos = (17, 34)
CP = 183  Type = id	Data = single_expr_	Pos = (21, 34)
CP = 184  Type = brac	Data = [	Pos = (34, 34)
CP = 185  Type = slit	Data = ','	Pos = (35, 34)
CP = 186  Type = id	Data = var_list_	Pos = (39, 34)
CP = 187  Type = brac	Data = ]	Pos = (48, 34)
CP = 188  Type = sig	Data = ;	Pos = (49, 34)
CP = 189  Type = id	Data = block_stmt_	Pos = (0, 36)
CP = 190  Type = sig	Data = ::=	Pos = (12, 36)
CP = 191  Type = slit	Data = 'block'	Pos = (16, 36)
CP = 192  Type = token	Data = ENDL	Pos = (24, 36)
CP = 193  Type = id	Data = stmts_	Pos = (29, 36)
CP = 194  Type = slit	Data = 'end'	Pos = (36, 36)
CP = 195  Type = token	Data = ENDL	Pos = (42, 36)
CP = 196  Type = sig	Data = ;	Pos = (46, 36)
CP = 197  Type = id	Data = namespace_stmt_	Pos = (0, 38)
CP = 198  Type = sig	Data = ::=	Pos = (16, 38)
CP = 199  Type = slit	Data = 'namespace'	Pos = (20, 38)
CP = 200  Type = token	Data = ID	Pos = (32, 38)
CP = 201  Type = token	Data = ENDL	Pos = (35, 38)
CP = 202  Type = id	Data = decl_stmts_	Pos = (40, 38)
CP = 203  Type = slit	Data = 'end'	Pos = (52, 38)
CP = 204  Type = token	Data = ENDL	Pos = (58, 38)
CP = 205  Type = sig	Data = ;	Pos = (62, 38)
CP = 206  Type = id	Data = using_stmt_	Pos = (0, 40)
CP = 207  Type = sig	Data = ::=	Pos = (12, 40)
CP = 208  Type = slit	Data = 'using'	Pos = (16, 40)
CP = 209  Type = id	Data = using_list_	Pos = (24, 40)
CP = 210  Type = id	Data = endline	Pos = (36, 40)
CP = 211  Type = sig	Data = ;	Pos = (43, 40)
CP = 212  Type = id	Data = using_list_	Pos = (0, 42)
CP = 213  Type = sig	Data = ::=	Pos = (12, 42)
CP = 214  Type = id	Data = module_list_	Pos = (16, 42)
CP = 215  Type = brac	Data = [	Pos = (29, 42)
CP = 216  Type = slit	Data = ','	Pos = (30, 42)
CP = 217  Type = id	Data = using_list_	Pos = (34, 42)
CP = 218  Type = brac	Data = ]	Pos = (45, 42)
CP = 219  Type = sig	Data = ;	Pos = (46, 42)
CP = 220  Type = id	Data = if_stmt_	Pos = (0, 44)
CP = 221  Type = sig	Data = ::=	Pos = (9, 44)
CP = 222  Type = slit	Data = 'if'	Pos = (13, 44)
CP = 223  Type = id	Data = basic_expr_	Pos = (18, 44)
CP = 224  Type = token	Data = ENDL	Pos = (30, 44)
CP = 225  Type = id	Data = stmts_	Pos = (35, 44)
CP = 226  Type = brac	Data = {	Pos = (42, 44)
CP = 227  Type = id	Data = else_stmt_	Pos = (43, 44)
CP = 228  Type = id	Data = stmts_	Pos = (54, 44)
CP = 229  Type = slit	Data = 'end'	Pos = (61, 44)
CP = 230  Type = token	Data = ENDL	Pos = (67, 44)
CP = 231  Type = brac	Data = }	Pos = (71, 44)
CP = 232  Type = sig	Data = ;	Pos = (72, 44)
CP = 233  Type = id	Data = else_stmt_	Pos = (0, 46)
CP = 234  Type = sig	Data = ::=	Pos = (11, 46)
CP = 235  Type = slit	Data = 'else'	Pos = (15, 46)
CP = 236  Type = brac	Data = [	Pos = (22, 46)
CP = 237  Type = slit	Data = 'if'	Pos = (23, 46)
CP = 238  Type = id	Data = basic_expr_	Pos = (28, 46)
CP = 239  Type = brac	Data = ]	Pos = (39, 46)
CP = 240  Type = token	Data = ENDL	Pos = (41, 46)
CP = 241  Type = sig	Data = ;	Pos = (46, 46)
CP = 242  Type = id	Data = switch_stmt_	Pos = (0, 48)
CP = 243  Type = sig	Data = ::=	Pos = (13, 48)
CP = 244  Type = slit	Data = 'switch'	Pos = (17, 48)
CP = 245  Type = id	Data = basic_expr_	Pos = (26, 48)
CP = 246  Type = token	Data = ENDL	Pos = (38, 48)
CP = 247  Type = id	Data = switch_stmts_	Pos = (43, 48)
CP = 248  Type = slit	Data = 'end'	Pos = (57, 48)
CP = 249  Type = token	Data = ENDL	Pos = (63, 48)
CP = 250  Type = sig	Data = ;	Pos = (67, 48)
CP = 251  Type = id	Data = switch_stmts_	Pos = (0, 50)
CP = 252  Type = sig	Data = ::=	Pos = (14, 50)
CP = 253  Type = brac	Data = {	Pos = (18, 50)
CP = 254  Type = id	Data = switch_case_	Pos = (19, 50)
CP = 255  Type = sig	Data = |	Pos = (32, 50)
CP = 256  Type = id	Data = switch_default_	Pos = (34, 50)
CP = 257  Type = brac	Data = }	Pos = (49, 50)
CP = 258  Type = brac	Data = {	Pos = (51, 50)
CP = 259  Type = token	Data = ENDL	Pos = (52, 50)
CP = 260  Type = brac	Data = }	Pos = (56, 50)
CP = 261  Type = sig	Data = ;	Pos = (57, 50)
CP = 262  Type = id	Data = switch_case_	Pos = (0, 52)
CP = 263  Type = sig	Data = ::=	Pos = (13, 52)
CP = 264  Type = slit	Data = 'case'	Pos = (17, 52)
CP = 265  Type = id	Data = logic_or_expr_	Pos = (24, 52)
CP = 266  Type = token	Data = ENDL	Pos = (39, 52)
CP = 267  Type = id	Data = stmts_	Pos = (44, 52)
CP = 268  Type = slit	Data = 'end'	Pos = (51, 52)
CP = 269  Type = token	Data = ENDL	Pos = (57, 52)
CP = 270  Type = sig	Data = ;	Pos = (61, 52)
CP = 271  Type = id	Data = switch_default_	Pos = (0, 54)
CP = 272  Type = sig	Data = ::=	Pos = (16, 54)
CP = 273  Type = slit	Data = 'default'	Pos = (20, 54)
CP = 274  Type = token	Data = ENDL	Pos = (30, 54)
CP = 275  Type = id	Data = stmts_	Pos = (35, 54)
CP = 276  Type = slit	Data = 'end'	Pos = (42, 54)
CP = 277  Type = token	Data = ENDL	Pos = (48, 54)
CP = 278  Type = sig	Data = ;	Pos = (52, 54)
CP = 279  Type = id	Data = while_stmt_	Pos = (0, 56)
CP = 280  Type = sig	Data = ::=	Pos = (12, 56)
CP = 281  Type = slit	Data = 'while'	Pos = (16, 56)
CP = 282  Type = id	Data = basic_expr_	Pos = (24, 56)
CP = 283  Type = token	Data = ENDL	Pos = (36, 56)
CP = 284  Type = id	Data = stmts_	Pos = (41, 56)
CP = 285  Type = slit	Data = 'end'	Pos = (48, 56)
CP = 286  Type = token	Data = ENDL	Pos = (54, 56)
CP = 287  Type = sig	Data = ;	Pos = (58, 56)
CP = 288  Type = id	Data = loop_stmt_	Pos = (0, 58)
CP = 289  Type = sig	Data = ::=	Pos = (11, 58)
CP = 290  Type = slit	Data = 'loop'	Pos = (15, 58)
CP = 291  Type = token	Data = ENDL	Pos = (22, 58)
CP = 292  Type = id	Data = stmts_	Pos = (27, 58)
CP = 293  Type = brac	Data = (	Pos = (34, 58)
CP = 294  Type = id	Data = until_stmt_	Pos = (35, 58)
CP = 295  Type = sig	Data = |	Pos = (47, 58)
CP = 296  Type = slit	Data = 'end'	Pos = (49, 58)
CP = 297  Type = sig	Data = |	Pos = (55, 58)
CP = 298  Type = token	Data = ENDL	Pos = (57, 58)
CP = 299  Type = brac	Data = )	Pos = (61, 58)
CP = 300  Type = sig	Data = ;	Pos = (62, 58)
CP = 301  Type = id	Data = until_stmt_	Pos = (0, 60)
CP = 302  Type = sig	Data = ::=	Pos = (12, 60)
CP = 303  Type = slit	Data = 'until'	Pos = (16, 60)
CP = 304  Type = id	Data = basic_expr_	Pos = (24, 60)
CP = 305  Type = token	Data = ENDL	Pos = (36, 60)
CP = 306  Type = sig	Data = ;	Pos = (40, 60)
CP = 307  Type = id	Data = for_stmt_	Pos = (0, 62)
CP = 308  Type = sig	Data = ::=	Pos = (10, 62)
CP = 309  Type = slit	Data = 'for'	Pos = (14, 62)
CP = 310  Type = brac	Data = [	Pos = (20, 62)
CP = 311  Type = id	Data = var_def_	Pos = (21, 62)
CP = 312  Type = brac	Data = ]	Pos = (29, 62)
CP = 313  Type = brac	Data = (	Pos = (31, 62)
CP = 314  Type = slit	Data = ';'	Pos = (32, 62)
CP = 315  Type = sig	Data = |	Pos = (36, 62)
CP = 316  Type = slit	Data = ','	Pos = (38, 62)
CP = 317  Type = brac	Data = )	Pos = (41, 62)
CP = 318  Type = brac	Data = [	Pos = (43, 62)
CP = 319  Type = id	Data = basic_expr_	Pos = (44, 62)
CP = 320  Type = brac	Data = ]	Pos = (55, 62)
CP = 321  Type = brac	Data = (	Pos = (57, 62)
CP = 322  Type = slit	Data = ';'	Pos = (58, 62)
CP = 323  Type = sig	Data = |	Pos = (62, 62)
CP = 324  Type = slit	Data = ','	Pos = (64, 62)
CP = 325  Type = brac	Data = )	Pos = (67, 62)
CP = 326  Type = brac	Data = [	Pos = (69, 62)
CP = 327  Type = id	Data = basic_expr_	Pos = (70, 62)
CP = 328  Type = brac	Data = ]	Pos = (81, 62)
CP = 329  Type = id	Data = for_body_	Pos = (83, 62)
CP = 330  Type = sig	Data = ;	Pos = (92, 62)
CP = 331  Type = id	Data = foreach_stmt_	Pos = (0, 64)
CP = 332  Type = sig	Data = ::=	Pos = (14, 64)
CP = 333  Type = slit	Data = 'foreach'	Pos = (18, 64)
CP = 334  Type = token	Data = ID	Pos = (28, 64)
CP = 335  Type = slit	Data = 'in'	Pos = (31, 64)
CP = 336  Type = id	Data = basic_expr_	Pos = (36, 64)
CP = 337  Type = id	Data = for_body_	Pos = (48, 64)
CP = 338  Type = sig	Data = ;	Pos = (57, 64)
CP = 339  Type = id	Data = for_body_	Pos = (0, 66)
CP = 340  Type = sig	Data = ::=	Pos = (10, 66)
CP = 341  Type = brac	Data = (	Pos = (14, 66)
CP = 342  Type = slit	Data = 'do'	Pos = (15, 66)
CP = 343  Type = id	Data = basic_expr_	Pos = (20, 66)
CP = 344  Type = id	Data = endline_	Pos = (32, 66)
CP = 345  Type = sig	Data = |	Pos = (41, 66)
CP = 346  Type = token	Data = ENDL	Pos = (43, 66)
CP = 347  Type = id	Data = stmts_	Pos = (48, 66)
CP = 348  Type = slit	Data = 'end'	Pos = (55, 66)
CP = 349  Type = token	Data = ENDL	Pos = (61, 66)
CP = 350  Type = brac	Data = )	Pos = (65, 66)
CP = 351  Type = sig	Data = ;	Pos = (66, 66)
CP = 352  Type = id	Data = function_stmt_	Pos = (0, 68)
CP = 353  Type = sig	Data = ::=	Pos = (15, 68)
CP = 354  Type = slit	Data = 'function'	Pos = (19, 68)
CP = 355  Type = token	Data = ID	Pos = (30, 68)
CP = 356  Type = slit	Data = '('	Pos = (33, 68)
CP = 357  Type = brac	Data = [	Pos = (37, 68)
CP = 358  Type = id	Data = argument_list_	Pos = (38, 68)
CP = 359  Type = brac	Data = ]	Pos = (52, 68)
CP = 360  Type = slit	Data = ')'	Pos = (54, 68)
CP = 361  Type = brac	Data = [	Pos = (58, 68)
CP = 362  Type = slit	Data = 'override'	Pos = (59, 68)
CP = 363  Type = brac	Data = ]	Pos = (69, 68)
CP = 364  Type = id	Data = function_body_	Pos = (71, 68)
CP = 365  Type = sig	Data = ;	Pos = (85, 68)
CP = 366  Type = id	Data = function_body_	Pos = (0, 70)
CP = 367  Type = sig	Data = ::=	Pos = (15, 70)
CP = 368  Type = brac	Data = (	Pos = (19, 70)
CP = 369  Type = slit	Data = '{'	Pos = (20, 70)
CP = 370  Type = id	Data = stmts_	Pos = (24, 70)
CP = 371  Type = slit	Data = '}'	Pos = (31, 70)
CP = 372  Type = sig	Data = |	Pos = (35, 70)
CP = 373  Type = token	Data = ENDL	Pos = (37, 70)
CP = 374  Type = id	Data = stmts_	Pos = (42, 70)
CP = 375  Type = slit	Data = 'end'	Pos = (49, 70)
CP = 376  Type = token	Data = ENDL	Pos = (55, 70)
CP = 377  Type = brac	Data = )	Pos = (59, 70)
CP = 378  Type = sig	Data = ;	Pos = (60, 70)
CP = 379  Type = id	Data = return_stmt_	Pos = (0, 72)
CP = 380  Type = sig	Data = ::=	Pos = (13, 72)
CP = 381  Type = slit	Data = 'return'	Pos = (17, 72)
CP = 382  Type = brac	Data = [	Pos = (26, 72)
CP = 383  Type = id	Data = expr_	Pos = (27, 72)
CP = 384  Type = brac	Data = ]	Pos = (32, 72)
CP = 385  Type = id	Data = endline_	Pos = (34, 72)
CP = 386  Type = sig	Data = ;	Pos = (42, 72)
CP = 387  Type = id	Data = try_stmt_	Pos = (0, 74)
CP = 388  Type = sig	Data = ::=	Pos = (10, 74)
CP = 389  Type = slit	Data = 'try'	Pos = (14, 74)
CP = 390  Type = token	Data = ENDL	Pos = (20, 74)
CP = 391  Type = id	Data = stmts_	Pos = (25, 74)
CP = 392  Type = brac	Data = {	Pos = (32, 74)
CP = 393  Type = id	Data = catch_stmt_	Pos = (33, 74)
CP = 394  Type = id	Data = stmts_	Pos = (45, 74)
CP = 395  Type = brac	Data = }	Pos = (51, 74)
CP = 396  Type = slit	Data = 'end'	Pos = (53, 74)
CP = 397  Type = token	Data = ENDL	Pos = (59, 74)
CP = 398  Type = sig	Data = ;	Pos = (63, 74)
CP = 399  Type = id	Data = catch_stmt_	Pos = (0, 76)
CP = 400  Type = sig	Data = ::=	Pos = (12, 76)
CP = 401  Type = slit	Data = 'catch'	Pos = (16, 76)
CP = 402  Type = token	Data = ID	Pos = (24, 76)
CP = 403  Type = brac	Data = [	Pos = (27, 76)
CP = 404  Type = slit	Data = ':'	Pos = (28, 76)
CP = 405  Type = id	Data = visit_expr_	Pos = (32, 76)
CP = 406  Type = brac	Data = ]	Pos = (43, 76)
CP = 407  Type = token	Data = ENDL	Pos = (46, 76)
CP = 408  Type = sig	Data = ;	Pos = (50, 76)
CP = 409  Type = id	Data = throw_stmt_	Pos = (0, 78)
CP = 410  Type = sig	Data = ::=	Pos = (12, 78)
CP = 411  Type = slit	Data = 'throw'	Pos = (16, 78)
CP = 412  Type = brac	Data = [	Pos = (24, 78)
CP = 413  Type = id	Data = expr_	Pos = (25, 78)
CP = 414  Type = brac	Data = ]	Pos = (30, 78)
CP = 415  Type = id	Data = endline_	Pos = (32, 78)
CP = 416  Type = sig	Data = ;	Pos = (40, 78)
CP = 417  Type = id	Data = class_stmt_	Pos = (0, 80)
CP = 418  Type = sig	Data = ::=	Pos = (12, 80)
CP = 419  Type = brac	Data = (	Pos = (16, 80)
CP = 420  Type = slit	Data = 'class'	Pos = (17, 80)
CP = 421  Type = sig	Data = |	Pos = (25, 80)
CP = 422  Type = slit	Data = 'struct'	Pos = (27, 80)
CP = 423  Type = brac	Data = )	Pos = (35, 80)
CP = 424  Type = token	Data = ID	Pos = (37, 80)
CP = 425  Type = brac	Data = [	Pos = (40, 80)
CP = 426  Type = slit	Data = 'extends'	Pos = (41, 80)
CP = 427  Type = id	Data = visit_expr_	Pos = (51, 80)
CP = 428  Type = brac	Data = ]	Pos = (62, 80)
CP = 429  Type = token	Data = ENDL	Pos = (64, 80)
CP = 430  Type = id	Data = decl_stmts_	Pos = (69, 80)
CP = 431  Type = slit	Data = 'end'	Pos = (81, 80)
CP = 432  Type = token	Data = ENDL	Pos = (87, 80)
CP = 433  Type = sig	Data = ;	Pos = (91, 80)
CP = 434  Type = id	Data = control_stmt_	Pos = (0, 82)
CP = 435  Type = sig	Data = ::=	Pos = (14, 82)
CP = 436  Type = brac	Data = (	Pos = (18, 82)
CP = 437  Type = slit	Data = 'break'	Pos = (19, 82)
CP = 438  Type = sig	Data = |	Pos = (27, 82)
CP = 439  Type = slit	Data = 'continue'	Pos = (29, 82)
CP = 440  Type = brac	Data = )	Pos = (39, 82)
CP = 441  Type = id	Data = endline_	Pos = (41, 82)
CP = 442  Type = sig	Data = ;	Pos = (49, 82)
CP = 443  Type = id	Data = expr_stmt_	Pos = (0, 84)
CP = 444  Type = sig	Data = ::=	Pos = (11, 84)
CP = 445  Type = id	Data = expr_	Pos = (15, 84)
CP = 446  Type = id	Data = endline_	Pos = (21, 84)
CP = 447  Type = sig	Data = ;	Pos = (29, 84)
CP = 448  Type = id	Data = end_stmt_	Pos = (0, 86)
CP = 449  Type = sig	Data = ::=	Pos = (10, 86)
CP = 450  Type = slit	Data = 'end'	Pos = (14, 86)
CP = 451  Type = token	Data = ENDL	Pos = (20, 86)
CP = 452  Type = sig	Data = ;	Pos = (24, 86)
CP = 453  Type = id	Data = expr_	Pos = (0, 88)
CP = 454  Type = sig	Data = ::=	Pos = (6, 88)
CP = 455  Type = id	Data = single_expr_	Pos = (10, 88)
CP = 456  Type = brac	Data = [	Pos = (23, 88)
CP = 457  Type = slit	Data = ','	Pos = (24, 88)
CP = 458  Type = id	Data = expr_	Pos = (28, 88)
CP = 459  Type = brac	Data = ]	Pos = (33, 88)
CP = 460  Type = sig	Data = ;	Pos = (34, 88)
CP = 461  Type = id	Data = single_expr_	Pos = (0, 90)
CP = 462  Type = sig	Data = ::=	Pos = (13, 90)
CP = 463  Type = id	Data = lambda_expr_	Pos = (17, 90)
CP = 464  Type = sig	Data = |	Pos = (30, 90)
CP = 465  Type = id	Data = basic_expr_	Pos = (32, 90)
CP = 466  Type = sig	Data = ;	Pos = (43, 90)
CP = 467  Type = id	Data = basic_expr_	Pos = (0, 92)
CP = 468  Type = sig	Data = ::=	Pos = (12, 92)
CP = 469  Type = id	Data = var_bind_	Pos = (16, 92)
CP = 470  Type = slit	Data = '='	Pos = (26, 92)
CP = 471  Type = id	Data = cond_expr_	Pos = (30, 92)
CP = 472  Type = sig	Data = |	Pos = (41, 92)
CP = 473  Type = id	Data = cond_expr_	Pos = (43, 92)
CP = 474  Type = brac	Data = [	Pos = (54, 92)
CP = 475  Type = id	Data = asi_op_	Pos = (55, 92)
CP = 476  Type = id	Data = single_expr_	Pos = (63, 92)
CP = 477  Type = brac	Data = ]	Pos = (75, 92)
CP = 478  Type = sig	Data = ;	Pos = (76, 92)
CP = 479  Type = id	Data = asi_op_	Pos = (0, 94)
CP = 480  Type = sig	Data = ::=	Pos = (8, 94)
CP = 481  Type = slit	Data = '='	Pos = (12, 94)
CP = 482  Type = sig	Data = |	Pos = (16, 94)
CP = 483  Type = slit	Data = ':='	Pos = (18, 94)
CP = 484  Type = sig	Data = |	Pos = (23, 94)
CP = 485  Type = slit	Data = '+='	Pos = (25, 94)
CP = 486  Type = sig	Data = |	Pos = (30, 94)
CP = 487  Type = slit	Data = '-='	Pos = (32, 94)
CP = 488  Type = sig	Data = |	Pos = (37, 94)
CP = 489  Type = slit	Data = '*='	Pos = (39, 94)
CP = 490  Type = sig	Data = |	Pos = (44, 94)
CP = 491  Type = slit	Data = '/='	Pos = (46, 94)
CP = 492  Type = sig	Data = |	Pos = (51, 94)
CP = 493  Type = slit	Data = '%='	Pos = (53, 94)
CP = 494  Type = sig	Data = |	Pos = (58, 94)
CP = 495  Type = slit	Data = '^='	Pos = (60, 94)
CP = 496  Type = sig	Data = ;	Pos = (65, 94)
CP = 497  Type = id	Data = lambda_expr_	Pos = (0, 96)
CP = 498  Type = sig	Data = ::=	Pos = (13, 96)
CP = 499  Type = slit	Data = '['	Pos = (17, 96)
CP = 500  Type = brac	Data = [	Pos = (21, 96)
CP = 501  Type = id	Data = capture_list_	Pos = (22, 96)
CP = 502  Type = brac	Data = ]	Pos = (35, 96)
CP = 503  Type = slit	Data = ']'	Pos = (37, 96)
CP = 504  Type = slit	Data = '('	Pos = (41, 96)
CP = 505  Type = brac	Data = [	Pos = (45, 96)
CP = 506  Type = id	Data = argument_list_	Pos = (46, 96)
CP = 507  Type = brac	Data = ]	Pos = (60, 96)
CP = 508  Type = slit	Data = ')'	Pos = (62, 96)
CP = 509  Type = id	Data = lambda_body_	Pos = (66, 96)
CP = 510  Type = sig	Data = ;	Pos = (78, 96)
CP = 511  Type = id	Data = capture_list_	Pos = (0, 98)
CP = 512  Type = sig	Data = ::=	Pos = (14, 98)
CP = 513  Type = brac	Data = [	Pos = (18, 98)
CP = 514  Type = slit	Data = '='	Pos = (19, 98)
CP = 515  Type = brac	Data = ]	Pos = (22, 98)
CP = 516  Type = token	Data = ID	Pos = (24, 98)
CP = 517  Type = brac	Data = {	Pos = (27, 98)
CP = 518  Type = slit	Data = ','	Pos = (28, 98)
CP = 519  Type = id	Data = capture_list_	Pos = (32, 98)
CP = 520  Type = brac	Data = }	Pos = (45, 98)
CP = 521  Type = sig	Data = ;	Pos = (47, 98)
CP = 522  Type = id	Data = argument_list_	Pos = (0, 100)
CP = 523  Type = sig	Data = ::=	Pos = (15, 100)
CP = 524  Type = slit	Data = '...'	Pos = (19, 100)
CP = 525  Type = token	Data = ID	Pos = (25, 100)
CP = 526  Type = sig	Data = |	Pos = (28, 100)
CP = 527  Type = brac	Data = [	Pos = (30, 100)
CP = 528  Type = slit	Data = '='	Pos = (31, 100)
CP = 529  Type = brac	Data = ]	Pos = (34, 100)
CP = 530  Type = token	Data = ID	Pos = (36, 100)
CP = 531  Type = brac	Data = [	Pos = (39, 100)
CP = 532  Type = slit	Data = ':'	Pos = (40, 100)
CP = 533  Type = brac	Data = ]	Pos = (43, 100)
CP = 534  Type = id	Data = visit_expr_	Pos = (45, 100)
CP = 535  Type = brac	Data = {	Pos = (57, 100)
CP = 536  Type = slit	Data = ','	Pos = (58, 100)
CP = 537  Type = id	Data = argument_list_	Pos = (62, 100)
CP = 538  Type = brac	Data = }	Pos = (76, 100)
CP = 539  Type = sig	Data = ;	Pos = (77, 100)
CP = 540  Type = id	Data = lambda_body_	Pos = (0, 102)
CP = 541  Type = sig	Data = ::=	Pos = (13, 102)
CP = 542  Type = slit	Data = '{'	Pos = (17, 102)
CP = 543  Type = brac	Data = {	Pos = (21, 102)
CP = 544  Type = id	Data = statement_	Pos = (22, 102)
CP = 545  Type = brac	Data = {	Pos = (33, 102)
CP = 546  Type = token	Data = ENDL	Pos = (34, 102)
CP = 547  Type = brac	Data = }	Pos = (38, 102)
CP = 548  Type = brac	Data = }	Pos = (39, 102)
CP = 549  Type = slit	Data = '}'	Pos = (41, 102)
CP = 550  Type = sig	Data = |	Pos = (45, 102)
CP = 551  Type = slit	Data = '->'	Pos = (47, 102)
CP = 552  Type = id	Data = cond_expr_	Pos = (52, 102)
CP = 553  Type = sig	Data = ;	Pos = (62, 102)
CP = 554  Type = id	Data = cond_expr_	Pos = (0, 104)
CP = 555  Type = sig	Data = ::=	Pos = (11, 104)
CP = 556  Type = id	Data = logic_or_expr_	Pos = (15, 104)
CP = 557  Type = brac	Data = [	Pos = (30, 104)
CP = 558  Type = id	Data = cond_postfix_	Pos = (31, 104)
CP = 559  Type = brac	Data = ]	Pos = (44, 104)
CP = 560  Type = sig	Data = ;	Pos = (45, 104)
CP = 561  Type = id	Data = cond_postfix_	Pos = (0, 106)
CP = 562  Type = sig	Data = ::=	Pos = (14, 106)
CP = 563  Type = slit	Data = '?'	Pos = (18, 106)
CP = 564  Type = id	Data = logic_or_expr_	Pos = (22, 106)
CP = 565  Type = slit	Data = ':'	Pos = (37, 106)
CP = 566  Type = id	Data = cond_expr_	Pos = (41, 106)
CP = 567  Type = sig	Data = |	Pos = (52, 106)
CP = 568  Type = slit	Data = ':'	Pos = (54, 106)
CP = 569  Type = id	Data = logic_or_expr_	Pos = (58, 106)
CP = 570  Type = sig	Data = ;	Pos = (72, 106)
CP = 571  Type = id	Data = logic_or_expr_	Pos = (0, 108)
CP = 572  Type = sig	Data = ::=	Pos = (15, 108)
CP = 573  Type = id	Data = logic_and_expr_	Pos = (19, 108)
CP = 574  Type = brac	Data = [	Pos = (35, 108)
CP = 575  Type = brac	Data = (	Pos = (36, 108)
CP = 576  Type = slit	Data = '||'	Pos = (37, 108)
CP = 577  Type = sig	Data = |	Pos = (42, 108)
CP = 578  Type = slit	Data = 'or'	Pos = (44, 108)
CP = 579  Type = brac	Data = )	Pos = (48, 108)
CP = 580  Type = id	Data = logic_or_expr_	Pos = (50, 108)
CP = 581  Type = brac	Data = ]	Pos = (64, 108)
CP = 582  Type = sig	Data = ;	Pos = (65, 108)
CP = 583  Type = id	Data = logic_and_expr_	Pos = (0, 110)
CP = 584  Type = sig	Data = ::=	Pos = (16, 110)
CP = 585  Type = id	Data = equal_expr_	Pos = (20, 110)
CP = 586  Type = brac	Data = [	Pos = (32, 110)
CP = 587  Type = brac	Data = (	Pos = (33, 110)
CP = 588  Type = slit	Data = '&&'	Pos = (34, 110)
CP = 589  Type = sig	Data = |	Pos = (39, 110)
CP = 590  Type = slit	Data = 'and'	Pos = (41, 110)
CP = 591  Type = brac	Data = )	Pos = (46, 110)
CP = 592  Type = id	Data = logic_and_expr_	Pos = (48, 110)
CP = 593  Type = brac	Data = ]	Pos = (63, 110)
CP = 594  Type = sig	Data = ;	Pos = (64, 110)
CP = 595  Type = id	Data = equal_expr_	Pos = (0, 112)
CP = 596  Type = sig	Data = ::=	Pos = (12, 112)
CP = 597  Type = id	Data = relat_expr_	Pos = (16, 112)
CP = 598  Type = brac	Data = [	Pos = (28, 112)
CP = 599  Type = brac	Data = (	Pos = (29, 112)
CP = 600  Type = slit	Data = '=='	Pos = (30, 112)
CP = 601  Type = sig	Data = |	Pos = (35, 112)
CP = 602  Type = slit	Data = '!='	Pos = (37, 112)
CP = 603  Type = brac	Data = )	Pos = (41, 112)
CP = 604  Type = id	Data = equal_expr_	Pos = (43, 112)
CP = 605  Type = brac	Data = ]	Pos = (54, 112)
CP = 606  Type = sig	Data = ;	Pos = (55, 112)
CP = 607  Type = id	Data = relat_expr_	Pos = (0, 114)
CP = 608  Type = sig	Data = ::=	Pos = (12, 114)
CP = 609  Type = id	Data = add_expr_	Pos = (16, 114)
CP = 610  Type = brac	Data = [	Pos = (26, 114)
CP = 611  Type = brac	Data = (	Pos = (27, 114)
CP = 612  Type = slit	Data = '>'	Pos = (28, 114)
CP = 613  Type = sig	Data = |	Pos = (32, 114)
CP = 614  Type = slit	Data = '<'	Pos = (34, 114)
CP = 615  Type = sig	Data = |	Pos = (38, 114)
CP = 616  Type = slit	Data = '>='	Pos = (40, 114)
CP = 617  Type = sig	Data = |	Pos = (45, 114)
CP = 618  Type = slit	Data = '<='	Pos = (47, 114)
CP = 619  Type = brac	Data = )	Pos = (51, 114)
CP = 620  Type = id	Data = relat_expr_	Pos = (53, 114)
CP = 621  Type = brac	Data = ]	Pos = (64, 114)
CP = 622  Type = sig	Data = ;	Pos = (65, 114)
CP = 623  Type = id	Data = add_expr_	Pos = (0, 116)
CP = 624  Type = sig	Data = ::=	Pos = (10, 116)
CP = 625  Type = id	Data = mul_expr_	Pos = (14, 116)
CP = 626  Type = brac	Data = [	Pos = (24, 116)
CP = 627  Type = brac	Data = (	Pos = (25, 116)
CP = 628  Type = slit	Data = '+'	Pos = (26, 116)
CP = 629  Type = sig	Data = |	Pos = (30, 116)
CP = 630  Type = slit	Data = '-'	Pos = (32, 116)
CP = 631  Type = brac	Data = )	Pos = (35, 116)
CP = 632  Type = id	Data = add_expr_	Pos = (37, 116)
CP = 633  Type = brac	Data = ]	Pos = (46, 116)
CP = 634  Type = sig	Data = ;	Pos = (47, 116)
CP = 635  Type = id	Data = mul_expr_	Pos = (0, 118)
CP = 636  Type = sig	Data = ::=	Pos = (10, 118)
CP = 637  Type = id	Data = unary_expr_	Pos = (14, 118)
CP = 638  Type = brac	Data = [	Pos = (26, 118)
CP = 639  Type = brac	Data = (	Pos = (27, 118)
CP = 640  Type = slit	Data = '*'	Pos = (28, 118)
CP = 641  Type = sig	Data = |	Pos = (32, 118)
CP = 642  Type = slit	Data = '/'	Pos = (34, 118)
CP = 643  Type = sig	Data = |	Pos = (38, 118)
CP = 644  Type = slit	Data = '%'	Pos = (40, 118)
CP = 645  Type = sig	Data = |	Pos = (44, 118)
CP = 646  Type = slit	Data = '^'	Pos = (46, 118)
CP = 647  Type = brac	Data = )	Pos = (49, 118)
CP = 648  Type = id	Data = mul_expr_	Pos = (51, 118)
CP = 649  Type = brac	Data = ]	Pos = (60, 118)
CP = 650  Type = sig	Data = ;	Pos = (61, 118)
CP = 651  Type = id	Data = unary_expr_	Pos = (0, 120)
CP = 652  Type = sig	Data = ::=	Pos = (12, 120)
CP = 653  Type = id	Data = unary_op_	Pos = (16, 120)
CP = 654  Type = id	Data = unary_expr_	Pos = (26, 120)
CP = 655  Type = sig	Data = |	Pos = (38, 120)
CP = 656  Type = brac	Data = (	Pos = (40, 120)
CP = 657  Type = slit	Data = 'new'	Pos = (41, 120)
CP = 658  Type = sig	Data = |	Pos = (47, 120)
CP = 659  Type = slit	Data = 'gcnew'	Pos = (49, 120)
CP = 660  Type = brac	Data = )	Pos = (56, 120)
CP = 661  Type = id	Data = unary_expr_	Pos = (58, 120)
CP = 662  Type = brac	Data = [	Pos = (70, 120)
CP = 663  Type = id	Data = array_	Pos = (71, 120)
CP = 664  Type = brac	Data = ]	Pos = (77, 120)
CP = 665  Type = sig	Data = |	Pos = (79, 120)
CP = 666  Type = id	Data = prim_expr_	Pos = (81, 120)
CP = 667  Type = brac	Data = [	Pos = (92, 120)
CP = 668  Type = id	Data = postfix_expr_	Pos = (93, 120)
CP = 669  Type = brac	Data = ]	Pos = (106, 120)
CP = 670  Type = sig	Data = ;	Pos = (107, 120)
CP = 671  Type = id	Data = unary_op_	Pos = (0, 122)
CP = 672  Type = sig	Data = ::=	Pos = (10, 122)
CP = 673  Type = slit	Data = 'typeid'	Pos = (14, 122)
CP = 674  Type = sig	Data = |	Pos = (23, 122)
CP = 675  Type = slit	Data = '++'	Pos = (25, 122)
CP = 676  Type = sig	Data = |	Pos = (30, 122)
CP = 677  Type = slit	Data = '--'	Pos = (32, 122)
CP = 678  Type = sig	Data = |	Pos = (37, 122)
CP = 679  Type = slit	Data = '*'	Pos = (39, 122)
CP = 680  Type = sig	Data = |	Pos = (43, 122)
CP = 681  Type = slit	Data = '&'	Pos = (45, 122)
CP = 682  Type = sig	Data = |	Pos = (49, 122)
CP = 683  Type = slit	Data = '-'	Pos = (51, 122)
CP = 684  Type = sig	Data = |	Pos = (55, 122)
CP = 685  Type = slit	Data = '!'	Pos = (57, 122)
CP = 686  Type = sig	Data = ;	Pos = (60, 122)
CP = 687  Type = id	Data = postfix_expr_	Pos = (0, 124)
CP = 688  Type = sig	Data = ::=	Pos = (14, 124)
CP = 689  Type = brac	Data = (	Pos = (18, 124)
CP = 690  Type = slit	Data = '++'	Pos = (19, 124)
CP = 691  Type = sig	Data = |	Pos = (24, 124)
CP = 692  Type = slit	Data = '--'	Pos = (26, 124)
CP = 693  Type = sig	Data = |	Pos = (31, 124)
CP = 694  Type = slit	Data = '...'	Pos = (33, 124)
CP = 695  Type = brac	Data = )	Pos = (38, 124)
CP = 696  Type = brac	Data = [	Pos = (41, 124)
CP = 697  Type = id	Data = postfix_expr_	Pos = (42, 124)
CP = 698  Type = brac	Data = ]	Pos = (55, 124)
CP = 699  Type = sig	Data = ;	Pos = (56, 124)
CP = 700  Type = id	Data = prim_expr_	Pos = (0, 126)
CP = 701  Type = sig	Data = ::=	Pos = (11, 126)
CP = 702  Type = id	Data = visit_expr_	Pos = (15, 126)
CP = 703  Type = sig	Data = |	Pos = (27, 126)
CP = 704  Type = id	Data = constant_	Pos = (29, 126)
CP = 705  Type = sig	Data = ;	Pos = (39, 126)
CP = 706  Type = id	Data = visit_expr_	Pos = (0, 128)
CP = 707  Type = sig	Data = ::=	Pos = (12, 128)
CP = 708  Type = id	Data = object_	Pos = (16, 128)
CP = 709  Type = brac	Data = [	Pos = (24, 128)
CP = 710  Type = brac	Data = (	Pos = (26, 128)
CP = 711  Type = slit	Data = '->'	Pos = (27, 128)
CP = 712  Type = sig	Data = |	Pos = (32, 128)
CP = 713  Type = slit	Data = '.'	Pos = (34, 128)
CP = 714  Type = brac	Data = )	Pos = (37, 128)
CP = 715  Type = id	Data = visit_expr_	Pos = (39, 128)
CP = 716  Type = brac	Data = ]	Pos = (51, 128)
CP = 717  Type = sig	Data = ;	Pos = (52, 128)
CP = 718  Type = id	Data = object_	Pos = (0, 130)
CP = 719  Type = sig	Data = ::=	Pos = (8, 130)
CP = 720  Type = id	Data = array_	Pos = (12, 130)
CP = 721  Type = brac	Data = [	Pos = (19, 130)
CP = 722  Type = id	Data = index_	Pos = (20, 130)
CP = 723  Type = brac	Data = ]	Pos = (26, 130)
CP = 724  Type = sig	Data = |	Pos = (28, 130)
CP = 725  Type = token	Data = STR	Pos = (30, 130)
CP = 726  Type = brac	Data = [	Pos = (34, 130)
CP = 727  Type = id	Data = index_	Pos = (35, 130)
CP = 728  Type = brac	Data = ]	Pos = (41, 130)
CP = 729  Type = sig	Data = |	Pos = (43, 130)
CP = 730  Type = slit	Data = 'local'	Pos = (45, 130)
CP = 731  Type = sig	Data = |	Pos = (53, 130)
CP = 732  Type = slit	Data = 'global'	Pos = (55, 130)
CP = 733  Type = sig	Data = |	Pos = (64, 130)
CP = 734  Type = id	Data = element_	Pos = (66, 130)
CP = 735  Type = sig	Data = |	Pos = (75, 130)
CP = 736  Type = token	Data = CHAR	Pos = (77, 130)
CP = 737  Type = sig	Data = ;	Pos = (81, 130)
CP = 738  Type = id	Data = element_	Pos = (0, 132)
CP = 739  Type = sig	Data = ::=	Pos = (9, 132)
CP = 740  Type = brac	Data = (	Pos = (13, 132)
CP = 741  Type = token	Data = ID	Pos = (14, 132)
CP = 742  Type = sig	Data = |	Pos = (17, 132)
CP = 743  Type = slit	Data = '('	Pos = (19, 132)
CP = 744  Type = id	Data = single_expr_	Pos = (23, 132)
CP = 745  Type = slit	Data = ')'	Pos = (36, 132)
CP = 746  Type = brac	Data = )	Pos = (39, 132)
CP = 747  Type = brac	Data = {	Pos = (41, 132)
CP = 748  Type = id	Data = fcall_	Pos = (42, 132)
CP = 749  Type = sig	Data = |	Pos = (49, 132)
CP = 750  Type = id	Data = index_	Pos = (51, 132)
CP = 751  Type = brac	Data = }	Pos = (57, 132)
CP = 752  Type = sig	Data = ;	Pos = (58, 132)
CP = 753  Type = id	Data = constant_	Pos = (0, 134)
CP = 754  Type = sig	Data = ::=	Pos = (10, 134)
CP = 755  Type = token	Data = NUM	Pos = (14, 134)
CP = 756  Type = sig	Data = |	Pos = (18, 134)
CP = 757  Type = slit	Data = 'null'	Pos = (20, 134)
CP = 758  Type = sig	Data = |	Pos = (27, 134)
CP = 759  Type = slit	Data = 'true'	Pos = (29, 134)
CP = 760  Type = sig	Data = |	Pos = (36, 134)
CP = 761  Type = slit	Data = 'false'	Pos = (38, 134)
CP = 762  Type = sig	Data = ;	Pos = (45, 134)
CP = 763  Type = id	Data = array_	Pos = (0, 136)
CP = 764  Type = sig	Data = ::=	Pos = (7, 136)
CP = 765  Type = slit	Data = '{'	Pos = (11, 136)
CP = 766  Type = brac	Data = [	Pos = (15, 136)
CP = 767  Type = id	Data = expr_	Pos = (16, 136)
CP = 768  Type = brac	Data = ]	Pos = (21, 136)
CP = 769  Type = slit	Data = '}'	Pos = (23, 136)
CP = 770  Type = sig	Data = ;	Pos = (26, 136)
CP = 771  Type = id	Data = fcall_	Pos = (0, 138)
CP = 772  Type = sig	Data = ::=	Pos = (7, 138)
CP = 773  Type = slit	Data = '('	Pos = (11, 138)
CP = 774  Type = brac	Data = [	Pos = (15, 138)
CP = 775  Type = id	Data = expr_	Pos = (16, 138)
CP = 776  Type = brac	Data = ]	Pos = (21, 138)
CP = 777  Type = slit	Data = ')'	Pos = (23, 138)
CP = 778  Type = sig	Data = ;	Pos = (26, 138)
CP = 779  Type = id	Data = index_	Pos = (0, 140)
CP = 780  Type = sig	Data = ::=	Pos = (7, 140)
CP = 781  Type = slit	Data = '['	Pos = (11, 140)
CP = 782  Type = id	Data = basic_expr_	Pos = (15, 140)
CP = 783  Type = slit	Data = ']'	Pos = (27, 140)
CP = 784  Type = sig	Data = ;	Pos = (30, 140)
###########################
Begin Syntactic Analysis...
###########################
SS = 3	CP = 0	Deduce statement
SS = 4	CP = 0	  Deduce non_terminal_symbol
SS = 4	CP = 0	    Match  id
SS = 4	CP = 0	    Accept id
SS = 4	CP = 1	  Accept non_terminal_symbol
SS = 4	CP = 1	  Deduce assign_op
SS = 5	CP = 1	    Match  ::=
SS = 5	CP = 1	    Accept ::=
SS = 4	CP = 2	  Accept assign_op
SS = 4	CP = 2	  Deduce declaration
SS = 5	CP = 2	    Deduce term
SS = 6	CP = 2	      Deduce part
SS = 6	CP = 2	        Predict Failed in CONDITION
SS = 6	CP = 2	        Predict Failed in CONDITION
SS = 6	CP = 2	        Predict Failed in CONDITION
SS = 8	CP = 2	        Deduce simple_part
SS = 10	CP = 2	          Deduce right_non_terminal_symbol
SS = 11	CP = 2	            Deduce non_terminal_symbol
SS = 11	CP = 2	              Match  id
SS = 11	CP = 2	              Accept id
SS = 11	CP = 3	            Accept non_terminal_symbol
SS = 10	CP = 3	          Accept right_non_terminal_symbol
SS = 8	CP = 3	        Accept simple_part
SS = 6	CP = 3	      Accept part
SS = 7	CP = 3	      Match  ,
SS = 7	CP = 3	      Reject ,
SS = 6	CP = 3	      Predict Failed: part
SS = 5	CP = 3	    Accept term
SS = 5	CP = 3	    Match  |
SS = 5	CP = 3	    Reject |
SS = 4	CP = 3	  Accept declaration
SS = 4	CP = 3	  Deduce end_op
SS = 5	CP = 3	    Match  ;
SS = 5	CP = 3	    Accept ;
SS = 4	CP = 4	  Accept end_op
SS = 3	CP = 4	Accept statement
SS = 3	CP = 4	Deduce statement
SS = 4	CP = 4	  Deduce non_terminal_symbol
SS = 4	CP = 4	    Match  id
SS = 4	CP = 4	    Accept id
SS = 4	CP = 5	  Accept non_terminal_symbol
SS = 4	CP = 5	  Deduce assign_op
SS = 5	CP = 5	    Match  ::=
SS = 5	CP = 5	    Accept ::=
SS = 4	CP = 6	  Accept assign_op
SS = 4	CP = 6	  Deduce declaration
SS = 5	CP = 6	    Deduce term
SS = 6	CP = 6	      Deduce part
SS = 8	CP = 6	        Deduce repeat_part
SS = 8	CP = 6	          Match  {
SS = 8	CP = 6	          Accept {
SS = 9	CP = 7	          Deduce declaration
SS = 10	CP = 7	            Deduce term
SS = 11	CP = 7	              Deduce part
SS = 11	CP = 7	                Predict Failed in CONDITION
SS = 11	CP = 7	                Predict Failed in CONDITION
SS = 11	CP = 7	                Predict Failed in CONDITION
SS = 13	CP = 7	                Deduce simple_part
SS = 13	CP = 7	                  Predict Failed in CONDITION
SS = 15	CP = 7	                  Deduce terminal_symbol
SS = 15	CP = 7	                    Predict Failed in CONDITION
SS = 15	CP = 7	                    Predict Failed in CONDITION
SS = 16	CP = 7	                    Match  token
SS = 16	CP = 7	                    Accept token
SS = 15	CP = 8	                  Accept terminal_symbol
SS = 13	CP = 8	                Accept simple_part
SS = 11	CP = 8	              Accept part
SS = 12	CP = 8	              Match  ,
SS = 12	CP = 8	              Reject ,
SS = 11	CP = 8	              Predict Failed: part
SS = 10	CP = 8	            Accept term
SS = 10	CP = 8	            Match  |
SS = 10	CP = 8	            Reject |
SS = 9	CP = 8	          Accept declaration
SS = 8	CP = 8	          Match  }
SS = 8	CP = 8	          Accept }
SS = 8	CP = 9	        Accept repeat_part
SS = 6	CP = 9	      Accept part
SS = 7	CP = 9	      Match  ,
SS = 7	CP = 9	      Reject ,
SS = 6	CP = 9	      Predict Failed: part
SS = 5	CP = 9	    Accept term
SS = 5	CP = 9	    Match  |
SS = 5	CP = 9	    Reject |
SS = 4	CP = 9	  Accept declaration
SS = 4	CP = 9	  Deduce end_op
SS = 5	CP = 9	    Match  ;
SS = 5	CP = 9	    Accept ;
SS = 4	CP = 10	  Accept end_op
SS = 3	CP = 10	Accept statement
SS = 3	CP = 10	Deduce statement
SS = 4	CP = 10	  Deduce non_terminal_symbol
SS = 4	CP = 10	    Match  id
SS = 4	CP = 10	    Accept id
SS = 4	CP = 11	  Accept non_terminal_symbol
SS = 4	CP = 11	  Deduce assign_op
SS = 5	CP = 11	    Match  ::=
SS = 5	CP = 11	    Accept ::=
SS = 4	CP = 12	  Accept assign_op
SS = 4	CP = 12	  Deduce declaration
SS = 5	CP = 12	    Deduce term
SS = 6	CP = 12	      Deduce part
SS = 6	CP = 12	        Predict Failed in CONDITION
SS = 6	CP = 12	        Predict Failed in CONDITION
SS = 6	CP = 12	        Predict Failed in CONDITION
SS = 8	CP = 12	        Deduce simple_part
SS = 8	CP = 12	          Predict Failed in CONDITION
SS = 10	CP = 12	          Deduce terminal_symbol
SS = 10	CP = 12	            Predict Failed in CONDITION
SS = 10	CP = 12	            Predict Failed in CONDITION
SS = 11	CP = 12	            Match  token
SS = 11	CP = 12	            Accept token
SS = 10	CP = 13	          Accept terminal_symbol
SS = 8	CP = 13	        Accept simple_part
SS = 6	CP = 13	      Accept part
SS = 7	CP = 13	      Match  ,
SS = 7	CP = 13	      Reject ,
SS = 6	CP = 13	      Predict Failed: part
SS = 5	CP = 13	    Accept term
SS = 5	CP = 13	    Match  |
SS = 5	CP = 13	    Accept |
SS = 6	CP = 14	    Deduce term
SS = 7	CP = 14	      Deduce part
SS = 7	CP = 14	        Predict Failed in CONDITION
SS = 7	CP = 14	        Predict Failed in CONDITION
SS = 7	CP = 14	        Predict Failed in CONDITION
SS = 9	CP = 14	        Deduce simple_part
SS = 9	CP = 14	          Predict Failed in CONDITION
SS = 11	CP = 14	          Deduce terminal_symbol
SS = 12	CP = 14	            Match  slit
SS = 12	CP = 14	            Accept slit
SS = 11	CP = 15	          Accept terminal_symbol
SS = 9	CP = 15	        Accept simple_part
SS = 7	CP = 15	      Accept part
SS = 8	CP = 15	      Match  ,
SS = 8	CP = 15	      Reject ,
SS = 7	CP = 15	      Predict Failed: part
SS = 6	CP = 15	    Accept term
SS = 5	CP = 15	    Match  |
SS = 5	CP = 15	    Reject |
SS = 4	CP = 15	  Accept declaration
SS = 4	CP = 15	  Deduce end_op
SS = 5	CP = 15	    Match  ;
SS = 5	CP = 15	    Accept ;
SS = 4	CP = 16	  Accept end_op
SS = 3	CP = 16	Accept statement
SS = 3	CP = 16	Deduce statement
SS = 4	CP = 16	  Deduce non_terminal_symbol
SS = 4	CP = 16	    Match  id
SS = 4	CP = 16	    Accept id
SS = 4	CP = 17	  Accept non_terminal_symbol
SS = 4	CP = 17	  Deduce assign_op
SS = 5	CP = 17	    Match  ::=
SS = 5	CP = 17	    Accept ::=
SS = 4	CP = 18	  Accept assign_op
SS = 4	CP = 18	  Deduce declaration
SS = 5	CP = 18	    Deduce term
SS = 6	CP = 18	      Deduce part
SS = 8	CP = 18	        Deduce repeat_part
SS = 8	CP = 18	          Match  {
SS = 8	CP = 18	          Accept {
SS = 9	CP = 19	          Deduce declaration
SS = 10	CP = 19	            Deduce term
SS = 11	CP = 19	              Deduce part
SS = 11	CP = 19	                Predict Failed in CONDITION
SS = 11	CP = 19	                Predict Failed in CONDITION
SS = 11	CP = 19	                Predict Failed in CONDITION
SS = 13	CP = 19	                Deduce simple_part
SS = 15	CP = 19	                  Deduce right_non_terminal_symbol
SS = 16	CP = 19	                    Deduce non_terminal_symbol
SS = 16	CP = 19	                      Match  id
SS = 16	CP = 19	                      Accept id
SS = 16	CP = 20	                    Accept non_terminal_symbol
SS = 15	CP = 20	                  Accept right_non_terminal_symbol
SS = 13	CP = 20	                Accept simple_part
SS = 11	CP = 20	              Accept part
SS = 12	CP = 20	              Match  ,
SS = 12	CP = 20	              Reject ,
SS = 12	CP = 20	              Deduce part
SS = 14	CP = 20	                Deduce repeat_part
SS = 14	CP = 20	                  Match  {
SS = 14	CP = 20	                  Accept {
SS = 15	CP = 21	                  Deduce declaration
SS = 16	CP = 21	                    Deduce term
SS = 17	CP = 21	                      Deduce part
SS = 17	CP = 21	                        Predict Failed in CONDITION
SS = 17	CP = 21	                        Predict Failed in CONDITION
SS = 17	CP = 21	                        Predict Failed in CONDITION
SS = 19	CP = 21	                        Deduce simple_part
SS = 19	CP = 21	                          Predict Failed in CONDITION
SS = 21	CP = 21	                          Deduce terminal_symbol
SS = 21	CP = 21	                            Predict Failed in CONDITION
SS = 21	CP = 21	                            Predict Failed in CONDITION
SS = 22	CP = 21	                            Match  token
SS = 22	CP = 21	                            Accept token
SS = 21	CP = 22	                          Accept terminal_symbol
SS = 19	CP = 22	                        Accept simple_part
SS = 17	CP = 22	                      Accept part
SS = 18	CP = 22	                      Match  ,
SS = 18	CP = 22	                      Reject ,
SS = 17	CP = 22	                      Predict Failed: part
SS = 16	CP = 22	                    Accept term
SS = 16	CP = 22	                    Match  |
SS = 16	CP = 22	                    Reject |
SS = 15	CP = 22	                  Accept declaration
SS = 14	CP = 22	                  Match  }
SS = 14	CP = 22	                  Accept }
SS = 14	CP = 23	                Accept repeat_part
SS = 12	CP = 23	              Accept part
SS = 12	CP = 23	              Match  ,
SS = 12	CP = 23	              Reject ,
SS = 11	CP = 23	              Predict Failed: part
SS = 10	CP = 23	            Accept term
SS = 10	CP = 23	            Match  |
SS = 10	CP = 23	            Reject |
SS = 9	CP = 23	          Accept declaration
SS = 8	CP = 23	          Match  }
SS = 8	CP = 23	          Accept }
SS = 8	CP = 24	        Accept repeat_part
SS = 6	CP = 24	      Accept part
SS = 7	CP = 24	      Match  ,
SS = 7	CP = 24	      Reject ,
SS = 6	CP = 24	      Predict Failed: part
SS = 5	CP = 24	    Accept term
SS = 5	CP = 24	    Match  |
SS = 5	CP = 24	    Reject |
SS = 4	CP = 24	  Accept declaration
SS = 4	CP = 24	  Deduce end_op
SS = 5	CP = 24	    Match  ;
SS = 5	CP = 24	    Accept ;
SS = 4	CP = 25	  Accept end_op
SS = 3	CP = 25	Accept statement
SS = 3	CP = 25	Deduce statement
SS = 4	CP = 25	  Deduce non_terminal_symbol
SS = 4	CP = 25	    Match  id
SS = 4	CP = 25	    Accept id
SS = 4	CP = 26	  Accept non_terminal_symbol
SS = 4	CP = 26	  Deduce assign_op
SS = 5	CP = 26	    Match  ::=
SS = 5	CP = 26	    Accept ::=
SS = 4	CP = 27	  Accept assign_op
SS = 4	CP = 27	  Deduce declaration
SS = 5	CP = 27	    Deduce term
SS = 6	CP = 27	      Deduce part
SS = 8	CP = 27	        Deduce repeat_part
SS = 8	CP = 27	          Match  {
SS = 8	CP = 27	          Accept {
SS = 9	CP = 28	          Deduce declaration
SS = 10	CP = 28	            Deduce term
SS = 11	CP = 28	              Deduce part
SS = 11	CP = 28	                Predict Failed in CONDITION
SS = 11	CP = 28	                Predict Failed in CONDITION
SS = 11	CP = 28	                Predict Failed in CONDITION
SS = 13	CP = 28	                Deduce simple_part
SS = 15	CP = 28	                  Deduce right_non_terminal_symbol
SS = 16	CP = 28	                    Deduce non_terminal_symbol
SS = 16	CP = 28	                      Match  id
SS = 16	CP = 28	                      Accept id
SS = 16	CP = 29	                    Accept non_terminal_symbol
SS = 15	CP = 29	                  Accept right_non_terminal_symbol
SS = 13	CP = 29	                Accept simple_part
SS = 11	CP = 29	              Accept part
SS = 12	CP = 29	              Match  ,
SS = 12	CP = 29	              Reject ,
SS = 12	CP = 29	              Deduce part
SS = 14	CP = 29	                Deduce repeat_part
SS = 14	CP = 29	                  Match  {
SS = 14	CP = 29	                  Accept {
SS = 15	CP = 30	                  Deduce declaration
SS = 16	CP = 30	                    Deduce term
SS = 17	CP = 30	                      Deduce part
SS = 17	CP = 30	                        Predict Failed in CONDITION
SS = 17	CP = 30	                        Predict Failed in CONDITION
SS = 17	CP = 30	                        Predict Failed in CONDITION
SS = 19	CP = 30	                        Deduce simple_part
SS = 19	CP = 30	                          Predict Failed in CONDITION
SS = 21	CP = 30	                          Deduce terminal_symbol
SS = 21	CP = 30	                            Predict Failed in CONDITION
SS = 21	CP = 30	                            Predict Failed in CONDITION
SS = 22	CP = 30	                            Match  token
SS = 22	CP = 30	                            Accept token
SS = 21	CP = 31	                          Accept terminal_symbol
SS = 19	CP = 31	                        Accept simple_part
SS = 17	CP = 31	                      Accept part
SS = 18	CP = 31	                      Match  ,
SS = 18	CP = 31	                      Reject ,
SS = 17	CP = 31	                      Predict Failed: part
SS = 16	CP = 31	                    Accept term
SS = 16	CP = 31	                    Match  |
SS = 16	CP = 31	                    Reject |
SS = 15	CP = 31	                  Accept declaration
SS = 14	CP = 31	                  Match  }
SS = 14	CP = 31	                  Accept }
SS = 14	CP = 32	                Accept repeat_part
SS = 12	CP = 32	              Accept part
SS = 12	CP = 32	              Match  ,
SS = 12	CP = 32	              Reject ,
SS = 11	CP = 32	              Predict Failed: part
SS = 10	CP = 32	            Accept term
SS = 10	CP = 32	            Match  |
SS = 10	CP = 32	            Reject |
SS = 9	CP = 32	          Accept declaration
SS = 8	CP = 32	          Match  }
SS = 8	CP = 32	          Accept }
SS = 8	CP = 33	        Accept repeat_part
SS = 6	CP = 33	      Accept part
SS = 7	CP = 33	      Match  ,
SS = 7	CP = 33	      Reject ,
SS = 6	CP = 33	      Predict Failed: part
SS = 5	CP = 33	    Accept term
SS = 5	CP = 33	    Match  |
SS = 5	CP = 33	    Reject |
SS = 4	CP = 33	  Accept declaration
SS = 4	CP = 33	  Deduce end_op
SS = 5	CP = 33	    Match  ;
SS = 5	CP = 33	    Accept ;
SS = 4	CP = 34	  Accept end_op
SS = 3	CP = 34	Accept statement
SS = 3	CP = 34	Deduce statement
SS = 4	CP = 34	  Deduce non_terminal_symbol
SS = 4	CP = 34	    Match  id
SS = 4	CP = 34	    Accept id
SS = 4	CP = 35	  Accept non_terminal_symbol
SS = 4	CP = 35	  Deduce assign_op
SS = 5	CP = 35	    Match  ::=
SS = 5	CP = 35	    Accept ::=
SS = 4	CP = 36	  Accept assign_op
SS = 4	CP = 36	  Deduce declaration
SS = 5	CP = 36	    Deduce term
SS = 6	CP = 36	      Deduce part
SS = 6	CP = 36	        Predict Failed in CONDITION
SS = 6	CP = 36	        Predict Failed in CONDITION
SS = 6	CP = 36	        Predict Failed in CONDITION
SS = 8	CP = 36	        Deduce simple_part
SS = 10	CP = 36	          Deduce right_non_terminal_symbol
SS = 11	CP = 36	            Deduce non_terminal_symbol
SS = 11	CP = 36	              Match  id
SS = 11	CP = 36	              Accept id
SS = 11	CP = 37	            Accept non_terminal_symbol
SS = 10	CP = 37	          Accept right_non_terminal_symbol
SS = 8	CP = 37	        Accept simple_part
SS = 6	CP = 37	      Accept part
SS = 7	CP = 37	      Match  ,
SS = 7	CP = 37	      Reject ,
SS = 6	CP = 37	      Predict Failed: part
SS = 5	CP = 37	    Accept term
SS = 5	CP = 37	    Match  |
SS = 5	CP = 37	    Accept |
SS = 6	CP = 38	    Deduce term
SS = 7	CP = 38	      Deduce part
SS = 7	CP = 38	        Predict Failed in CONDITION
SS = 7	CP = 38	        Predict Failed in CONDITION
SS = 7	CP = 38	        Predict Failed in CONDITION
SS = 9	CP = 38	        Deduce simple_part
SS = 11	CP = 38	          Deduce right_non_terminal_symbol
SS = 12	CP = 38	            Deduce non_terminal_symbol
SS = 12	CP = 38	              Match  id
SS = 12	CP = 38	              Accept id
SS = 12	CP = 39	            Accept non_terminal_symbol
SS = 11	CP = 39	          Accept right_non_terminal_symbol
SS = 9	CP = 39	        Accept simple_part
SS = 7	CP = 39	      Accept part
SS = 8	CP = 39	      Match  ,
SS = 8	CP = 39	      Reject ,
SS = 7	CP = 39	      Predict Failed: part
SS = 6	CP = 39	    Accept term
SS = 5	CP = 39	    Match  |
SS = 5	CP = 39	    Accept |
SS = 6	CP = 40	    Deduce term
SS = 7	CP = 40	      Deduce part
SS = 7	CP = 40	        Predict Failed in CONDITION
SS = 7	CP = 40	        Predict Failed in CONDITION
SS = 7	CP = 40	        Predict Failed in CONDITION
SS = 9	CP = 40	        Deduce simple_part
SS = 11	CP = 40	          Deduce right_non_terminal_symbol
SS = 12	CP = 40	            Deduce non_terminal_symbol
SS = 12	CP = 40	              Match  id
SS = 12	CP = 40	              Accept id
SS = 12	CP = 41	            Accept non_terminal_symbol
SS = 11	CP = 41	          Accept right_non_terminal_symbol
SS = 9	CP = 41	        Accept simple_part
SS = 7	CP = 41	      Accept part
SS = 8	CP = 41	      Match  ,
SS = 8	CP = 41	      Reject ,
SS = 7	CP = 41	      Predict Failed: part
SS = 6	CP = 41	    Accept term
SS = 5	CP = 41	    Match  |
SS = 5	CP = 41	    Accept |
SS = 6	CP = 42	    Deduce term
SS = 7	CP = 42	      Deduce part
SS = 7	CP = 42	        Predict Failed in CONDITION
SS = 7	CP = 42	        Predict Failed in CONDITION
SS = 7	CP = 42	        Predict Failed in CONDITION
SS = 9	CP = 42	        Deduce simple_part
SS = 11	CP = 42	          Deduce right_non_terminal_symbol
SS = 12	CP = 42	            Deduce non_terminal_symbol
SS = 12	CP = 42	              Match  id
SS = 12	CP = 42	              Accept id
SS = 12	CP = 43	            Accept non_terminal_symbol
SS = 11	CP = 43	          Accept right_non_terminal_symbol
SS = 9	CP = 43	        Accept simple_part
SS = 7	CP = 43	      Accept part
SS = 8	CP = 43	      Match  ,
SS = 8	CP = 43	      Reject ,
SS = 7	CP = 43	      Predict Failed: part
SS = 6	CP = 43	    Accept term
SS = 5	CP = 43	    Match  |
SS = 5	CP = 43	    Reject |
SS = 4	CP = 43	  Accept declaration
SS = 4	CP = 43	  Deduce end_op
SS = 5	CP = 43	    Match  ;
SS = 5	CP = 43	    Accept ;
SS = 4	CP = 44	  Accept end_op
SS = 3	CP = 44	Accept statement
SS = 3	CP = 44	Deduce statement
SS = 4	CP = 44	  Deduce non_terminal_symbol
SS = 4	CP = 44	    Match  id
SS = 4	CP = 44	    Accept id
SS = 4	CP = 45	  Accept non_terminal_symbol
SS = 4	CP = 45	  Deduce assign_op
SS = 5	CP = 45	    Match  ::=
SS = 5	CP = 45	    Accept ::=
SS = 4	CP = 46	  Accept assign_op
SS = 4	CP = 46	  Deduce declaration
SS = 5	CP = 46	    Deduce term
SS = 6	CP = 46	      Deduce part
SS = 6	CP = 46	        Predict Failed in CONDITION
SS = 6	CP = 46	        Predict Failed in CONDITION
SS = 6	CP = 46	        Predict Failed in CONDITION
SS = 8	CP = 46	        Deduce simple_part
SS = 10	CP = 46	          Deduce right_non_terminal_symbol
SS = 11	CP = 46	            Deduce non_terminal_symbol
SS = 11	CP = 46	              Match  id
SS = 11	CP = 46	              Accept id
SS = 11	CP = 47	            Accept non_terminal_symbol
SS = 10	CP = 47	          Accept right_non_terminal_symbol
SS = 8	CP = 47	        Accept simple_part
SS = 6	CP = 47	      Accept part
SS = 7	CP = 47	      Match  ,
SS = 7	CP = 47	      Reject ,
SS = 6	CP = 47	      Predict Failed: part
SS = 5	CP = 47	    Accept term
SS = 5	CP = 47	    Match  |
SS = 5	CP = 47	    Accept |
SS = 6	CP = 48	    Deduce term
SS = 7	CP = 48	      Deduce part
SS = 7	CP = 48	        Predict Failed in CONDITION
SS = 7	CP = 48	        Predict Failed in CONDITION
SS = 7	CP = 48	        Predict Failed in CONDITION
SS = 9	CP = 48	        Deduce simple_part
SS = 11	CP = 48	          Deduce right_non_terminal_symbol
SS = 12	CP = 48	            Deduce non_terminal_symbol
SS = 12	CP = 48	              Match  id
SS = 12	CP = 48	              Accept id
SS = 12	CP = 49	            Accept non_terminal_symbol
SS = 11	CP = 49	          Accept right_non_terminal_symbol
SS = 9	CP = 49	        Accept simple_part
SS = 7	CP = 49	      Accept part
SS = 8	CP = 49	      Match  ,
SS = 8	CP = 49	      Reject ,
SS = 7	CP = 49	      Predict Failed: part
SS = 6	CP = 49	    Accept term
SS = 5	CP = 49	    Match  |
SS = 5	CP = 49	    Accept |
SS = 6	CP = 50	    Deduce term
SS = 7	CP = 50	      Deduce part
SS = 7	CP = 50	        Predict Failed in CONDITION
SS = 7	CP = 50	        Predict Failed in CONDITION
SS = 7	CP = 50	        Predict Failed in CONDITION
SS = 9	CP = 50	        Deduce simple_part
SS = 11	CP = 50	          Deduce right_non_terminal_symbol
SS = 12	CP = 50	            Deduce non_terminal_symbol
SS = 12	CP = 50	              Match  id
SS = 12	CP = 50	              Accept id
SS = 12	CP = 51	            Accept non_terminal_symbol
SS = 11	CP = 51	          Accept right_non_terminal_symbol
SS = 9	CP = 51	        Accept simple_part
SS = 7	CP = 51	      Accept part
SS = 8	CP = 51	      Match  ,
SS = 8	CP = 51	      Reject ,
SS = 7	CP = 51	      Predict Failed: part
SS = 6	CP = 51	    Accept term
SS = 5	CP = 51	    Match  |
SS = 5	CP = 51	    Accept |
SS = 6	CP = 52	    Deduce term
SS = 7	CP = 52	      Deduce part
SS = 7	CP = 52	        Predict Failed in CONDITION
SS = 7	CP = 52	        Predict Failed in CONDITION
SS = 7	CP = 52	        Predict Failed in CONDITION
SS = 9	CP = 52	        Deduce simple_part
SS = 11	CP = 52	          Deduce right_non_terminal_symbol
SS = 12	CP = 52	            Deduce non_terminal_symbol
SS = 12	CP = 52	              Match  id
SS = 12	CP = 52	              Accept id
SS = 12	CP = 53	            Accept non_terminal_symbol
SS = 11	CP = 53	          Accept right_non_terminal_symbol
SS = 9	CP = 53	        Accept simple_part
SS = 7	CP = 53	      Accept part
SS = 8	CP = 53	      Match  ,
SS = 8	CP = 53	      Reject ,
SS = 7	CP = 53	      Predict Failed: part
SS = 6	CP = 53	    Accept term
SS = 5	CP = 53	    Match  |
SS = 5	CP = 53	    Accept |
SS = 6	CP = 54	    Deduce term
SS = 7	CP = 54	      Deduce part
SS = 7	CP = 54	        Predict Failed in CONDITION
SS = 7	CP = 54	        Predict Failed in CONDITION
SS = 7	CP = 54	        Predict Failed in CONDITION
SS = 9	CP = 54	        Deduce simple_part
SS = 11	CP = 54	          Deduce right_non_terminal_symbol
SS = 12	CP = 54	            Deduce non_terminal_symbol
SS = 12	CP = 54	              Match  id
SS = 12	CP = 54	              Accept id
SS = 12	CP = 55	            Accept non_terminal_symbol
SS = 11	CP = 55	          Accept right_non_terminal_symbol
SS = 9	CP = 55	        Accept simple_part
SS = 7	CP = 55	      Accept part
SS = 8	CP = 55	      Match  ,
SS = 8	CP = 55	      Reject ,
SS = 7	CP = 55	      Predict Failed: part
SS = 6	CP = 55	    Accept term
SS = 5	CP = 55	    Match  |
SS = 5	CP = 55	    Accept |
SS = 6	CP = 56	    Deduce term
SS = 7	CP = 56	      Deduce part
SS = 7	CP = 56	        Predict Failed in CONDITION
SS = 7	CP = 56	        Predict Failed in CONDITION
SS = 7	CP = 56	        Predict Failed in CONDITION
SS = 9	CP = 56	        Deduce simple_part
SS = 11	CP = 56	          Deduce right_non_terminal_symbol
SS = 12	CP = 56	            Deduce non_terminal_symbol
SS = 12	CP = 56	              Match  id
SS = 12	CP = 56	              Accept id
SS = 12	CP = 57	            Accept non_terminal_symbol
SS = 11	CP = 57	          Accept right_non_terminal_symbol
SS = 9	CP = 57	        Accept simple_part
SS = 7	CP = 57	      Accept part
SS = 8	CP = 57	      Match  ,
SS = 8	CP = 57	      Reject ,
SS = 7	CP = 57	      Predict Failed: part
SS = 6	CP = 57	    Accept term
SS = 5	CP = 57	    Match  |
SS = 5	CP = 57	    Accept |
SS = 6	CP = 58	    Deduce term
SS = 7	CP = 58	      Deduce part
SS = 7	CP = 58	        Predict Failed in CONDITION
SS = 7	CP = 58	        Predict Failed in CONDITION
SS = 7	CP = 58	        Predict Failed in CONDITION
SS = 9	CP = 58	        Deduce simple_part
SS = 11	CP = 58	          Deduce right_non_terminal_symbol
SS = 12	CP = 58	            Deduce non_terminal_symbol
SS = 12	CP = 58	              Match  id
SS = 12	CP = 58	              Accept id
SS = 12	CP = 59	            Accept non_terminal_symbol
SS = 11	CP = 59	          Accept right_non_terminal_symbol
SS = 9	CP = 59	        Accept simple_part
SS = 7	CP = 59	      Accept part
SS = 8	CP = 59	      Match  ,
SS = 8	CP = 59	      Reject ,
SS = 7	CP = 59	      Predict Failed: part
SS = 6	CP = 59	    Accept term
SS = 5	CP = 59	    Match  |
SS = 5	CP = 59	    Accept |
SS = 6	CP = 60	    Deduce term
SS = 7	CP = 60	      Deduce part
SS = 7	CP = 60	        Predict Failed in CONDITION
SS = 7	CP = 60	        Predict Failed in CONDITION
SS = 7	CP = 60	        Predict Failed in CONDITION
SS = 9	CP = 60	        Deduce simple_part
SS = 11	CP = 60	          Deduce right_non_terminal_symbol
SS = 12	CP = 60	            Deduce non_terminal_symbol
SS = 12	CP = 60	              Match  id
SS = 12	CP = 60	              Accept id
SS = 12	CP = 61	            Accept non_terminal_symbol
SS = 11	CP = 61	          Accept right_non_terminal_symbol
SS = 9	CP = 61	        Accept simple_part
SS = 7	CP = 61	      Accept part
SS = 8	CP = 61	      Match  ,
SS = 8	CP = 61	      Reject ,
SS = 7	CP = 61	      Predict Failed: part
SS = 6	CP = 61	    Accept term
SS = 5	CP = 61	    Match  |
SS = 5	CP = 61	    Accept |
SS = 6	CP = 62	    Deduce term
SS = 7	CP = 62	      Deduce part
SS = 7	CP = 62	        Predict Failed in CONDITION
SS = 7	CP = 62	        Predict Failed in CONDITION
SS = 7	CP = 62	        Predict Failed in CONDITION
SS = 9	CP = 62	        Deduce simple_part
SS = 11	CP = 62	          Deduce right_non_terminal_symbol
SS = 12	CP = 62	            Deduce non_terminal_symbol
SS = 12	CP = 62	              Match  id
SS = 12	CP = 62	              Accept id
SS = 12	CP = 63	            Accept non_terminal_symbol
SS = 11	CP = 63	          Accept right_non_terminal_symbol
SS = 9	CP = 63	        Accept simple_part
SS = 7	CP = 63	      Accept part
SS = 8	CP = 63	      Match  ,
SS = 8	CP = 63	      Reject ,
SS = 7	CP = 63	      Predict Failed: part
SS = 6	CP = 63	    Accept term
SS = 5	CP = 63	    Match  |
SS = 5	CP = 63	    Accept |
SS = 6	CP = 64	    Deduce term
SS = 7	CP = 64	      Deduce part
SS = 7	CP = 64	        Predict Failed in CONDITION
SS = 7	CP = 64	        Predict Failed in CONDITION
SS = 7	CP = 64	        Predict Failed in CONDITION
SS = 9	CP = 64	        Deduce simple_part
SS = 11	CP = 64	          Deduce right_non_terminal_symbol
SS = 12	CP = 64	            Deduce non_terminal_symbol
SS = 12	CP = 64	              Match  id
SS = 12	CP = 64	              Accept id
SS = 12	CP = 65	            Accept non_terminal_symbol
SS = 11	CP = 65	          Accept right_non_terminal_symbol
SS = 9	CP = 65	        Accept simple_part
SS = 7	CP = 65	      Accept part
SS = 8	CP = 65	      Match  ,
SS = 8	CP = 65	      Reject ,
SS = 7	CP = 65	      Predict Failed: part
SS = 6	CP = 65	    Accept term
SS = 5	CP = 65	    Match  |
SS = 5	CP = 65	    Accept |
SS = 6	CP = 66	    Deduce term
SS = 7	CP = 66	      Deduce part
SS = 7	CP = 66	        Predict Failed in CONDITION
SS = 7	CP = 66	        Predict Failed in CONDITION
SS = 7	CP = 66	        Predict Failed in CONDITION
SS = 9	CP = 66	        Deduce simple_part
SS = 11	CP = 66	          Deduce right_non_terminal_symbol
SS = 12	CP = 66	            Deduce non_terminal_symbol
SS = 12	CP = 66	              Match  id
SS = 12	CP = 66	              Accept id
SS = 12	CP = 67	            Accept non_terminal_symbol
SS = 11	CP = 67	          Accept right_non_terminal_symbol
SS = 9	CP = 67	        Accept simple_part
SS = 7	CP = 67	      Accept part
SS = 8	CP = 67	      Match  ,
SS = 8	CP = 67	      Reject ,
SS = 7	CP = 67	      Predict Failed: part
SS = 6	CP = 67	    Accept term
SS = 5	CP = 67	    Match  |
SS = 5	CP = 67	    Accept |
SS = 6	CP = 68	    Deduce term
SS = 7	CP = 68	      Deduce part
SS = 7	CP = 68	        Predict Failed in CONDITION
SS = 7	CP = 68	        Predict Failed in CONDITION
SS = 7	CP = 68	        Predict Failed in CONDITION
SS = 9	CP = 68	        Deduce simple_part
SS = 11	CP = 68	          Deduce right_non_terminal_symbol
SS = 12	CP = 68	            Deduce non_terminal_symbol
SS = 12	CP = 68	              Match  id
SS = 12	CP = 68	              Accept id
SS = 12	CP = 69	            Accept non_terminal_symbol
SS = 11	CP = 69	          Accept right_non_terminal_symbol
SS = 9	CP = 69	        Accept simple_part
SS = 7	CP = 69	      Accept part
SS = 8	CP = 69	      Match  ,
SS = 8	CP = 69	      Reject ,
SS = 7	CP = 69	      Predict Failed: part
SS = 6	CP = 69	    Accept term
SS = 5	CP = 69	    Match  |
SS = 5	CP = 69	    Accept |
SS = 6	CP = 70	    Deduce term
SS = 7	CP = 70	      Deduce part
SS = 7	CP = 70	        Predict Failed in CONDITION
SS = 7	CP = 70	        Predict Failed in CONDITION
SS = 7	CP = 70	        Predict Failed in CONDITION
SS = 9	CP = 70	        Deduce simple_part
SS = 11	CP = 70	          Deduce right_non_terminal_symbol
SS = 12	CP = 70	            Deduce non_terminal_symbol
SS = 12	CP = 70	              Match  id
SS = 12	CP = 70	              Accept id
SS = 12	CP = 71	            Accept non_terminal_symbol
SS = 11	CP = 71	          Accept right_non_terminal_symbol
SS = 9	CP = 71	        Accept simple_part
SS = 7	CP = 71	      Accept part
SS = 8	CP = 71	      Match  ,
SS = 8	CP = 71	      Reject ,
SS = 7	CP = 71	      Predict Failed: part
SS = 6	CP = 71	    Accept term
SS = 5	CP = 71	    Match  |
SS = 5	CP = 71	    Accept |
SS = 6	CP = 72	    Deduce term
SS = 7	CP = 72	      Deduce part
SS = 7	CP = 72	        Predict Failed in CONDITION
SS = 7	CP = 72	        Predict Failed in CONDITION
SS = 7	CP = 72	        Predict Failed in CONDITION
SS = 9	CP = 72	        Deduce simple_part
SS = 11	CP = 72	          Deduce right_non_terminal_symbol
SS = 12	CP = 72	            Deduce non_terminal_symbol
SS = 12	CP = 72	              Match  id
SS = 12	CP = 72	              Accept id
SS = 12	CP = 73	            Accept non_terminal_symbol
SS = 11	CP = 73	          Accept right_non_terminal_symbol
SS = 9	CP = 73	        Accept simple_part
SS = 7	CP = 73	      Accept part
SS = 8	CP = 73	      Match  ,
SS = 8	CP = 73	      Reject ,
SS = 7	CP = 73	      Predict Failed: part
SS = 6	CP = 73	    Accept term
SS = 5	CP = 73	    Match  |
SS = 5	CP = 73	    Accept |
SS = 6	CP = 74	    Deduce term
SS = 7	CP = 74	      Deduce part
SS = 7	CP = 74	        Predict Failed in CONDITION
SS = 7	CP = 74	        Predict Failed in CONDITION
SS = 7	CP = 74	        Predict Failed in CONDITION
SS = 9	CP = 74	        Deduce simple_part
SS = 11	CP = 74	          Deduce right_non_terminal_symbol
SS = 12	CP = 74	            Deduce non_terminal_symbol
SS = 12	CP = 74	              Match  id
SS = 12	CP = 74	              Accept id
SS = 12	CP = 75	            Accept non_terminal_symbol
SS = 11	CP = 75	          Accept right_non_terminal_symbol
SS = 9	CP = 75	        Accept simple_part
SS = 7	CP = 75	      Accept part
SS = 8	CP = 75	      Match  ,
SS = 8	CP = 75	      Reject ,
SS = 7	CP = 75	      Predict Failed: part
SS = 6	CP = 75	    Accept term
SS = 5	CP = 75	    Match  |
SS = 5	CP = 75	    Accept |
SS = 6	CP = 76	    Deduce term
SS = 7	CP = 76	      Deduce part
SS = 7	CP = 76	        Predict Failed in CONDITION
SS = 7	CP = 76	        Predict Failed in CONDITION
SS = 7	CP = 76	        Predict Failed in CONDITION
SS = 9	CP = 76	        Deduce simple_part
SS = 11	CP = 76	          Deduce right_non_terminal_symbol
SS = 12	CP = 76	            Deduce non_terminal_symbol
SS = 12	CP = 76	              Match  id
SS = 12	CP = 76	              Accept id
SS = 12	CP = 77	            Accept non_terminal_symbol
SS = 11	CP = 77	          Accept right_non_terminal_symbol
SS = 9	CP = 77	        Accept simple_part
SS = 7	CP = 77	      Accept part
SS = 8	CP = 77	      Match  ,
SS = 8	CP = 77	      Reject ,
SS = 7	CP = 77	      Predict Failed: part
SS = 6	CP = 77	    Accept term
SS = 5	CP = 77	    Match  |
SS = 5	CP = 77	    Accept |
SS = 6	CP = 78	    Deduce term
SS = 7	CP = 78	      Deduce part
SS = 7	CP = 78	        Predict Failed in CONDITION
SS = 7	CP = 78	        Predict Failed in CONDITION
SS = 7	CP = 78	        Predict Failed in CONDITION
SS = 9	CP = 78	        Deduce simple_part
SS = 11	CP = 78	          Deduce right_non_terminal_symbol
SS = 12	CP = 78	            Deduce non_terminal_symbol
SS = 12	CP = 78	              Match  id
SS = 12	CP = 78	              Accept id
SS = 12	CP = 79	            Accept non_terminal_symbol
SS = 11	CP = 79	          Accept right_non_terminal_symbol
SS = 9	CP = 79	        Accept simple_part
SS = 7	CP = 79	      Accept part
SS = 8	CP = 79	      Match  ,
SS = 8	CP = 79	      Reject ,
SS = 7	CP = 79	      Predict Failed: part
SS = 6	CP = 79	    Accept term
SS = 5	CP = 79	    Match  |
SS = 5	CP = 79	    Accept |
SS = 6	CP = 80	    Deduce term
SS = 7	CP = 80	      Deduce part
SS = 7	CP = 80	        Predict Failed in CONDITION
SS = 7	CP = 80	        Predict Failed in CONDITION
SS = 7	CP = 80	        Predict Failed in CONDITION
SS = 9	CP = 80	        Deduce simple_part
SS = 11	CP = 80	          Deduce right_non_terminal_symbol
SS = 12	CP = 80	            Deduce non_terminal_symbol
SS = 12	CP = 80	              Match  id
SS = 12	CP = 80	              Accept id
SS = 12	CP = 81	            Accept non_terminal_symbol
SS = 11	CP = 81	          Accept right_non_terminal_symbol
SS = 9	CP = 81	        Accept simple_part
SS = 7	CP = 81	      Accept part
SS = 8	CP = 81	      Match  ,
SS = 8	CP = 81	      Reject ,
SS = 7	CP = 81	      Predict Failed: part
SS = 6	CP = 81	    Accept term
SS = 5	CP = 81	    Match  |
SS = 5	CP = 81	    Accept |
SS = 6	CP = 82	    Deduce term
SS = 7	CP = 82	      Deduce part
SS = 7	CP = 82	        Predict Failed in CONDITION
SS = 7	CP = 82	        Predict Failed in CONDITION
SS = 7	CP = 82	        Predict Failed in CONDITION
SS = 9	CP = 82	        Deduce simple_part
SS = 11	CP = 82	          Deduce right_non_terminal_symbol
SS = 12	CP = 82	            Deduce non_terminal_symbol
SS = 12	CP = 82	              Match  id
SS = 12	CP = 82	              Accept id
SS = 12	CP = 83	            Accept non_terminal_symbol
SS = 11	CP = 83	          Accept right_non_terminal_symbol
SS = 9	CP = 83	        Accept simple_part
SS = 7	CP = 83	      Accept part
SS = 8	CP = 83	      Match  ,
SS = 8	CP = 83	      Reject ,
SS = 7	CP = 83	      Predict Failed: part
SS = 6	CP = 83	    Accept term
SS = 5	CP = 83	    Match  |
SS = 5	CP = 83	    Accept |
SS = 6	CP = 84	    Deduce term
SS = 7	CP = 84	      Deduce part
SS = 7	CP = 84	        Predict Failed in CONDITION
SS = 7	CP = 84	        Predict Failed in CONDITION
SS = 7	CP = 84	        Predict Failed in CONDITION
SS = 9	CP = 84	        Deduce simple_part
SS = 11	CP = 84	          Deduce right_non_terminal_symbol
SS = 12	CP = 84	            Deduce non_terminal_symbol
SS = 12	CP = 84	              Match  id
SS = 12	CP = 84	              Accept id
SS = 12	CP = 85	            Accept non_terminal_symbol
SS = 11	CP = 85	          Accept right_non_terminal_symbol
SS = 9	CP = 85	        Accept simple_part
SS = 7	CP = 85	      Accept part
SS = 8	CP = 85	      Match  ,
SS = 8	CP = 85	      Reject ,
SS = 7	CP = 85	      Predict Failed: part
SS = 6	CP = 85	    Accept term
SS = 5	CP = 85	    Match  |
SS = 5	CP = 85	    Reject |
SS = 4	CP = 85	  Accept declaration
SS = 4	CP = 85	  Deduce end_op
SS = 5	CP = 85	    Match  ;
SS = 5	CP = 85	    Accept ;
SS = 4	CP = 86	  Accept end_op
SS = 3	CP = 86	Accept statement
SS = 3	CP = 86	Deduce statement
SS = 4	CP = 86	  Deduce non_terminal_symbol
SS = 4	CP = 86	    Match  id
SS = 4	CP = 86	    Accept id
SS = 4	CP = 87	  Accept non_terminal_symbol
SS = 4	CP = 87	  Deduce assign_op
SS = 5	CP = 87	    Match  ::=
SS = 5	CP = 87	    Accept ::=
SS = 4	CP = 88	  Accept assign_op
SS = 4	CP = 88	  Deduce declaration
SS = 5	CP = 88	    Deduce term
SS = 6	CP = 88	      Deduce part
SS = 6	CP = 88	        Predict Failed in CONDITION
SS = 6	CP = 88	        Predict Failed in CONDITION
SS = 6	CP = 88	        Predict Failed in CONDITION
SS = 8	CP = 88	        Deduce simple_part
SS = 10	CP = 88	          Deduce right_non_terminal_symbol
SS = 11	CP = 88	            Deduce non_terminal_symbol
SS = 11	CP = 88	              Match  id
SS = 11	CP = 88	              Accept id
SS = 11	CP = 89	            Accept non_terminal_symbol
SS = 10	CP = 89	          Accept right_non_terminal_symbol
SS = 8	CP = 89	        Accept simple_part
SS = 6	CP = 89	      Accept part
SS = 7	CP = 89	      Match  ,
SS = 7	CP = 89	      Reject ,
SS = 6	CP = 89	      Predict Failed: part
SS = 5	CP = 89	    Accept term
SS = 5	CP = 89	    Match  |
SS = 5	CP = 89	    Accept |
SS = 6	CP = 90	    Deduce term
SS = 7	CP = 90	      Deduce part
SS = 7	CP = 90	        Predict Failed in CONDITION
SS = 7	CP = 90	        Predict Failed in CONDITION
SS = 7	CP = 90	        Predict Failed in CONDITION
SS = 9	CP = 90	        Deduce simple_part
SS = 11	CP = 90	          Deduce right_non_terminal_symbol
SS = 12	CP = 90	            Deduce non_terminal_symbol
SS = 12	CP = 90	              Match  id
SS = 12	CP = 90	              Accept id
SS = 12	CP = 91	            Accept non_terminal_symbol
SS = 11	CP = 91	          Accept right_non_terminal_symbol
SS = 9	CP = 91	        Accept simple_part
SS = 7	CP = 91	      Accept part
SS = 8	CP = 91	      Match  ,
SS = 8	CP = 91	      Reject ,
SS = 7	CP = 91	      Predict Failed: part
SS = 6	CP = 91	    Accept term
SS = 5	CP = 91	    Match  |
SS = 5	CP = 91	    Accept |
SS = 6	CP = 92	    Deduce term
SS = 7	CP = 92	      Deduce part
SS = 7	CP = 92	        Predict Failed in CONDITION
SS = 7	CP = 92	        Predict Failed in CONDITION
SS = 7	CP = 92	        Predict Failed in CONDITION
SS = 9	CP = 92	        Deduce simple_part
SS = 11	CP = 92	          Deduce right_non_terminal_symbol
SS = 12	CP = 92	            Deduce non_terminal_symbol
SS = 12	CP = 92	              Match  id
SS = 12	CP = 92	              Accept id
SS = 12	CP = 93	            Accept non_terminal_symbol
SS = 11	CP = 93	          Accept right_non_terminal_symbol
SS = 9	CP = 93	        Accept simple_part
SS = 7	CP = 93	      Accept part
SS = 8	CP = 93	      Match  ,
SS = 8	CP = 93	      Reject ,
SS = 7	CP = 93	      Predict Failed: part
SS = 6	CP = 93	    Accept term
SS = 5	CP = 93	    Match  |
SS = 5	CP = 93	    Accept |
SS = 6	CP = 94	    Deduce term
SS = 7	CP = 94	      Deduce part
SS = 7	CP = 94	        Predict Failed in CONDITION
SS = 7	CP = 94	        Predict Failed in CONDITION
SS = 7	CP = 94	        Predict Failed in CONDITION
SS = 9	CP = 94	        Deduce simple_part
SS = 11	CP = 94	          Deduce right_non_terminal_symbol
SS = 12	CP = 94	            Deduce non_terminal_symbol
SS = 12	CP = 94	              Match  id
SS = 12	CP = 94	              Accept id
SS = 12	CP = 95	            Accept non_terminal_symbol
SS = 11	CP = 95	          Accept right_non_terminal_symbol
SS = 9	CP = 95	        Accept simple_part
SS = 7	CP = 95	      Accept part
SS = 8	CP = 95	      Match  ,
SS = 8	CP = 95	      Reject ,
SS = 7	CP = 95	      Predict Failed: part
SS = 6	CP = 95	    Accept term
SS = 5	CP = 95	    Match  |
SS = 5	CP = 95	    Accept |
SS = 6	CP = 96	    Deduce term
SS = 7	CP = 96	      Deduce part
SS = 7	CP = 96	        Predict Failed in CONDITION
SS = 7	CP = 96	        Predict Failed in CONDITION
SS = 7	CP = 96	        Predict Failed in CONDITION
SS = 9	CP = 96	        Deduce simple_part
SS = 11	CP = 96	          Deduce right_non_terminal_symbol
SS = 12	CP = 96	            Deduce non_terminal_symbol
SS = 12	CP = 96	              Match  id
SS = 12	CP = 96	              Accept id
SS = 12	CP = 97	            Accept non_terminal_symbol
SS = 11	CP = 97	          Accept right_non_terminal_symbol
SS = 9	CP = 97	        Accept simple_part
SS = 7	CP = 97	      Accept part
SS = 8	CP = 97	      Match  ,
SS = 8	CP = 97	      Reject ,
SS = 7	CP = 97	      Predict Failed: part
SS = 6	CP = 97	    Accept term
SS = 5	CP = 97	    Match  |
SS = 5	CP = 97	    Accept |
SS = 6	CP = 98	    Deduce term
SS = 7	CP = 98	      Deduce part
SS = 7	CP = 98	        Predict Failed in CONDITION
SS = 7	CP = 98	        Predict Failed in CONDITION
SS = 7	CP = 98	        Predict Failed in CONDITION
SS = 9	CP = 98	        Deduce simple_part
SS = 11	CP = 98	          Deduce right_non_terminal_symbol
SS = 12	CP = 98	            Deduce non_terminal_symbol
SS = 12	CP = 98	              Match  id
SS = 12	CP = 98	              Accept id
SS = 12	CP = 99	            Accept non_terminal_symbol
SS = 11	CP = 99	          Accept right_non_terminal_symbol
SS = 9	CP = 99	        Accept simple_part
SS = 7	CP = 99	      Accept part
SS = 8	CP = 99	      Match  ,
SS = 8	CP = 99	      Reject ,
SS = 7	CP = 99	      Predict Failed: part
SS = 6	CP = 99	    Accept term
SS = 5	CP = 99	    Match  |
SS = 5	CP = 99	    Reject |
SS = 4	CP = 99	  Accept declaration
SS = 4	CP = 99	  Deduce end_op
SS = 5	CP = 99	    Match  ;
SS = 5	CP = 99	    Accept ;
SS = 4	CP = 100	  Accept end_op
SS = 3	CP = 100	Accept statement
SS = 3	CP = 100	Deduce statement
SS = 4	CP = 100	  Deduce non_terminal_symbol
SS = 4	CP = 100	    Match  id
SS = 4	CP = 100	    Accept id
SS = 4	CP = 101	  Accept non_terminal_symbol
SS = 4	CP = 101	  Deduce assign_op
SS = 5	CP = 101	    Match  ::=
SS = 5	CP = 101	    Accept ::=
SS = 4	CP = 102	  Accept assign_op
SS = 4	CP = 102	  Deduce declaration
SS = 5	CP = 102	    Deduce term
SS = 6	CP = 102	      Deduce part
SS = 6	CP = 102	        Predict Failed in CONDITION
SS = 6	CP = 102	        Predict Failed in CONDITION
SS = 6	CP = 102	        Predict Failed in CONDITION
SS = 8	CP = 102	        Deduce simple_part
SS = 8	CP = 102	          Predict Failed in CONDITION
SS = 10	CP = 102	          Deduce terminal_symbol
SS = 10	CP = 102	            Predict Failed in CONDITION
SS = 10	CP = 102	            Predict Failed in CONDITION
SS = 11	CP = 102	            Match  token
SS = 11	CP = 102	            Accept token
SS = 10	CP = 103	          Accept terminal_symbol
SS = 8	CP = 103	        Accept simple_part
SS = 6	CP = 103	      Accept part
SS = 7	CP = 103	      Match  ,
SS = 7	CP = 103	      Reject ,
SS = 7	CP = 103	      Deduce part
SS = 7	CP = 103	        Predict Failed in CONDITION
SS = 7	CP = 103	        Predict Failed in CONDITION
SS = 7	CP = 103	        Predict Failed in CONDITION
SS = 9	CP = 103	        Deduce simple_part
SS = 9	CP = 103	          Predict Failed in CONDITION
SS = 11	CP = 103	          Deduce terminal_symbol
SS = 11	CP = 103	            Predict Failed in CONDITION
SS = 11	CP = 103	            Predict Failed in CONDITION
SS = 12	CP = 103	            Match  token
SS = 12	CP = 103	            Accept token
SS = 11	CP = 104	          Accept terminal_symbol
SS = 9	CP = 104	        Accept simple_part
SS = 7	CP = 104	      Accept part
SS = 7	CP = 104	      Match  ,
SS = 7	CP = 104	      Reject ,
SS = 6	CP = 104	      Predict Failed: part
SS = 5	CP = 104	    Accept term
SS = 5	CP = 104	    Match  |
SS = 5	CP = 104	    Reject |
SS = 4	CP = 104	  Accept declaration
SS = 4	CP = 104	  Deduce end_op
SS = 5	CP = 104	    Match  ;
SS = 5	CP = 104	    Accept ;
SS = 4	CP = 105	  Accept end_op
SS = 3	CP = 105	Accept statement
SS = 3	CP = 105	Deduce statement
SS = 4	CP = 105	  Deduce non_terminal_symbol
SS = 4	CP = 105	    Match  id
SS = 4	CP = 105	    Accept id
SS = 4	CP = 106	  Accept non_terminal_symbol
SS = 4	CP = 106	  Deduce assign_op
SS = 5	CP = 106	    Match  ::=
SS = 5	CP = 106	    Accept ::=
SS = 4	CP = 107	  Accept assign_op
SS = 4	CP = 107	  Deduce declaration
SS = 5	CP = 107	    Deduce term
SS = 6	CP = 107	      Deduce part
SS = 6	CP = 107	        Predict Failed in CONDITION
SS = 6	CP = 107	        Predict Failed in CONDITION
SS = 6	CP = 107	        Predict Failed in CONDITION
SS = 8	CP = 107	        Deduce simple_part
SS = 8	CP = 107	          Predict Failed in CONDITION
SS = 10	CP = 107	          Deduce terminal_symbol
SS = 11	CP = 107	            Match  slit
SS = 11	CP = 107	            Accept slit
SS = 10	CP = 108	          Accept terminal_symbol
SS = 8	CP = 108	        Accept simple_part
SS = 6	CP = 108	      Accept part
SS = 7	CP = 108	      Match  ,
SS = 7	CP = 108	      Reject ,
SS = 7	CP = 108	      Deduce part
SS = 7	CP = 108	        Predict Failed in CONDITION
SS = 7	CP = 108	        Predict Failed in CONDITION
SS = 7	CP = 108	        Predict Failed in CONDITION
SS = 9	CP = 108	        Deduce simple_part
SS = 9	CP = 108	          Predict Failed in CONDITION
SS = 11	CP = 108	          Deduce terminal_symbol
SS = 11	CP = 108	            Predict Failed in CONDITION
SS = 11	CP = 108	            Predict Failed in CONDITION
SS = 12	CP = 108	            Match  token
SS = 12	CP = 108	            Accept token
SS = 11	CP = 109	          Accept terminal_symbol
SS = 9	CP = 109	        Accept simple_part
SS = 7	CP = 109	      Accept part
SS = 7	CP = 109	      Match  ,
SS = 7	CP = 109	      Reject ,
SS = 7	CP = 109	      Deduce part
SS = 7	CP = 109	        Predict Failed in CONDITION
SS = 7	CP = 109	        Predict Failed in CONDITION
SS = 7	CP = 109	        Predict Failed in CONDITION
SS = 9	CP = 109	        Deduce simple_part
SS = 11	CP = 109	          Deduce right_non_terminal_symbol
SS = 12	CP = 109	            Deduce non_terminal_symbol
SS = 12	CP = 109	              Match  id
SS = 12	CP = 109	              Accept id
SS = 12	CP = 110	            Accept non_terminal_symbol
SS = 11	CP = 110	          Accept right_non_terminal_symbol
SS = 9	CP = 110	        Accept simple_part
SS = 7	CP = 110	      Accept part
SS = 7	CP = 110	      Match  ,
SS = 7	CP = 110	      Reject ,
SS = 6	CP = 110	      Predict Failed: part
SS = 5	CP = 110	    Accept term
SS = 5	CP = 110	    Match  |
SS = 5	CP = 110	    Reject |
SS = 4	CP = 110	  Accept declaration
SS = 4	CP = 110	  Deduce end_op
SS = 5	CP = 110	    Match  ;
SS = 5	CP = 110	    Accept ;
SS = 4	CP = 111	  Accept end_op
SS = 3	CP = 111	Accept statement
SS = 3	CP = 111	Deduce statement
SS = 4	CP = 111	  Deduce non_terminal_symbol
SS = 4	CP = 111	    Match  id
SS = 4	CP = 111	    Accept id
SS = 4	CP = 112	  Accept non_terminal_symbol
SS = 4	CP = 112	  Deduce assign_op
SS = 5	CP = 112	    Match  ::=
SS = 5	CP = 112	    Accept ::=
SS = 4	CP = 113	  Accept assign_op
SS = 4	CP = 113	  Deduce declaration
SS = 5	CP = 113	    Deduce term
SS = 6	CP = 113	      Deduce part
SS = 6	CP = 113	        Predict Failed in CONDITION
SS = 6	CP = 113	        Predict Failed in CONDITION
SS = 6	CP = 113	        Predict Failed in CONDITION
SS = 8	CP = 113	        Deduce simple_part
SS = 8	CP = 113	          Predict Failed in CONDITION
SS = 10	CP = 113	          Deduce terminal_symbol
SS = 11	CP = 113	            Match  slit
SS = 11	CP = 113	            Accept slit
SS = 10	CP = 114	          Accept terminal_symbol
SS = 8	CP = 114	        Accept simple_part
SS = 6	CP = 114	      Accept part
SS = 7	CP = 114	      Match  ,
SS = 7	CP = 114	      Reject ,
SS = 7	CP = 114	      Deduce part
SS = 7	CP = 114	        Predict Failed in CONDITION
SS = 7	CP = 114	        Predict Failed in CONDITION
SS = 7	CP = 114	        Predict Failed in CONDITION
SS = 9	CP = 114	        Deduce simple_part
SS = 11	CP = 114	          Deduce right_non_terminal_symbol
SS = 12	CP = 114	            Deduce non_terminal_symbol
SS = 12	CP = 114	              Match  id
SS = 12	CP = 114	              Accept id
SS = 12	CP = 115	            Accept non_terminal_symbol
SS = 11	CP = 115	          Accept right_non_terminal_symbol
SS = 9	CP = 115	        Accept simple_part
SS = 7	CP = 115	      Accept part
SS = 7	CP = 115	      Match  ,
SS = 7	CP = 115	      Reject ,
SS = 7	CP = 115	      Deduce part
SS = 7	CP = 115	        Predict Failed in CONDITION
SS = 7	CP = 115	        Predict Failed in CONDITION
SS = 7	CP = 115	        Predict Failed in CONDITION
SS = 9	CP = 115	        Deduce simple_part
SS = 11	CP = 115	          Deduce right_non_terminal_symbol
SS = 12	CP = 115	            Deduce non_terminal_symbol
SS = 12	CP = 115	              Match  id
SS = 12	CP = 115	              Accept id
SS = 12	CP = 116	            Accept non_terminal_symbol
SS = 11	CP = 116	          Accept right_non_terminal_symbol
SS = 9	CP = 116	        Accept simple_part
SS = 7	CP = 116	      Accept part
SS = 7	CP = 116	      Match  ,
SS = 7	CP = 116	      Reject ,
SS = 6	CP = 116	      Predict Failed: part
SS = 5	CP = 116	    Accept term
SS = 5	CP = 116	    Match  |
SS = 5	CP = 116	    Reject |
SS = 4	CP = 116	  Accept declaration
SS = 4	CP = 116	  Deduce end_op
SS = 5	CP = 116	    Match  ;
SS = 5	CP = 116	    Accept ;
SS = 4	CP = 117	  Accept end_op
SS = 3	CP = 117	Accept statement
SS = 3	CP = 117	Deduce statement
SS = 4	CP = 117	  Deduce non_terminal_symbol
SS = 4	CP = 117	    Match  id
SS = 4	CP = 117	    Accept id
SS = 4	CP = 118	  Accept non_terminal_symbol
SS = 4	CP = 118	  Deduce assign_op
SS = 5	CP = 118	    Match  ::=
SS = 5	CP = 118	    Accept ::=
SS = 4	CP = 119	  Accept assign_op
SS = 4	CP = 119	  Deduce declaration
SS = 5	CP = 119	    Deduce term
SS = 6	CP = 119	      Deduce part
SS = 6	CP = 119	        Predict Failed in CONDITION
SS = 6	CP = 119	        Predict Failed in CONDITION
SS = 6	CP = 119	        Predict Failed in CONDITION
SS = 8	CP = 119	        Deduce simple_part
SS = 8	CP = 119	          Predict Failed in CONDITION
SS = 10	CP = 119	          Deduce terminal_symbol
SS = 10	CP = 119	            Predict Failed in CONDITION
SS = 10	CP = 119	            Predict Failed in CONDITION
SS = 11	CP = 119	            Match  token
SS = 11	CP = 119	            Accept token
SS = 10	CP = 120	          Accept terminal_symbol
SS = 8	CP = 120	        Accept simple_part
SS = 6	CP = 120	      Accept part
SS = 7	CP = 120	      Match  ,
SS = 7	CP = 120	      Reject ,
SS = 7	CP = 120	      Deduce part
SS = 7	CP = 120	        Predict Failed in CONDITION
SS = 7	CP = 120	        Predict Failed in CONDITION
SS = 9	CP = 120	        Deduce alternative_part
SS = 9	CP = 120	          Match  [
SS = 9	CP = 120	          Accept [
SS = 10	CP = 121	          Deduce declaration
SS = 11	CP = 121	            Deduce term
SS = 12	CP = 121	              Deduce part
SS = 12	CP = 121	                Predict Failed in CONDITION
SS = 12	CP = 121	                Predict Failed in CONDITION
SS = 12	CP = 121	                Predict Failed in CONDITION
SS = 14	CP = 121	                Deduce simple_part
SS = 14	CP = 121	                  Predict Failed in CONDITION
SS = 16	CP = 121	                  Deduce terminal_symbol
SS = 17	CP = 121	                    Match  slit
SS = 17	CP = 121	                    Accept slit
SS = 16	CP = 122	                  Accept terminal_symbol
SS = 14	CP = 122	                Accept simple_part
SS = 12	CP = 122	              Accept part
SS = 13	CP = 122	              Match  ,
SS = 13	CP = 122	              Reject ,
SS = 13	CP = 122	              Deduce part
SS = 13	CP = 122	                Predict Failed in CONDITION
SS = 15	CP = 122	                Deduce declaration_part
SS = 15	CP = 122	                  Match  (
SS = 15	CP = 122	                  Accept (
SS = 16	CP = 123	                  Deduce declaration
SS = 17	CP = 123	                    Deduce term
SS = 18	CP = 123	                      Deduce part
SS = 18	CP = 123	                        Predict Failed in CONDITION
SS = 18	CP = 123	                        Predict Failed in CONDITION
SS = 18	CP = 123	                        Predict Failed in CONDITION
SS = 20	CP = 123	                        Deduce simple_part
SS = 20	CP = 123	                          Predict Failed in CONDITION
SS = 22	CP = 123	                          Deduce terminal_symbol
SS = 23	CP = 123	                            Match  slit
SS = 23	CP = 123	                            Accept slit
SS = 22	CP = 124	                          Accept terminal_symbol
SS = 20	CP = 124	                        Accept simple_part
SS = 18	CP = 124	                      Accept part
SS = 19	CP = 124	                      Match  ,
SS = 19	CP = 124	                      Reject ,
SS = 18	CP = 124	                      Predict Failed: part
SS = 17	CP = 124	                    Accept term
SS = 17	CP = 124	                    Match  |
SS = 17	CP = 124	                    Accept |
SS = 18	CP = 125	                    Deduce term
SS = 19	CP = 125	                      Deduce part
SS = 19	CP = 125	                        Predict Failed in CONDITION
SS = 19	CP = 125	                        Predict Failed in CONDITION
SS = 19	CP = 125	                        Predict Failed in CONDITION
SS = 21	CP = 125	                        Deduce simple_part
SS = 23	CP = 125	                          Deduce right_non_terminal_symbol
SS = 24	CP = 125	                            Deduce non_terminal_symbol
SS = 24	CP = 125	                              Match  id
SS = 24	CP = 125	                              Accept id
SS = 24	CP = 126	                            Accept non_terminal_symbol
SS = 23	CP = 126	                          Accept right_non_terminal_symbol
SS = 21	CP = 126	                        Accept simple_part
SS = 19	CP = 126	                      Accept part
SS = 20	CP = 126	                      Match  ,
SS = 20	CP = 126	                      Reject ,
SS = 19	CP = 126	                      Predict Failed: part
SS = 18	CP = 126	                    Accept term
SS = 17	CP = 126	                    Match  |
SS = 17	CP = 126	                    Reject |
SS = 16	CP = 126	                  Accept declaration
SS = 15	CP = 126	                  Match  )
SS = 15	CP = 126	                  Accept )
SS = 15	CP = 127	                Accept declaration_part
SS = 13	CP = 127	              Accept part
SS = 13	CP = 127	              Match  ,
SS = 13	CP = 127	              Reject ,
SS = 12	CP = 127	              Predict Failed: part
SS = 11	CP = 127	            Accept term
SS = 11	CP = 127	            Match  |
SS = 11	CP = 127	            Reject |
SS = 10	CP = 127	          Accept declaration
SS = 9	CP = 127	          Match  ]
SS = 9	CP = 127	          Accept ]
SS = 9	CP = 128	        Accept alternative_part
SS = 7	CP = 128	      Accept part
SS = 7	CP = 128	      Match  ,
SS = 7	CP = 128	      Reject ,
SS = 6	CP = 128	      Predict Failed: part
SS = 5	CP = 128	    Accept term
SS = 5	CP = 128	    Match  |
SS = 5	CP = 128	    Reject |
SS = 4	CP = 128	  Accept declaration
SS = 4	CP = 128	  Deduce end_op
SS = 5	CP = 128	    Match  ;
SS = 5	CP = 128	    Accept ;
SS = 4	CP = 129	  Accept end_op
SS = 3	CP = 129	Accept statement
SS = 3	CP = 129	Deduce statement
SS = 4	CP = 129	  Deduce non_terminal_symbol
SS = 4	CP = 129	    Match  id
SS = 4	CP = 129	    Accept id
SS = 4	CP = 130	  Accept non_terminal_symbol
SS = 4	CP = 130	  Deduce assign_op
SS = 5	CP = 130	    Match  ::=
SS = 5	CP = 130	    Accept ::=
SS = 4	CP = 131	  Accept assign_op
SS = 4	CP = 131	  Deduce declaration
SS = 5	CP = 131	    Deduce term
SS = 6	CP = 131	      Deduce part
SS = 6	CP = 131	        Predict Failed in CONDITION
SS = 6	CP = 131	        Predict Failed in CONDITION
SS = 6	CP = 131	        Predict Failed in CONDITION
SS = 8	CP = 131	        Deduce simple_part
SS = 10	CP = 131	          Deduce right_non_terminal_symbol
SS = 11	CP = 131	            Deduce non_terminal_symbol
SS = 11	CP = 131	              Match  id
SS = 11	CP = 131	              Accept id
SS = 11	CP = 132	            Accept non_terminal_symbol
SS = 10	CP = 132	          Accept right_non_terminal_symbol
SS = 8	CP = 132	        Accept simple_part
SS = 6	CP = 132	      Accept part
SS = 7	CP = 132	      Match  ,
SS = 7	CP = 132	      Reject ,
SS = 7	CP = 132	      Deduce part
SS = 7	CP = 132	        Predict Failed in CONDITION
SS = 7	CP = 132	        Predict Failed in CONDITION
SS = 9	CP = 132	        Deduce alternative_part
SS = 9	CP = 132	          Match  [
SS = 9	CP = 132	          Accept [
SS = 10	CP = 133	          Deduce declaration
SS = 11	CP = 133	            Deduce term
SS = 12	CP = 133	              Deduce part
SS = 12	CP = 133	                Predict Failed in CONDITION
SS = 12	CP = 133	                Predict Failed in CONDITION
SS = 12	CP = 133	                Predict Failed in CONDITION
SS = 14	CP = 133	                Deduce simple_part
SS = 14	CP = 133	                  Predict Failed in CONDITION
SS = 16	CP = 133	                  Deduce terminal_symbol
SS = 17	CP = 133	                    Match  slit
SS = 17	CP = 133	                    Accept slit
SS = 16	CP = 134	                  Accept terminal_symbol
SS = 14	CP = 134	                Accept simple_part
SS = 12	CP = 134	              Accept part
SS = 13	CP = 134	              Match  ,
SS = 13	CP = 134	              Reject ,
SS = 13	CP = 134	              Deduce part
SS = 13	CP = 134	                Predict Failed in CONDITION
SS = 13	CP = 134	                Predict Failed in CONDITION
SS = 13	CP = 134	                Predict Failed in CONDITION
SS = 15	CP = 134	                Deduce simple_part
SS = 15	CP = 134	                  Predict Failed in CONDITION
SS = 17	CP = 134	                  Deduce terminal_symbol
SS = 17	CP = 134	                    Predict Failed in CONDITION
SS = 17	CP = 134	                    Predict Failed in CONDITION
SS = 18	CP = 134	                    Match  token
SS = 18	CP = 134	                    Accept token
SS = 17	CP = 135	                  Accept terminal_symbol
SS = 15	CP = 135	                Accept simple_part
SS = 13	CP = 135	              Accept part
SS = 13	CP = 135	              Match  ,
SS = 13	CP = 135	              Reject ,
SS = 12	CP = 135	              Predict Failed: part
SS = 11	CP = 135	            Accept term
SS = 11	CP = 135	            Match  |
SS = 11	CP = 135	            Reject |
SS = 10	CP = 135	          Accept declaration
SS = 9	CP = 135	          Match  ]
SS = 9	CP = 135	          Accept ]
SS = 9	CP = 136	        Accept alternative_part
SS = 7	CP = 136	      Accept part
SS = 7	CP = 136	      Match  ,
SS = 7	CP = 136	      Reject ,
SS = 7	CP = 136	      Deduce part
SS = 7	CP = 136	        Predict Failed in CONDITION
SS = 7	CP = 136	        Predict Failed in CONDITION
SS = 9	CP = 136	        Deduce alternative_part
SS = 9	CP = 136	          Match  [
SS = 9	CP = 136	          Accept [
SS = 10	CP = 137	          Deduce declaration
SS = 11	CP = 137	            Deduce term
SS = 12	CP = 137	              Deduce part
SS = 12	CP = 137	                Predict Failed in CONDITION
SS = 12	CP = 137	                Predict Failed in CONDITION
SS = 12	CP = 137	                Predict Failed in CONDITION
SS = 14	CP = 137	                Deduce simple_part
SS = 14	CP = 137	                  Predict Failed in CONDITION
SS = 16	CP = 137	                  Deduce terminal_symbol
SS = 17	CP = 137	                    Match  slit
SS = 17	CP = 137	                    Accept slit
SS = 16	CP = 138	                  Accept terminal_symbol
SS = 14	CP = 138	                Accept simple_part
SS = 12	CP = 138	              Accept part
SS = 13	CP = 138	              Match  ,
SS = 13	CP = 138	              Reject ,
SS = 13	CP = 138	              Deduce part
SS = 13	CP = 138	                Predict Failed in CONDITION
SS = 13	CP = 138	                Predict Failed in CONDITION
SS = 13	CP = 138	                Predict Failed in CONDITION
SS = 15	CP = 138	                Deduce simple_part
SS = 17	CP = 138	                  Deduce right_non_terminal_symbol
SS = 18	CP = 138	                    Deduce non_terminal_symbol
SS = 18	CP = 138	                      Match  id
SS = 18	CP = 138	                      Accept id
SS = 18	CP = 139	                    Accept non_terminal_symbol
SS = 17	CP = 139	                  Accept right_non_terminal_symbol
SS = 15	CP = 139	                Accept simple_part
SS = 13	CP = 139	              Accept part
SS = 13	CP = 139	              Match  ,
SS = 13	CP = 139	              Reject ,
SS = 12	CP = 139	              Predict Failed: part
SS = 11	CP = 139	            Accept term
SS = 11	CP = 139	            Match  |
SS = 11	CP = 139	            Reject |
SS = 10	CP = 139	          Accept declaration
SS = 9	CP = 139	          Match  ]
SS = 9	CP = 139	          Accept ]
SS = 9	CP = 140	        Accept alternative_part
SS = 7	CP = 140	      Accept part
SS = 7	CP = 140	      Match  ,
SS = 7	CP = 140	      Reject ,
SS = 6	CP = 140	      Predict Failed: part
SS = 5	CP = 140	    Accept term
SS = 5	CP = 140	    Match  |
SS = 5	CP = 140	    Reject |
SS = 4	CP = 140	  Accept declaration
SS = 4	CP = 140	  Deduce end_op
SS = 5	CP = 140	    Match  ;
SS = 5	CP = 140	    Accept ;
SS = 4	CP = 141	  Accept end_op
SS = 3	CP = 141	Accept statement
SS = 3	CP = 141	Deduce statement
SS = 4	CP = 141	  Deduce non_terminal_symbol
SS = 4	CP = 141	    Match  id
SS = 4	CP = 141	    Accept id
SS = 4	CP = 142	  Accept non_terminal_symbol
SS = 4	CP = 142	  Deduce assign_op
SS = 5	CP = 142	    Match  ::=
SS = 5	CP = 142	    Accept ::=
SS = 4	CP = 143	  Accept assign_op
SS = 4	CP = 143	  Deduce declaration
SS = 5	CP = 143	    Deduce term
SS = 6	CP = 143	      Deduce part
SS = 6	CP = 143	        Predict Failed in CONDITION
SS = 6	CP = 143	        Predict Failed in CONDITION
SS = 6	CP = 143	        Predict Failed in CONDITION
SS = 8	CP = 143	        Deduce simple_part
SS = 10	CP = 143	          Deduce right_non_terminal_symbol
SS = 11	CP = 143	            Deduce non_terminal_symbol
SS = 11	CP = 143	              Match  id
SS = 11	CP = 143	              Accept id
SS = 11	CP = 144	            Accept non_terminal_symbol
SS = 10	CP = 144	          Accept right_non_terminal_symbol
SS = 8	CP = 144	        Accept simple_part
SS = 6	CP = 144	      Accept part
SS = 7	CP = 144	      Match  ,
SS = 7	CP = 144	      Reject ,
SS = 7	CP = 144	      Deduce part
SS = 7	CP = 144	        Predict Failed in CONDITION
SS = 7	CP = 144	        Predict Failed in CONDITION
SS = 7	CP = 144	        Predict Failed in CONDITION
SS = 9	CP = 144	        Deduce simple_part
SS = 9	CP = 144	          Predict Failed in CONDITION
SS = 11	CP = 144	          Deduce terminal_symbol
SS = 12	CP = 144	            Match  slit
SS = 12	CP = 144	            Accept slit
SS = 11	CP = 145	          Accept terminal_symbol
SS = 9	CP = 145	        Accept simple_part
SS = 7	CP = 145	      Accept part
SS = 7	CP = 145	      Match  ,
SS = 7	CP = 145	      Reject ,
SS = 7	CP = 145	      Deduce part
SS = 7	CP = 145	        Predict Failed in CONDITION
SS = 7	CP = 145	        Predict Failed in CONDITION
SS = 7	CP = 145	        Predict Failed in CONDITION
SS = 9	CP = 145	        Deduce simple_part
SS = 11	CP = 145	          Deduce right_non_terminal_symbol
SS = 12	CP = 145	            Deduce non_terminal_symbol
SS = 12	CP = 145	              Match  id
SS = 12	CP = 145	              Accept id
SS = 12	CP = 146	            Accept non_terminal_symbol
SS = 11	CP = 146	          Accept right_non_terminal_symbol
SS = 9	CP = 146	        Accept simple_part
SS = 7	CP = 146	      Accept part
SS = 7	CP = 146	      Match  ,
SS = 7	CP = 146	      Reject ,
SS = 6	CP = 146	      Predict Failed: part
SS = 5	CP = 146	    Accept term
SS = 5	CP = 146	    Match  |
SS = 5	CP = 146	    Accept |
SS = 6	CP = 147	    Deduce term
SS = 7	CP = 147	      Deduce part
SS = 7	CP = 147	        Predict Failed in CONDITION
SS = 7	CP = 147	        Predict Failed in CONDITION
SS = 7	CP = 147	        Predict Failed in CONDITION
SS = 9	CP = 147	        Deduce simple_part
SS = 11	CP = 147	          Deduce right_non_terminal_symbol
SS = 12	CP = 147	            Deduce non_terminal_symbol
SS = 12	CP = 147	              Match  id
SS = 12	CP = 147	              Accept id
SS = 12	CP = 148	            Accept non_terminal_symbol
SS = 11	CP = 148	          Accept right_non_terminal_symbol
SS = 9	CP = 148	        Accept simple_part
SS = 7	CP = 148	      Accept part
SS = 8	CP = 148	      Match  ,
SS = 8	CP = 148	      Reject ,
SS = 7	CP = 148	      Predict Failed: part
SS = 6	CP = 148	    Accept term
SS = 5	CP = 148	    Match  |
SS = 5	CP = 148	    Reject |
SS = 4	CP = 148	  Accept declaration
SS = 4	CP = 148	  Deduce end_op
SS = 5	CP = 148	    Match  ;
SS = 5	CP = 148	    Accept ;
SS = 4	CP = 149	  Accept end_op
SS = 3	CP = 149	Accept statement
SS = 3	CP = 149	Deduce statement
SS = 4	CP = 149	  Deduce non_terminal_symbol
SS = 4	CP = 149	    Match  id
SS = 4	CP = 149	    Accept id
SS = 4	CP = 150	  Accept non_terminal_symbol
SS = 4	CP = 150	  Deduce assign_op
SS = 5	CP = 150	    Match  ::=
SS = 5	CP = 150	    Accept ::=
SS = 4	CP = 151	  Accept assign_op
SS = 4	CP = 151	  Deduce declaration
SS = 5	CP = 151	    Deduce term
SS = 6	CP = 151	      Deduce part
SS = 6	CP = 151	        Predict Failed in CONDITION
SS = 8	CP = 151	        Deduce declaration_part
SS = 8	CP = 151	          Match  (
SS = 8	CP = 151	          Accept (
SS = 9	CP = 152	          Deduce declaration
SS = 10	CP = 152	            Deduce term
SS = 11	CP = 152	              Deduce part
SS = 11	CP = 152	                Predict Failed in CONDITION
SS = 11	CP = 152	                Predict Failed in CONDITION
SS = 11	CP = 152	                Predict Failed in CONDITION
SS = 13	CP = 152	                Deduce simple_part
SS = 13	CP = 152	                  Predict Failed in CONDITION
SS = 15	CP = 152	                  Deduce terminal_symbol
SS = 16	CP = 152	                    Match  slit
SS = 16	CP = 152	                    Accept slit
SS = 15	CP = 153	                  Accept terminal_symbol
SS = 13	CP = 153	                Accept simple_part
SS = 11	CP = 153	              Accept part
SS = 12	CP = 153	              Match  ,
SS = 12	CP = 153	              Reject ,
SS = 11	CP = 153	              Predict Failed: part
SS = 10	CP = 153	            Accept term
SS = 10	CP = 153	            Match  |
SS = 10	CP = 153	            Accept |
SS = 11	CP = 154	            Deduce term
SS = 12	CP = 154	              Deduce part
SS = 12	CP = 154	                Predict Failed in CONDITION
SS = 12	CP = 154	                Predict Failed in CONDITION
SS = 12	CP = 154	                Predict Failed in CONDITION
SS = 14	CP = 154	                Deduce simple_part
SS = 14	CP = 154	                  Predict Failed in CONDITION
SS = 16	CP = 154	                  Deduce terminal_symbol
SS = 17	CP = 154	                    Match  slit
SS = 17	CP = 154	                    Accept slit
SS = 16	CP = 155	                  Accept terminal_symbol
SS = 14	CP = 155	                Accept simple_part
SS = 12	CP = 155	              Accept part
SS = 13	CP = 155	              Match  ,
SS = 13	CP = 155	              Reject ,
SS = 12	CP = 155	              Predict Failed: part
SS = 11	CP = 155	            Accept term
SS = 10	CP = 155	            Match  |
SS = 10	CP = 155	            Accept |
SS = 11	CP = 156	            Deduce term
SS = 12	CP = 156	              Deduce part
SS = 12	CP = 156	                Predict Failed in CONDITION
SS = 12	CP = 156	                Predict Failed in CONDITION
SS = 12	CP = 156	                Predict Failed in CONDITION
SS = 14	CP = 156	                Deduce simple_part
SS = 14	CP = 156	                  Predict Failed in CONDITION
SS = 16	CP = 156	                  Deduce terminal_symbol
SS = 17	CP = 156	                    Match  slit
SS = 17	CP = 156	                    Accept slit
SS = 16	CP = 157	                  Accept terminal_symbol
SS = 14	CP = 157	                Accept simple_part
SS = 12	CP = 157	              Accept part
SS = 13	CP = 157	              Match  ,
SS = 13	CP = 157	              Reject ,
SS = 12	CP = 157	              Predict Failed: part
SS = 11	CP = 157	            Accept term
SS = 10	CP = 157	            Match  |
SS = 10	CP = 157	            Reject |
SS = 9	CP = 157	          Accept declaration
SS = 8	CP = 157	          Match  )
SS = 8	CP = 157	          Accept )
SS = 8	CP = 158	        Accept declaration_part
SS = 6	CP = 158	      Accept part
SS = 7	CP = 158	      Match  ,
SS = 7	CP = 158	      Reject ,
SS = 7	CP = 158	      Deduce part
SS = 7	CP = 158	        Predict Failed in CONDITION
SS = 7	CP = 158	        Predict Failed in CONDITION
SS = 7	CP = 158	        Predict Failed in CONDITION
SS = 9	CP = 158	        Deduce simple_part
SS = 11	CP = 158	          Deduce right_non_terminal_symbol
SS = 12	CP = 158	            Deduce non_terminal_symbol
SS = 12	CP = 158	              Match  id
SS = 12	CP = 158	              Accept id
SS = 12	CP = 159	            Accept non_terminal_symbol
SS = 11	CP = 159	          Accept right_non_terminal_symbol
SS = 9	CP = 159	        Accept simple_part
SS = 7	CP = 159	      Accept part
SS = 7	CP = 159	      Match  ,
SS = 7	CP = 159	      Reject ,
SS = 7	CP = 159	      Deduce part
SS = 7	CP = 159	        Predict Failed in CONDITION
SS = 7	CP = 159	        Predict Failed in CONDITION
SS = 7	CP = 159	        Predict Failed in CONDITION
SS = 9	CP = 159	        Deduce simple_part
SS = 11	CP = 159	          Deduce right_non_terminal_symbol
SS = 12	CP = 159	            Deduce non_terminal_symbol
SS = 12	CP = 159	              Match  id
SS = 12	CP = 159	              Accept id
SS = 12	CP = 160	            Accept non_terminal_symbol
SS = 11	CP = 160	          Accept right_non_terminal_symbol
SS = 9	CP = 160	        Accept simple_part
SS = 7	CP = 160	      Accept part
SS = 7	CP = 160	      Match  ,
SS = 7	CP = 160	      Reject ,
SS = 6	CP = 160	      Predict Failed: part
SS = 5	CP = 160	    Accept term
SS = 5	CP = 160	    Match  |
SS = 5	CP = 160	    Reject |
SS = 4	CP = 160	  Accept declaration
SS = 4	CP = 160	  Deduce end_op
SS = 5	CP = 160	    Match  ;
SS = 5	CP = 160	    Accept ;
SS = 4	CP = 161	  Accept end_op
SS = 3	CP = 161	Accept statement
SS = 3	CP = 161	Deduce statement
SS = 4	CP = 161	  Deduce non_terminal_symbol
SS = 4	CP = 161	    Match  id
SS = 4	CP = 161	    Accept id
SS = 4	CP = 162	  Accept non_terminal_symbol
SS = 4	CP = 162	  Deduce assign_op
SS = 5	CP = 162	    Match  ::=
SS = 5	CP = 162	    Accept ::=
SS = 4	CP = 163	  Accept assign_op
SS = 4	CP = 163	  Deduce declaration
SS = 5	CP = 163	    Deduce term
SS = 6	CP = 163	      Deduce part
SS = 6	CP = 163	        Predict Failed in CONDITION
SS = 6	CP = 163	        Predict Failed in CONDITION
SS = 6	CP = 163	        Predict Failed in CONDITION
SS = 8	CP = 163	        Deduce simple_part
SS = 8	CP = 163	          Predict Failed in CONDITION
SS = 10	CP = 163	          Deduce terminal_symbol
SS = 11	CP = 163	            Match  slit
SS = 11	CP = 163	            Accept slit
SS = 10	CP = 164	          Accept terminal_symbol
SS = 8	CP = 164	        Accept simple_part
SS = 6	CP = 164	      Accept part
SS = 7	CP = 164	      Match  ,
SS = 7	CP = 164	      Reject ,
SS = 7	CP = 164	      Deduce part
SS = 7	CP = 164	        Predict Failed in CONDITION
SS = 7	CP = 164	        Predict Failed in CONDITION
SS = 7	CP = 164	        Predict Failed in CONDITION
SS = 9	CP = 164	        Deduce simple_part
SS = 11	CP = 164	          Deduce right_non_terminal_symbol
SS = 12	CP = 164	            Deduce non_terminal_symbol
SS = 12	CP = 164	              Match  id
SS = 12	CP = 164	              Accept id
SS = 12	CP = 165	            Accept non_terminal_symbol
SS = 11	CP = 165	          Accept right_non_terminal_symbol
SS = 9	CP = 165	        Accept simple_part
SS = 7	CP = 165	      Accept part
SS = 7	CP = 165	      Match  ,
SS = 7	CP = 165	      Reject ,
SS = 7	CP = 165	      Deduce part
SS = 9	CP = 165	        Deduce repeat_part
SS = 9	CP = 165	          Match  {
SS = 9	CP = 165	          Accept {
SS = 10	CP = 166	          Deduce declaration
SS = 11	CP = 166	            Deduce term
SS = 12	CP = 166	              Deduce part
SS = 12	CP = 166	                Predict Failed in CONDITION
SS = 12	CP = 166	                Predict Failed in CONDITION
SS = 12	CP = 166	                Predict Failed in CONDITION
SS = 14	CP = 166	                Deduce simple_part
SS = 14	CP = 166	                  Predict Failed in CONDITION
SS = 16	CP = 166	                  Deduce terminal_symbol
SS = 17	CP = 166	                    Match  slit
SS = 17	CP = 166	                    Accept slit
SS = 16	CP = 167	                  Accept terminal_symbol
SS = 14	CP = 167	                Accept simple_part
SS = 12	CP = 167	              Accept part
SS = 13	CP = 167	              Match  ,
SS = 13	CP = 167	              Reject ,
SS = 13	CP = 167	              Deduce part
SS = 13	CP = 167	                Predict Failed in CONDITION
SS = 13	CP = 167	                Predict Failed in CONDITION
SS = 13	CP = 167	                Predict Failed in CONDITION
SS = 15	CP = 167	                Deduce simple_part
SS = 17	CP = 167	                  Deduce right_non_terminal_symbol
SS = 18	CP = 167	                    Deduce non_terminal_symbol
SS = 18	CP = 167	                      Match  id
SS = 18	CP = 167	                      Accept id
SS = 18	CP = 168	                    Accept non_terminal_symbol
SS = 17	CP = 168	                  Accept right_non_terminal_symbol
SS = 15	CP = 168	                Accept simple_part
SS = 13	CP = 168	              Accept part
SS = 13	CP = 168	              Match  ,
SS = 13	CP = 168	              Reject ,
SS = 12	CP = 168	              Predict Failed: part
SS = 11	CP = 168	            Accept term
SS = 11	CP = 168	            Match  |
SS = 11	CP = 168	            Reject |
SS = 10	CP = 168	          Accept declaration
SS = 9	CP = 168	          Match  }
SS = 9	CP = 168	          Accept }
SS = 9	CP = 169	        Accept repeat_part
SS = 7	CP = 169	      Accept part
SS = 7	CP = 169	      Match  ,
SS = 7	CP = 169	      Reject ,
SS = 7	CP = 169	      Deduce part
SS = 7	CP = 169	        Predict Failed in CONDITION
SS = 7	CP = 169	        Predict Failed in CONDITION
SS = 7	CP = 169	        Predict Failed in CONDITION
SS = 9	CP = 169	        Deduce simple_part
SS = 9	CP = 169	          Predict Failed in CONDITION
SS = 11	CP = 169	          Deduce terminal_symbol
SS = 12	CP = 169	            Match  slit
SS = 12	CP = 169	            Accept slit
SS = 11	CP = 170	          Accept terminal_symbol
SS = 9	CP = 170	        Accept simple_part
SS = 7	CP = 170	      Accept part
SS = 7	CP = 170	      Match  ,
SS = 7	CP = 170	      Reject ,
SS = 6	CP = 170	      Predict Failed: part
SS = 5	CP = 170	    Accept term
SS = 5	CP = 170	    Match  |
SS = 5	CP = 170	    Reject |
SS = 4	CP = 170	  Accept declaration
SS = 4	CP = 170	  Deduce end_op
SS = 5	CP = 170	    Match  ;
SS = 5	CP = 170	    Accept ;
SS = 4	CP = 171	  Accept end_op
SS = 3	CP = 171	Accept statement
SS = 3	CP = 171	Deduce statement
SS = 4	CP = 171	  Deduce non_terminal_symbol
SS = 4	CP = 171	    Match  id
SS = 4	CP = 171	    Accept id
SS = 4	CP = 172	  Accept non_terminal_symbol
SS = 4	CP = 172	  Deduce assign_op
SS = 5	CP = 172	    Match  ::=
SS = 5	CP = 172	    Accept ::=
SS = 4	CP = 173	  Accept assign_op
SS = 4	CP = 173	  Deduce declaration
SS = 5	CP = 173	    Deduce term
SS = 6	CP = 173	      Deduce part
SS = 6	CP = 173	        Predict Failed in CONDITION
SS = 6	CP = 173	        Predict Failed in CONDITION
SS = 6	CP = 173	        Predict Failed in CONDITION
SS = 8	CP = 173	        Deduce simple_part
SS = 8	CP = 173	          Predict Failed in CONDITION
SS = 10	CP = 173	          Deduce terminal_symbol
SS = 10	CP = 173	            Predict Failed in CONDITION
SS = 10	CP = 173	            Predict Failed in CONDITION
SS = 11	CP = 173	            Match  token
SS = 11	CP = 173	            Accept token
SS = 10	CP = 174	          Accept terminal_symbol
SS = 8	CP = 174	        Accept simple_part
SS = 6	CP = 174	      Accept part
SS = 7	CP = 174	      Match  ,
SS = 7	CP = 174	      Reject ,
SS = 6	CP = 174	      Predict Failed: part
SS = 5	CP = 174	    Accept term
SS = 5	CP = 174	    Match  |
SS = 5	CP = 174	    Accept |
SS = 6	CP = 175	    Deduce term
SS = 7	CP = 175	      Deduce part
SS = 7	CP = 175	        Predict Failed in CONDITION
SS = 7	CP = 175	        Predict Failed in CONDITION
SS = 7	CP = 175	        Predict Failed in CONDITION
SS = 9	CP = 175	        Deduce simple_part
SS = 9	CP = 175	          Predict Failed in CONDITION
SS = 11	CP = 175	          Deduce terminal_symbol
SS = 12	CP = 175	            Match  slit
SS = 12	CP = 175	            Accept slit
SS = 11	CP = 176	          Accept terminal_symbol
SS = 9	CP = 176	        Accept simple_part
SS = 7	CP = 176	      Accept part
SS = 8	CP = 176	      Match  ,
SS = 8	CP = 176	      Reject ,
SS = 7	CP = 176	      Predict Failed: part
SS = 6	CP = 176	    Accept term
SS = 5	CP = 176	    Match  |
SS = 5	CP = 176	    Accept |
SS = 6	CP = 177	    Deduce term
SS = 7	CP = 177	      Deduce part
SS = 7	CP = 177	        Predict Failed in CONDITION
SS = 7	CP = 177	        Predict Failed in CONDITION
SS = 7	CP = 177	        Predict Failed in CONDITION
SS = 9	CP = 177	        Deduce simple_part
SS = 11	CP = 177	          Deduce right_non_terminal_symbol
SS = 12	CP = 177	            Deduce non_terminal_symbol
SS = 12	CP = 177	              Match  id
SS = 12	CP = 177	              Accept id
SS = 12	CP = 178	            Accept non_terminal_symbol
SS = 11	CP = 178	          Accept right_non_terminal_symbol
SS = 9	CP = 178	        Accept simple_part
SS = 7	CP = 178	      Accept part
SS = 8	CP = 178	      Match  ,
SS = 8	CP = 178	      Reject ,
SS = 7	CP = 178	      Predict Failed: part
SS = 6	CP = 178	    Accept term
SS = 5	CP = 178	    Match  |
SS = 5	CP = 178	    Reject |
SS = 4	CP = 178	  Accept declaration
SS = 4	CP = 178	  Deduce end_op
SS = 5	CP = 178	    Match  ;
SS = 5	CP = 178	    Accept ;
SS = 4	CP = 179	  Accept end_op
SS = 3	CP = 179	Accept statement
SS = 3	CP = 179	Deduce statement
SS = 4	CP = 179	  Deduce non_terminal_symbol
SS = 4	CP = 179	    Match  id
SS = 4	CP = 179	    Accept id
SS = 4	CP = 180	  Accept non_terminal_symbol
SS = 4	CP = 180	  Deduce assign_op
SS = 5	CP = 180	    Match  ::=
SS = 5	CP = 180	    Accept ::=
SS = 4	CP = 181	  Accept assign_op
SS = 4	CP = 181	  Deduce declaration
SS = 5	CP = 181	    Deduce term
SS = 6	CP = 181	      Deduce part
SS = 6	CP = 181	        Predict Failed in CONDITION
SS = 6	CP = 181	        Predict Failed in CONDITION
SS = 6	CP = 181	        Predict Failed in CONDITION
SS = 8	CP = 181	        Deduce simple_part
SS = 8	CP = 181	          Predict Failed in CONDITION
SS = 10	CP = 181	          Deduce terminal_symbol
SS = 10	CP = 181	            Predict Failed in CONDITION
SS = 10	CP = 181	            Predict Failed in CONDITION
SS = 11	CP = 181	            Match  token
SS = 11	CP = 181	            Accept token
SS = 10	CP = 182	          Accept terminal_symbol
SS = 8	CP = 182	        Accept simple_part
SS = 6	CP = 182	      Accept part
SS = 7	CP = 182	      Match  ,
SS = 7	CP = 182	      Reject ,
SS = 7	CP = 182	      Deduce part
SS = 7	CP = 182	        Predict Failed in CONDITION
SS = 7	CP = 182	        Predict Failed in CONDITION
SS = 7	CP = 182	        Predict Failed in CONDITION
SS = 9	CP = 182	        Deduce simple_part
SS = 9	CP = 182	          Predict Failed in CONDITION
SS = 11	CP = 182	          Deduce terminal_symbol
SS = 12	CP = 182	            Match  slit
SS = 12	CP = 182	            Accept slit
SS = 11	CP = 183	          Accept terminal_symbol
SS = 9	CP = 183	        Accept simple_part
SS = 7	CP = 183	      Accept part
SS = 7	CP = 183	      Match  ,
SS = 7	CP = 183	      Reject ,
SS = 7	CP = 183	      Deduce part
SS = 7	CP = 183	        Predict Failed in CONDITION
SS = 7	CP = 183	        Predict Failed in CONDITION
SS = 7	CP = 183	        Predict Failed in CONDITION
SS = 9	CP = 183	        Deduce simple_part
SS = 11	CP = 183	          Deduce right_non_terminal_symbol
SS = 12	CP = 183	            Deduce non_terminal_symbol
SS = 12	CP = 183	              Match  id
SS = 12	CP = 183	              Accept id
SS = 12	CP = 184	            Accept non_terminal_symbol
SS = 11	CP = 184	          Accept right_non_terminal_symbol
SS = 9	CP = 184	        Accept simple_part
SS = 7	CP = 184	      Accept part
SS = 7	CP = 184	      Match  ,
SS = 7	CP = 184	      Reject ,
SS = 7	CP = 184	      Deduce part
SS = 7	CP = 184	        Predict Failed in CONDITION
SS = 7	CP = 184	        Predict Failed in CONDITION
SS = 9	CP = 184	        Deduce alternative_part
SS = 9	CP = 184	          Match  [
SS = 9	CP = 184	          Accept [
SS = 10	CP = 185	          Deduce declaration
SS = 11	CP = 185	            Deduce term
SS = 12	CP = 185	              Deduce part
SS = 12	CP = 185	                Predict Failed in CONDITION
SS = 12	CP = 185	                Predict Failed in CONDITION
SS = 12	CP = 185	                Predict Failed in CONDITION
SS = 14	CP = 185	                Deduce simple_part
SS = 14	CP = 185	                  Predict Failed in CONDITION
SS = 16	CP = 185	                  Deduce terminal_symbol
SS = 17	CP = 185	                    Match  slit
SS = 17	CP = 185	                    Accept slit
SS = 16	CP = 186	                  Accept terminal_symbol
SS = 14	CP = 186	                Accept simple_part
SS = 12	CP = 186	              Accept part
SS = 13	CP = 186	              Match  ,
SS = 13	CP = 186	              Reject ,
SS = 13	CP = 186	              Deduce part
SS = 13	CP = 186	                Predict Failed in CONDITION
SS = 13	CP = 186	                Predict Failed in CONDITION
SS = 13	CP = 186	                Predict Failed in CONDITION
SS = 15	CP = 186	                Deduce simple_part
SS = 17	CP = 186	                  Deduce right_non_terminal_symbol
SS = 18	CP = 186	                    Deduce non_terminal_symbol
SS = 18	CP = 186	                      Match  id
SS = 18	CP = 186	                      Accept id
SS = 18	CP = 187	                    Accept non_terminal_symbol
SS = 17	CP = 187	                  Accept right_non_terminal_symbol
SS = 15	CP = 187	                Accept simple_part
SS = 13	CP = 187	              Accept part
SS = 13	CP = 187	              Match  ,
SS = 13	CP = 187	              Reject ,
SS = 12	CP = 187	              Predict Failed: part
SS = 11	CP = 187	            Accept term
SS = 11	CP = 187	            Match  |
SS = 11	CP = 187	            Reject |
SS = 10	CP = 187	          Accept declaration
SS = 9	CP = 187	          Match  ]
SS = 9	CP = 187	          Accept ]
SS = 9	CP = 188	        Accept alternative_part
SS = 7	CP = 188	      Accept part
SS = 7	CP = 188	      Match  ,
SS = 7	CP = 188	      Reject ,
SS = 6	CP = 188	      Predict Failed: part
SS = 5	CP = 188	    Accept term
SS = 5	CP = 188	    Match  |
SS = 5	CP = 188	    Reject |
SS = 4	CP = 188	  Accept declaration
SS = 4	CP = 188	  Deduce end_op
SS = 5	CP = 188	    Match  ;
SS = 5	CP = 188	    Accept ;
SS = 4	CP = 189	  Accept end_op
SS = 3	CP = 189	Accept statement
SS = 3	CP = 189	Deduce statement
SS = 4	CP = 189	  Deduce non_terminal_symbol
SS = 4	CP = 189	    Match  id
SS = 4	CP = 189	    Accept id
SS = 4	CP = 190	  Accept non_terminal_symbol
SS = 4	CP = 190	  Deduce assign_op
SS = 5	CP = 190	    Match  ::=
SS = 5	CP = 190	    Accept ::=
SS = 4	CP = 191	  Accept assign_op
SS = 4	CP = 191	  Deduce declaration
SS = 5	CP = 191	    Deduce term
SS = 6	CP = 191	      Deduce part
SS = 6	CP = 191	        Predict Failed in CONDITION
SS = 6	CP = 191	        Predict Failed in CONDITION
SS = 6	CP = 191	        Predict Failed in CONDITION
SS = 8	CP = 191	        Deduce simple_part
SS = 8	CP = 191	          Predict Failed in CONDITION
SS = 10	CP = 191	          Deduce terminal_symbol
SS = 11	CP = 191	            Match  slit
SS = 11	CP = 191	            Accept slit
SS = 10	CP = 192	          Accept terminal_symbol
SS = 8	CP = 192	        Accept simple_part
SS = 6	CP = 192	      Accept part
SS = 7	CP = 192	      Match  ,
SS = 7	CP = 192	      Reject ,
SS = 7	CP = 192	      Deduce part
SS = 7	CP = 192	        Predict Failed in CONDITION
SS = 7	CP = 192	        Predict Failed in CONDITION
SS = 7	CP = 192	        Predict Failed in CONDITION
SS = 9	CP = 192	        Deduce simple_part
SS = 9	CP = 192	          Predict Failed in CONDITION
SS = 11	CP = 192	          Deduce terminal_symbol
SS = 11	CP = 192	            Predict Failed in CONDITION
SS = 11	CP = 192	            Predict Failed in CONDITION
SS = 12	CP = 192	            Match  token
SS = 12	CP = 192	            Accept token
SS = 11	CP = 193	          Accept terminal_symbol
SS = 9	CP = 193	        Accept simple_part
SS = 7	CP = 193	      Accept part
SS = 7	CP = 193	      Match  ,
SS = 7	CP = 193	      Reject ,
SS = 7	CP = 193	      Deduce part
SS = 7	CP = 193	        Predict Failed in CONDITION
SS = 7	CP = 193	        Predict Failed in CONDITION
SS = 7	CP = 193	        Predict Failed in CONDITION
SS = 9	CP = 193	        Deduce simple_part
SS = 11	CP = 193	          Deduce right_non_terminal_symbol
SS = 12	CP = 193	            Deduce non_terminal_symbol
SS = 12	CP = 193	              Match  id
SS = 12	CP = 193	              Accept id
SS = 12	CP = 194	            Accept non_terminal_symbol
SS = 11	CP = 194	          Accept right_non_terminal_symbol
SS = 9	CP = 194	        Accept simple_part
SS = 7	CP = 194	      Accept part
SS = 7	CP = 194	      Match  ,
SS = 7	CP = 194	      Reject ,
SS = 7	CP = 194	      Deduce part
SS = 7	CP = 194	        Predict Failed in CONDITION
SS = 7	CP = 194	        Predict Failed in CONDITION
SS = 7	CP = 194	        Predict Failed in CONDITION
SS = 9	CP = 194	        Deduce simple_part
SS = 9	CP = 194	          Predict Failed in CONDITION
SS = 11	CP = 194	          Deduce terminal_symbol
SS = 12	CP = 194	            Match  slit
SS = 12	CP = 194	            Accept slit
SS = 11	CP = 195	          Accept terminal_symbol
SS = 9	CP = 195	        Accept simple_part
SS = 7	CP = 195	      Accept part
SS = 7	CP = 195	      Match  ,
SS = 7	CP = 195	      Reject ,
SS = 7	CP = 195	      Deduce part
SS = 7	CP = 195	        Predict Failed in CONDITION
SS = 7	CP = 195	        Predict Failed in CONDITION
SS = 7	CP = 195	        Predict Failed in CONDITION
SS = 9	CP = 195	        Deduce simple_part
SS = 9	CP = 195	          Predict Failed in CONDITION
SS = 11	CP = 195	          Deduce terminal_symbol
SS = 11	CP = 195	            Predict Failed in CONDITION
SS = 11	CP = 195	            Predict Failed in CONDITION
SS = 12	CP = 195	            Match  token
SS = 12	CP = 195	            Accept token
SS = 11	CP = 196	          Accept terminal_symbol
SS = 9	CP = 196	        Accept simple_part
SS = 7	CP = 196	      Accept part
SS = 7	CP = 196	      Match  ,
SS = 7	CP = 196	      Reject ,
SS = 6	CP = 196	      Predict Failed: part
SS = 5	CP = 196	    Accept term
SS = 5	CP = 196	    Match  |
SS = 5	CP = 196	    Reject |
SS = 4	CP = 196	  Accept declaration
SS = 4	CP = 196	  Deduce end_op
SS = 5	CP = 196	    Match  ;
SS = 5	CP = 196	    Accept ;
SS = 4	CP = 197	  Accept end_op
SS = 3	CP = 197	Accept statement
SS = 3	CP = 197	Deduce statement
SS = 4	CP = 197	  Deduce non_terminal_symbol
SS = 4	CP = 197	    Match  id
SS = 4	CP = 197	    Accept id
SS = 4	CP = 198	  Accept non_terminal_symbol
SS = 4	CP = 198	  Deduce assign_op
SS = 5	CP = 198	    Match  ::=
SS = 5	CP = 198	    Accept ::=
SS = 4	CP = 199	  Accept assign_op
SS = 4	CP = 199	  Deduce declaration
SS = 5	CP = 199	    Deduce term
SS = 6	CP = 199	      Deduce part
SS = 6	CP = 199	        Predict Failed in CONDITION
SS = 6	CP = 199	        Predict Failed in CONDITION
SS = 6	CP = 199	        Predict Failed in CONDITION
SS = 8	CP = 199	        Deduce simple_part
SS = 8	CP = 199	          Predict Failed in CONDITION
SS = 10	CP = 199	          Deduce terminal_symbol
SS = 11	CP = 199	            Match  slit
SS = 11	CP = 199	            Accept slit
SS = 10	CP = 200	          Accept terminal_symbol
SS = 8	CP = 200	        Accept simple_part
SS = 6	CP = 200	      Accept part
SS = 7	CP = 200	      Match  ,
SS = 7	CP = 200	      Reject ,
SS = 7	CP = 200	      Deduce part
SS = 7	CP = 200	        Predict Failed in CONDITION
SS = 7	CP = 200	        Predict Failed in CONDITION
SS = 7	CP = 200	        Predict Failed in CONDITION
SS = 9	CP = 200	        Deduce simple_part
SS = 9	CP = 200	          Predict Failed in CONDITION
SS = 11	CP = 200	          Deduce terminal_symbol
SS = 11	CP = 200	            Predict Failed in CONDITION
SS = 11	CP = 200	            Predict Failed in CONDITION
SS = 12	CP = 200	            Match  token
SS = 12	CP = 200	            Accept token
SS = 11	CP = 201	          Accept terminal_symbol
SS = 9	CP = 201	        Accept simple_part
SS = 7	CP = 201	      Accept part
SS = 7	CP = 201	      Match  ,
SS = 7	CP = 201	      Reject ,
SS = 7	CP = 201	      Deduce part
SS = 7	CP = 201	        Predict Failed in CONDITION
SS = 7	CP = 201	        Predict Failed in CONDITION
SS = 7	CP = 201	        Predict Failed in CONDITION
SS = 9	CP = 201	        Deduce simple_part
SS = 9	CP = 201	          Predict Failed in CONDITION
SS = 11	CP = 201	          Deduce terminal_symbol
SS = 11	CP = 201	            Predict Failed in CONDITION
SS = 11	CP = 201	            Predict Failed in CONDITION
SS = 12	CP = 201	            Match  token
SS = 12	CP = 201	            Accept token
SS = 11	CP = 202	          Accept terminal_symbol
SS = 9	CP = 202	        Accept simple_part
SS = 7	CP = 202	      Accept part
SS = 7	CP = 202	      Match  ,
SS = 7	CP = 202	      Reject ,
SS = 7	CP = 202	      Deduce part
SS = 7	CP = 202	        Predict Failed in CONDITION
SS = 7	CP = 202	        Predict Failed in CONDITION
SS = 7	CP = 202	        Predict Failed in CONDITION
SS = 9	CP = 202	        Deduce simple_part
SS = 11	CP = 202	          Deduce right_non_terminal_symbol
SS = 12	CP = 202	            Deduce non_terminal_symbol
SS = 12	CP = 202	              Match  id
SS = 12	CP = 202	              Accept id
SS = 12	CP = 203	            Accept non_terminal_symbol
SS = 11	CP = 203	          Accept right_non_terminal_symbol
SS = 9	CP = 203	        Accept simple_part
SS = 7	CP = 203	      Accept part
SS = 7	CP = 203	      Match  ,
SS = 7	CP = 203	      Reject ,
SS = 7	CP = 203	      Deduce part
SS = 7	CP = 203	        Predict Failed in CONDITION
SS = 7	CP = 203	        Predict Failed in CONDITION
SS = 7	CP = 203	        Predict Failed in CONDITION
SS = 9	CP = 203	        Deduce simple_part
SS = 9	CP = 203	          Predict Failed in CONDITION
SS = 11	CP = 203	          Deduce terminal_symbol
SS = 12	CP = 203	            Match  slit
SS = 12	CP = 203	            Accept slit
SS = 11	CP = 204	          Accept terminal_symbol
SS = 9	CP = 204	        Accept simple_part
SS = 7	CP = 204	      Accept part
SS = 7	CP = 204	      Match  ,
SS = 7	CP = 204	      Reject ,
SS = 7	CP = 204	      Deduce part
SS = 7	CP = 204	        Predict Failed in CONDITION
SS = 7	CP = 204	        Predict Failed in CONDITION
SS = 7	CP = 204	        Predict Failed in CONDITION
SS = 9	CP = 204	        Deduce simple_part
SS = 9	CP = 204	          Predict Failed in CONDITION
SS = 11	CP = 204	          Deduce terminal_symbol
SS = 11	CP = 204	            Predict Failed in CONDITION
SS = 11	CP = 204	            Predict Failed in CONDITION
SS = 12	CP = 204	            Match  token
SS = 12	CP = 204	            Accept token
SS = 11	CP = 205	          Accept terminal_symbol
SS = 9	CP = 205	        Accept simple_part
SS = 7	CP = 205	      Accept part
SS = 7	CP = 205	      Match  ,
SS = 7	CP = 205	      Reject ,
SS = 6	CP = 205	      Predict Failed: part
SS = 5	CP = 205	    Accept term
SS = 5	CP = 205	    Match  |
SS = 5	CP = 205	    Reject |
SS = 4	CP = 205	  Accept declaration
SS = 4	CP = 205	  Deduce end_op
SS = 5	CP = 205	    Match  ;
SS = 5	CP = 205	    Accept ;
SS = 4	CP = 206	  Accept end_op
SS = 3	CP = 206	Accept statement
SS = 3	CP = 206	Deduce statement
SS = 4	CP = 206	  Deduce non_terminal_symbol
SS = 4	CP = 206	    Match  id
SS = 4	CP = 206	    Accept id
SS = 4	CP = 207	  Accept non_terminal_symbol
SS = 4	CP = 207	  Deduce assign_op
SS = 5	CP = 207	    Match  ::=
SS = 5	CP = 207	    Accept ::=
SS = 4	CP = 208	  Accept assign_op
SS = 4	CP = 208	  Deduce declaration
SS = 5	CP = 208	    Deduce term
SS = 6	CP = 208	      Deduce part
SS = 6	CP = 208	        Predict Failed in CONDITION
SS = 6	CP = 208	        Predict Failed in CONDITION
SS = 6	CP = 208	        Predict Failed in CONDITION
SS = 8	CP = 208	        Deduce simple_part
SS = 8	CP = 208	          Predict Failed in CONDITION
SS = 10	CP = 208	          Deduce terminal_symbol
SS = 11	CP = 208	            Match  slit
SS = 11	CP = 208	            Accept slit
SS = 10	CP = 209	          Accept terminal_symbol
SS = 8	CP = 209	        Accept simple_part
SS = 6	CP = 209	      Accept part
SS = 7	CP = 209	      Match  ,
SS = 7	CP = 209	      Reject ,
SS = 7	CP = 209	      Deduce part
SS = 7	CP = 209	        Predict Failed in CONDITION
SS = 7	CP = 209	        Predict Failed in CONDITION
SS = 7	CP = 209	        Predict Failed in CONDITION
SS = 9	CP = 209	        Deduce simple_part
SS = 11	CP = 209	          Deduce right_non_terminal_symbol
SS = 12	CP = 209	            Deduce non_terminal_symbol
SS = 12	CP = 209	              Match  id
SS = 12	CP = 209	              Accept id
SS = 12	CP = 210	            Accept non_terminal_symbol
SS = 11	CP = 210	          Accept right_non_terminal_symbol
SS = 9	CP = 210	        Accept simple_part
SS = 7	CP = 210	      Accept part
SS = 7	CP = 210	      Match  ,
SS = 7	CP = 210	      Reject ,
SS = 7	CP = 210	      Deduce part
SS = 7	CP = 210	        Predict Failed in CONDITION
SS = 7	CP = 210	        Predict Failed in CONDITION
SS = 7	CP = 210	        Predict Failed in CONDITION
SS = 9	CP = 210	        Deduce simple_part
SS = 11	CP = 210	          Deduce right_non_terminal_symbol
SS = 12	CP = 210	            Deduce non_terminal_symbol
SS = 12	CP = 210	              Match  id
SS = 12	CP = 210	              Accept id
SS = 12	CP = 211	            Accept non_terminal_symbol
SS = 11	CP = 211	          Accept right_non_terminal_symbol
SS = 9	CP = 211	        Accept simple_part
SS = 7	CP = 211	      Accept part
SS = 7	CP = 211	      Match  ,
SS = 7	CP = 211	      Reject ,
SS = 6	CP = 211	      Predict Failed: part
SS = 5	CP = 211	    Accept term
SS = 5	CP = 211	    Match  |
SS = 5	CP = 211	    Reject |
SS = 4	CP = 211	  Accept declaration
SS = 4	CP = 211	  Deduce end_op
SS = 5	CP = 211	    Match  ;
SS = 5	CP = 211	    Accept ;
SS = 4	CP = 212	  Accept end_op
SS = 3	CP = 212	Accept statement
SS = 3	CP = 212	Deduce statement
SS = 4	CP = 212	  Deduce non_terminal_symbol
SS = 4	CP = 212	    Match  id
SS = 4	CP = 212	    Accept id
SS = 4	CP = 213	  Accept non_terminal_symbol
SS = 4	CP = 213	  Deduce assign_op
SS = 5	CP = 213	    Match  ::=
SS = 5	CP = 213	    Accept ::=
SS = 4	CP = 214	  Accept assign_op
SS = 4	CP = 214	  Deduce declaration
SS = 5	CP = 214	    Deduce term
SS = 6	CP = 214	      Deduce part
SS = 6	CP = 214	        Predict Failed in CONDITION
SS = 6	CP = 214	        Predict Failed in CONDITION
SS = 6	CP = 214	        Predict Failed in CONDITION
SS = 8	CP = 214	        Deduce simple_part
SS = 10	CP = 214	          Deduce right_non_terminal_symbol
SS = 11	CP = 214	            Deduce non_terminal_symbol
SS = 11	CP = 214	              Match  id
SS = 11	CP = 214	              Accept id
SS = 11	CP = 215	            Accept non_terminal_symbol
SS = 10	CP = 215	          Accept right_non_terminal_symbol
SS = 8	CP = 215	        Accept simple_part
SS = 6	CP = 215	      Accept part
SS = 7	CP = 215	      Match  ,
SS = 7	CP = 215	      Reject ,
SS = 7	CP = 215	      Deduce part
SS = 7	CP = 215	        Predict Failed in CONDITION
SS = 7	CP = 215	        Predict Failed in CONDITION
SS = 9	CP = 215	        Deduce alternative_part
SS = 9	CP = 215	          Match  [
SS = 9	CP = 215	          Accept [
SS = 10	CP = 216	          Deduce declaration
SS = 11	CP = 216	            Deduce term
SS = 12	CP = 216	              Deduce part
SS = 12	CP = 216	                Predict Failed in CONDITION
SS = 12	CP = 216	                Predict Failed in CONDITION
SS = 12	CP = 216	                Predict Failed in CONDITION
SS = 14	CP = 216	                Deduce simple_part
SS = 14	CP = 216	                  Predict Failed in CONDITION
SS = 16	CP = 216	                  Deduce terminal_symbol
SS = 17	CP = 216	                    Match  slit
SS = 17	CP = 216	                    Accept slit
SS = 16	CP = 217	                  Accept terminal_symbol
SS = 14	CP = 217	                Accept simple_part
SS = 12	CP = 217	              Accept part
SS = 13	CP = 217	              Match  ,
SS = 13	CP = 217	              Reject ,
SS = 13	CP = 217	              Deduce part
SS = 13	CP = 217	                Predict Failed in CONDITION
SS = 13	CP = 217	                Predict Failed in CONDITION
SS = 13	CP = 217	                Predict Failed in CONDITION
SS = 15	CP = 217	                Deduce simple_part
SS = 17	CP = 217	                  Deduce right_non_terminal_symbol
SS = 18	CP = 217	                    Deduce non_terminal_symbol
SS = 18	CP = 217	                      Match  id
SS = 18	CP = 217	                      Accept id
SS = 18	CP = 218	                    Accept non_terminal_symbol
SS = 17	CP = 218	                  Accept right_non_terminal_symbol
SS = 15	CP = 218	                Accept simple_part
SS = 13	CP = 218	              Accept part
SS = 13	CP = 218	              Match  ,
SS = 13	CP = 218	              Reject ,
SS = 12	CP = 218	              Predict Failed: part
SS = 11	CP = 218	            Accept term
SS = 11	CP = 218	            Match  |
SS = 11	CP = 218	            Reject |
SS = 10	CP = 218	          Accept declaration
SS = 9	CP = 218	          Match  ]
SS = 9	CP = 218	          Accept ]
SS = 9	CP = 219	        Accept alternative_part
SS = 7	CP = 219	      Accept part
SS = 7	CP = 219	      Match  ,
SS = 7	CP = 219	      Reject ,
SS = 6	CP = 219	      Predict Failed: part
SS = 5	CP = 219	    Accept term
SS = 5	CP = 219	    Match  |
SS = 5	CP = 219	    Reject |
SS = 4	CP = 219	  Accept declaration
SS = 4	CP = 219	  Deduce end_op
SS = 5	CP = 219	    Match  ;
SS = 5	CP = 219	    Accept ;
SS = 4	CP = 220	  Accept end_op
SS = 3	CP = 220	Accept statement
SS = 3	CP = 220	Deduce statement
SS = 4	CP = 220	  Deduce non_terminal_symbol
SS = 4	CP = 220	    Match  id
SS = 4	CP = 220	    Accept id
SS = 4	CP = 221	  Accept non_terminal_symbol
SS = 4	CP = 221	  Deduce assign_op
SS = 5	CP = 221	    Match  ::=
SS = 5	CP = 221	    Accept ::=
SS = 4	CP = 222	  Accept assign_op
SS = 4	CP = 222	  Deduce declaration
SS = 5	CP = 222	    Deduce term
SS = 6	CP = 222	      Deduce part
SS = 6	CP = 222	        Predict Failed in CONDITION
SS = 6	CP = 222	        Predict Failed in CONDITION
SS = 6	CP = 222	        Predict Failed in CONDITION
SS = 8	CP = 222	        Deduce simple_part
SS = 8	CP = 222	          Predict Failed in CONDITION
SS = 10	CP = 222	          Deduce terminal_symbol
SS = 11	CP = 222	            Match  slit
SS = 11	CP = 222	            Accept slit
SS = 10	CP = 223	          Accept terminal_symbol
SS = 8	CP = 223	        Accept simple_part
SS = 6	CP = 223	      Accept part
SS = 7	CP = 223	      Match  ,
SS = 7	CP = 223	      Reject ,
SS = 7	CP = 223	      Deduce part
SS = 7	CP = 223	        Predict Failed in CONDITION
SS = 7	CP = 223	        Predict Failed in CONDITION
SS = 7	CP = 223	        Predict Failed in CONDITION
SS = 9	CP = 223	        Deduce simple_part
SS = 11	CP = 223	          Deduce right_non_terminal_symbol
SS = 12	CP = 223	            Deduce non_terminal_symbol
SS = 12	CP = 223	              Match  id
SS = 12	CP = 223	              Accept id
SS = 12	CP = 224	            Accept non_terminal_symbol
SS = 11	CP = 224	          Accept right_non_terminal_symbol
SS = 9	CP = 224	        Accept simple_part
SS = 7	CP = 224	      Accept part
SS = 7	CP = 224	      Match  ,
SS = 7	CP = 224	      Reject ,
SS = 7	CP = 224	      Deduce part
SS = 7	CP = 224	        Predict Failed in CONDITION
SS = 7	CP = 224	        Predict Failed in CONDITION
SS = 7	CP = 224	        Predict Failed in CONDITION
SS = 9	CP = 224	        Deduce simple_part
SS = 9	CP = 224	          Predict Failed in CONDITION
SS = 11	CP = 224	          Deduce terminal_symbol
SS = 11	CP = 224	            Predict Failed in CONDITION
SS = 11	CP = 224	            Predict Failed in CONDITION
SS = 12	CP = 224	            Match  token
SS = 12	CP = 224	            Accept token
SS = 11	CP = 225	          Accept terminal_symbol
SS = 9	CP = 225	        Accept simple_part
SS = 7	CP = 225	      Accept part
SS = 7	CP = 225	      Match  ,
SS = 7	CP = 225	      Reject ,
SS = 7	CP = 225	      Deduce part
SS = 7	CP = 225	        Predict Failed in CONDITION
SS = 7	CP = 225	        Predict Failed in CONDITION
SS = 7	CP = 225	        Predict Failed in CONDITION
SS = 9	CP = 225	        Deduce simple_part
SS = 11	CP = 225	          Deduce right_non_terminal_symbol
SS = 12	CP = 225	            Deduce non_terminal_symbol
SS = 12	CP = 225	              Match  id
SS = 12	CP = 225	              Accept id
SS = 12	CP = 226	            Accept non_terminal_symbol
SS = 11	CP = 226	          Accept right_non_terminal_symbol
SS = 9	CP = 226	        Accept simple_part
SS = 7	CP = 226	      Accept part
SS = 7	CP = 226	      Match  ,
SS = 7	CP = 226	      Reject ,
SS = 7	CP = 226	      Deduce part
SS = 9	CP = 226	        Deduce repeat_part
SS = 9	CP = 226	          Match  {
SS = 9	CP = 226	          Accept {
SS = 10	CP = 227	          Deduce declaration
SS = 11	CP = 227	            Deduce term
SS = 12	CP = 227	              Deduce part
SS = 12	CP = 227	                Predict Failed in CONDITION
SS = 12	CP = 227	                Predict Failed in CONDITION
SS = 12	CP = 227	                Predict Failed in CONDITION
SS = 14	CP = 227	                Deduce simple_part
SS = 16	CP = 227	                  Deduce right_non_terminal_symbol
SS = 17	CP = 227	                    Deduce non_terminal_symbol
SS = 17	CP = 227	                      Match  id
SS = 17	CP = 227	                      Accept id
SS = 17	CP = 228	                    Accept non_terminal_symbol
SS = 16	CP = 228	                  Accept right_non_terminal_symbol
SS = 14	CP = 228	                Accept simple_part
SS = 12	CP = 228	              Accept part
SS = 13	CP = 228	              Match  ,
SS = 13	CP = 228	              Reject ,
SS = 13	CP = 228	              Deduce part
SS = 13	CP = 228	                Predict Failed in CONDITION
SS = 13	CP = 228	                Predict Failed in CONDITION
SS = 13	CP = 228	                Predict Failed in CONDITION
SS = 15	CP = 228	                Deduce simple_part
SS = 17	CP = 228	                  Deduce right_non_terminal_symbol
SS = 18	CP = 228	                    Deduce non_terminal_symbol
SS = 18	CP = 228	                      Match  id
SS = 18	CP = 228	                      Accept id
SS = 18	CP = 229	                    Accept non_terminal_symbol
SS = 17	CP = 229	                  Accept right_non_terminal_symbol
SS = 15	CP = 229	                Accept simple_part
SS = 13	CP = 229	              Accept part
SS = 13	CP = 229	              Match  ,
SS = 13	CP = 229	              Reject ,
SS = 13	CP = 229	              Deduce part
SS = 13	CP = 229	                Predict Failed in CONDITION
SS = 13	CP = 229	                Predict Failed in CONDITION
SS = 13	CP = 229	                Predict Failed in CONDITION
SS = 15	CP = 229	                Deduce simple_part
SS = 15	CP = 229	                  Predict Failed in CONDITION
SS = 17	CP = 229	                  Deduce terminal_symbol
SS = 18	CP = 229	                    Match  slit
SS = 18	CP = 229	                    Accept slit
SS = 17	CP = 230	                  Accept terminal_symbol
SS = 15	CP = 230	                Accept simple_part
SS = 13	CP = 230	              Accept part
SS = 13	CP = 230	              Match  ,
SS = 13	CP = 230	              Reject ,
SS = 13	CP = 230	              Deduce part
SS = 13	CP = 230	                Predict Failed in CONDITION
SS = 13	CP = 230	                Predict Failed in CONDITION
SS = 13	CP = 230	                Predict Failed in CONDITION
SS = 15	CP = 230	                Deduce simple_part
SS = 15	CP = 230	                  Predict Failed in CONDITION
SS = 17	CP = 230	                  Deduce terminal_symbol
SS = 17	CP = 230	                    Predict Failed in CONDITION
SS = 17	CP = 230	                    Predict Failed in CONDITION
SS = 18	CP = 230	                    Match  token
SS = 18	CP = 230	                    Accept token
SS = 17	CP = 231	                  Accept terminal_symbol
SS = 15	CP = 231	                Accept simple_part
SS = 13	CP = 231	              Accept part
SS = 13	CP = 231	              Match  ,
SS = 13	CP = 231	              Reject ,
SS = 12	CP = 231	              Predict Failed: part
SS = 11	CP = 231	            Accept term
SS = 11	CP = 231	            Match  |
SS = 11	CP = 231	            Reject |
SS = 10	CP = 231	          Accept declaration
SS = 9	CP = 231	          Match  }
SS = 9	CP = 231	          Accept }
SS = 9	CP = 232	        Accept repeat_part
SS = 7	CP = 232	      Accept part
SS = 7	CP = 232	      Match  ,
SS = 7	CP = 232	      Reject ,
SS = 6	CP = 232	      Predict Failed: part
SS = 5	CP = 232	    Accept term
SS = 5	CP = 232	    Match  |
SS = 5	CP = 232	    Reject |
SS = 4	CP = 232	  Accept declaration
SS = 4	CP = 232	  Deduce end_op
SS = 5	CP = 232	    Match  ;
SS = 5	CP = 232	    Accept ;
SS = 4	CP = 233	  Accept end_op
SS = 3	CP = 233	Accept statement
SS = 3	CP = 233	Deduce statement
SS = 4	CP = 233	  Deduce non_terminal_symbol
SS = 4	CP = 233	    Match  id
SS = 4	CP = 233	    Accept id
SS = 4	CP = 234	  Accept non_terminal_symbol
SS = 4	CP = 234	  Deduce assign_op
SS = 5	CP = 234	    Match  ::=
SS = 5	CP = 234	    Accept ::=
SS = 4	CP = 235	  Accept assign_op
SS = 4	CP = 235	  Deduce declaration
SS = 5	CP = 235	    Deduce term
SS = 6	CP = 235	      Deduce part
SS = 6	CP = 235	        Predict Failed in CONDITION
SS = 6	CP = 235	        Predict Failed in CONDITION
SS = 6	CP = 235	        Predict Failed in CONDITION
SS = 8	CP = 235	        Deduce simple_part
SS = 8	CP = 235	          Predict Failed in CONDITION
SS = 10	CP = 235	          Deduce terminal_symbol
SS = 11	CP = 235	            Match  slit
SS = 11	CP = 235	            Accept slit
SS = 10	CP = 236	          Accept terminal_symbol
SS = 8	CP = 236	        Accept simple_part
SS = 6	CP = 236	      Accept part
SS = 7	CP = 236	      Match  ,
SS = 7	CP = 236	      Reject ,
SS = 7	CP = 236	      Deduce part
SS = 7	CP = 236	        Predict Failed in CONDITION
SS = 7	CP = 236	        Predict Failed in CONDITION
SS = 9	CP = 236	        Deduce alternative_part
SS = 9	CP = 236	          Match  [
SS = 9	CP = 236	          Accept [
SS = 10	CP = 237	          Deduce declaration
SS = 11	CP = 237	            Deduce term
SS = 12	CP = 237	              Deduce part
SS = 12	CP = 237	                Predict Failed in CONDITION
SS = 12	CP = 237	                Predict Failed in CONDITION
SS = 12	CP = 237	                Predict Failed in CONDITION
SS = 14	CP = 237	                Deduce simple_part
SS = 14	CP = 237	                  Predict Failed in CONDITION
SS = 16	CP = 237	                  Deduce terminal_symbol
SS = 17	CP = 237	                    Match  slit
SS = 17	CP = 237	                    Accept slit
SS = 16	CP = 238	                  Accept terminal_symbol
SS = 14	CP = 238	                Accept simple_part
SS = 12	CP = 238	              Accept part
SS = 13	CP = 238	              Match  ,
SS = 13	CP = 238	              Reject ,
SS = 13	CP = 238	              Deduce part
SS = 13	CP = 238	                Predict Failed in CONDITION
SS = 13	CP = 238	                Predict Failed in CONDITION
SS = 13	CP = 238	                Predict Failed in CONDITION
SS = 15	CP = 238	                Deduce simple_part
SS = 17	CP = 238	                  Deduce right_non_terminal_symbol
SS = 18	CP = 238	                    Deduce non_terminal_symbol
SS = 18	CP = 238	                      Match  id
SS = 18	CP = 238	                      Accept id
SS = 18	CP = 239	                    Accept non_terminal_symbol
SS = 17	CP = 239	                  Accept right_non_terminal_symbol
SS = 15	CP = 239	                Accept simple_part
SS = 13	CP = 239	              Accept part
SS = 13	CP = 239	              Match  ,
SS = 13	CP = 239	              Reject ,
SS = 12	CP = 239	              Predict Failed: part
SS = 11	CP = 239	            Accept term
SS = 11	CP = 239	            Match  |
SS = 11	CP = 239	            Reject |
SS = 10	CP = 239	          Accept declaration
SS = 9	CP = 239	          Match  ]
SS = 9	CP = 239	          Accept ]
SS = 9	CP = 240	        Accept alternative_part
SS = 7	CP = 240	      Accept part
SS = 7	CP = 240	      Match  ,
SS = 7	CP = 240	      Reject ,
SS = 7	CP = 240	      Deduce part
SS = 7	CP = 240	        Predict Failed in CONDITION
SS = 7	CP = 240	        Predict Failed in CONDITION
SS = 7	CP = 240	        Predict Failed in CONDITION
SS = 9	CP = 240	        Deduce simple_part
SS = 9	CP = 240	          Predict Failed in CONDITION
SS = 11	CP = 240	          Deduce terminal_symbol
SS = 11	CP = 240	            Predict Failed in CONDITION
SS = 11	CP = 240	            Predict Failed in CONDITION
SS = 12	CP = 240	            Match  token
SS = 12	CP = 240	            Accept token
SS = 11	CP = 241	          Accept terminal_symbol
SS = 9	CP = 241	        Accept simple_part
SS = 7	CP = 241	      Accept part
SS = 7	CP = 241	      Match  ,
SS = 7	CP = 241	      Reject ,
SS = 6	CP = 241	      Predict Failed: part
SS = 5	CP = 241	    Accept term
SS = 5	CP = 241	    Match  |
SS = 5	CP = 241	    Reject |
SS = 4	CP = 241	  Accept declaration
SS = 4	CP = 241	  Deduce end_op
SS = 5	CP = 241	    Match  ;
SS = 5	CP = 241	    Accept ;
SS = 4	CP = 242	  Accept end_op
SS = 3	CP = 242	Accept statement
SS = 3	CP = 242	Deduce statement
SS = 4	CP = 242	  Deduce non_terminal_symbol
SS = 4	CP = 242	    Match  id
SS = 4	CP = 242	    Accept id
SS = 4	CP = 243	  Accept non_terminal_symbol
SS = 4	CP = 243	  Deduce assign_op
SS = 5	CP = 243	    Match  ::=
SS = 5	CP = 243	    Accept ::=
SS = 4	CP = 244	  Accept assign_op
SS = 4	CP = 244	  Deduce declaration
SS = 5	CP = 244	    Deduce term
SS = 6	CP = 244	      Deduce part
SS = 6	CP = 244	        Predict Failed in CONDITION
SS = 6	CP = 244	        Predict Failed in CONDITION
SS = 6	CP = 244	        Predict Failed in CONDITION
SS = 8	CP = 244	        Deduce simple_part
SS = 8	CP = 244	          Predict Failed in CONDITION
SS = 10	CP = 244	          Deduce terminal_symbol
SS = 11	CP = 244	            Match  slit
SS = 11	CP = 244	            Accept slit
SS = 10	CP = 245	          Accept terminal_symbol
SS = 8	CP = 245	        Accept simple_part
SS = 6	CP = 245	      Accept part
SS = 7	CP = 245	      Match  ,
SS = 7	CP = 245	      Reject ,
SS = 7	CP = 245	      Deduce part
SS = 7	CP = 245	        Predict Failed in CONDITION
SS = 7	CP = 245	        Predict Failed in CONDITION
SS = 7	CP = 245	        Predict Failed in CONDITION
SS = 9	CP = 245	        Deduce simple_part
SS = 11	CP = 245	          Deduce right_non_terminal_symbol
SS = 12	CP = 245	            Deduce non_terminal_symbol
SS = 12	CP = 245	              Match  id
SS = 12	CP = 245	              Accept id
SS = 12	CP = 246	            Accept non_terminal_symbol
SS = 11	CP = 246	          Accept right_non_terminal_symbol
SS = 9	CP = 246	        Accept simple_part
SS = 7	CP = 246	      Accept part
SS = 7	CP = 246	      Match  ,
SS = 7	CP = 246	      Reject ,
SS = 7	CP = 246	      Deduce part
SS = 7	CP = 246	        Predict Failed in CONDITION
SS = 7	CP = 246	        Predict Failed in CONDITION
SS = 7	CP = 246	        Predict Failed in CONDITION
SS = 9	CP = 246	        Deduce simple_part
SS = 9	CP = 246	          Predict Failed in CONDITION
SS = 11	CP = 246	          Deduce terminal_symbol
SS = 11	CP = 246	            Predict Failed in CONDITION
SS = 11	CP = 246	            Predict Failed in CONDITION
SS = 12	CP = 246	            Match  token
SS = 12	CP = 246	            Accept token
SS = 11	CP = 247	          Accept terminal_symbol
SS = 9	CP = 247	        Accept simple_part
SS = 7	CP = 247	      Accept part
SS = 7	CP = 247	      Match  ,
SS = 7	CP = 247	      Reject ,
SS = 7	CP = 247	      Deduce part
SS = 7	CP = 247	        Predict Failed in CONDITION
SS = 7	CP = 247	        Predict Failed in CONDITION
SS = 7	CP = 247	        Predict Failed in CONDITION
SS = 9	CP = 247	        Deduce simple_part
SS = 11	CP = 247	          Deduce right_non_terminal_symbol
SS = 12	CP = 247	            Deduce non_terminal_symbol
SS = 12	CP = 247	              Match  id
SS = 12	CP = 247	              Accept id
SS = 12	CP = 248	            Accept non_terminal_symbol
SS = 11	CP = 248	          Accept right_non_terminal_symbol
SS = 9	CP = 248	        Accept simple_part
SS = 7	CP = 248	      Accept part
SS = 7	CP = 248	      Match  ,
SS = 7	CP = 248	      Reject ,
SS = 7	CP = 248	      Deduce part
SS = 7	CP = 248	        Predict Failed in CONDITION
SS = 7	CP = 248	        Predict Failed in CONDITION
SS = 7	CP = 248	        Predict Failed in CONDITION
SS = 9	CP = 248	        Deduce simple_part
SS = 9	CP = 248	          Predict Failed in CONDITION
SS = 11	CP = 248	          Deduce terminal_symbol
SS = 12	CP = 248	            Match  slit
SS = 12	CP = 248	            Accept slit
SS = 11	CP = 249	          Accept terminal_symbol
SS = 9	CP = 249	        Accept simple_part
SS = 7	CP = 249	      Accept part
SS = 7	CP = 249	      Match  ,
SS = 7	CP = 249	      Reject ,
SS = 7	CP = 249	      Deduce part
SS = 7	CP = 249	        Predict Failed in CONDITION
SS = 7	CP = 249	        Predict Failed in CONDITION
SS = 7	CP = 249	        Predict Failed in CONDITION
SS = 9	CP = 249	        Deduce simple_part
SS = 9	CP = 249	          Predict Failed in CONDITION
SS = 11	CP = 249	          Deduce terminal_symbol
SS = 11	CP = 249	            Predict Failed in CONDITION
SS = 11	CP = 249	            Predict Failed in CONDITION
SS = 12	CP = 249	            Match  token
SS = 12	CP = 249	            Accept token
SS = 11	CP = 250	          Accept terminal_symbol
SS = 9	CP = 250	        Accept simple_part
SS = 7	CP = 250	      Accept part
SS = 7	CP = 250	      Match  ,
SS = 7	CP = 250	      Reject ,
SS = 6	CP = 250	      Predict Failed: part
SS = 5	CP = 250	    Accept term
SS = 5	CP = 250	    Match  |
SS = 5	CP = 250	    Reject |
SS = 4	CP = 250	  Accept declaration
SS = 4	CP = 250	  Deduce end_op
SS = 5	CP = 250	    Match  ;
SS = 5	CP = 250	    Accept ;
SS = 4	CP = 251	  Accept end_op
SS = 3	CP = 251	Accept statement
SS = 3	CP = 251	Deduce statement
SS = 4	CP = 251	  Deduce non_terminal_symbol
SS = 4	CP = 251	    Match  id
SS = 4	CP = 251	    Accept id
SS = 4	CP = 252	  Accept non_terminal_symbol
SS = 4	CP = 252	  Deduce assign_op
SS = 5	CP = 252	    Match  ::=
SS = 5	CP = 252	    Accept ::=
SS = 4	CP = 253	  Accept assign_op
SS = 4	CP = 253	  Deduce declaration
SS = 5	CP = 253	    Deduce term
SS = 6	CP = 253	      Deduce part
SS = 8	CP = 253	        Deduce repeat_part
SS = 8	CP = 253	          Match  {
SS = 8	CP = 253	          Accept {
SS = 9	CP = 254	          Deduce declaration
SS = 10	CP = 254	            Deduce term
SS = 11	CP = 254	              Deduce part
SS = 11	CP = 254	                Predict Failed in CONDITION
SS = 11	CP = 254	                Predict Failed in CONDITION
SS = 11	CP = 254	                Predict Failed in CONDITION
SS = 13	CP = 254	                Deduce simple_part
SS = 15	CP = 254	                  Deduce right_non_terminal_symbol
SS = 16	CP = 254	                    Deduce non_terminal_symbol
SS = 16	CP = 254	                      Match  id
SS = 16	CP = 254	                      Accept id
SS = 16	CP = 255	                    Accept non_terminal_symbol
SS = 15	CP = 255	                  Accept right_non_terminal_symbol
SS = 13	CP = 255	                Accept simple_part
SS = 11	CP = 255	              Accept part
SS = 12	CP = 255	              Match  ,
SS = 12	CP = 255	              Reject ,
SS = 11	CP = 255	              Predict Failed: part
SS = 10	CP = 255	            Accept term
SS = 10	CP = 255	            Match  |
SS = 10	CP = 255	            Accept |
SS = 11	CP = 256	            Deduce term
SS = 12	CP = 256	              Deduce part
SS = 12	CP = 256	                Predict Failed in CONDITION
SS = 12	CP = 256	                Predict Failed in CONDITION
SS = 12	CP = 256	                Predict Failed in CONDITION
SS = 14	CP = 256	                Deduce simple_part
SS = 16	CP = 256	                  Deduce right_non_terminal_symbol
SS = 17	CP = 256	                    Deduce non_terminal_symbol
SS = 17	CP = 256	                      Match  id
SS = 17	CP = 256	                      Accept id
SS = 17	CP = 257	                    Accept non_terminal_symbol
SS = 16	CP = 257	                  Accept right_non_terminal_symbol
SS = 14	CP = 257	                Accept simple_part
SS = 12	CP = 257	              Accept part
SS = 13	CP = 257	              Match  ,
SS = 13	CP = 257	              Reject ,
SS = 12	CP = 257	              Predict Failed: part
SS = 11	CP = 257	            Accept term
SS = 10	CP = 257	            Match  |
SS = 10	CP = 257	            Reject |
SS = 9	CP = 257	          Accept declaration
SS = 8	CP = 257	          Match  }
SS = 8	CP = 257	          Accept }
SS = 8	CP = 258	        Accept repeat_part
SS = 6	CP = 258	      Accept part
SS = 7	CP = 258	      Match  ,
SS = 7	CP = 258	      Reject ,
SS = 7	CP = 258	      Deduce part
SS = 9	CP = 258	        Deduce repeat_part
SS = 9	CP = 258	          Match  {
SS = 9	CP = 258	          Accept {
SS = 10	CP = 259	          Deduce declaration
SS = 11	CP = 259	            Deduce term
SS = 12	CP = 259	              Deduce part
SS = 12	CP = 259	                Predict Failed in CONDITION
SS = 12	CP = 259	                Predict Failed in CONDITION
SS = 12	CP = 259	                Predict Failed in CONDITION
SS = 14	CP = 259	                Deduce simple_part
SS = 14	CP = 259	                  Predict Failed in CONDITION
SS = 16	CP = 259	                  Deduce terminal_symbol
SS = 16	CP = 259	                    Predict Failed in CONDITION
SS = 16	CP = 259	                    Predict Failed in CONDITION
SS = 17	CP = 259	                    Match  token
SS = 17	CP = 259	                    Accept token
SS = 16	CP = 260	                  Accept terminal_symbol
SS = 14	CP = 260	                Accept simple_part
SS = 12	CP = 260	              Accept part
SS = 13	CP = 260	              Match  ,
SS = 13	CP = 260	              Reject ,
SS = 12	CP = 260	              Predict Failed: part
SS = 11	CP = 260	            Accept term
SS = 11	CP = 260	            Match  |
SS = 11	CP = 260	            Reject |
SS = 10	CP = 260	          Accept declaration
SS = 9	CP = 260	          Match  }
SS = 9	CP = 260	          Accept }
SS = 9	CP = 261	        Accept repeat_part
SS = 7	CP = 261	      Accept part
SS = 7	CP = 261	      Match  ,
SS = 7	CP = 261	      Reject ,
SS = 6	CP = 261	      Predict Failed: part
SS = 5	CP = 261	    Accept term
SS = 5	CP = 261	    Match  |
SS = 5	CP = 261	    Reject |
SS = 4	CP = 261	  Accept declaration
SS = 4	CP = 261	  Deduce end_op
SS = 5	CP = 261	    Match  ;
SS = 5	CP = 261	    Accept ;
SS = 4	CP = 262	  Accept end_op
SS = 3	CP = 262	Accept statement
SS = 3	CP = 262	Deduce statement
SS = 4	CP = 262	  Deduce non_terminal_symbol
SS = 4	CP = 262	    Match  id
SS = 4	CP = 262	    Accept id
SS = 4	CP = 263	  Accept non_terminal_symbol
SS = 4	CP = 263	  Deduce assign_op
SS = 5	CP = 263	    Match  ::=
SS = 5	CP = 263	    Accept ::=
SS = 4	CP = 264	  Accept assign_op
SS = 4	CP = 264	  Deduce declaration
SS = 5	CP = 264	    Deduce term
SS = 6	CP = 264	      Deduce part
SS = 6	CP = 264	        Predict Failed in CONDITION
SS = 6	CP = 264	        Predict Failed in CONDITION
SS = 6	CP = 264	        Predict Failed in CONDITION
SS = 8	CP = 264	        Deduce simple_part
SS = 8	CP = 264	          Predict Failed in CONDITION
SS = 10	CP = 264	          Deduce terminal_symbol
SS = 11	CP = 264	            Match  slit
SS = 11	CP = 264	            Accept slit
SS = 10	CP = 265	          Accept terminal_symbol
SS = 8	CP = 265	        Accept simple_part
SS = 6	CP = 265	      Accept part
SS = 7	CP = 265	      Match  ,
SS = 7	CP = 265	      Reject ,
SS = 7	CP = 265	      Deduce part
SS = 7	CP = 265	        Predict Failed in CONDITION
SS = 7	CP = 265	        Predict Failed in CONDITION
SS = 7	CP = 265	        Predict Failed in CONDITION
SS = 9	CP = 265	        Deduce simple_part
SS = 11	CP = 265	          Deduce right_non_terminal_symbol
SS = 12	CP = 265	            Deduce non_terminal_symbol
SS = 12	CP = 265	              Match  id
SS = 12	CP = 265	              Accept id
SS = 12	CP = 266	            Accept non_terminal_symbol
SS = 11	CP = 266	          Accept right_non_terminal_symbol
SS = 9	CP = 266	        Accept simple_part
SS = 7	CP = 266	      Accept part
SS = 7	CP = 266	      Match  ,
SS = 7	CP = 266	      Reject ,
SS = 7	CP = 266	      Deduce part
SS = 7	CP = 266	        Predict Failed in CONDITION
SS = 7	CP = 266	        Predict Failed in CONDITION
SS = 7	CP = 266	        Predict Failed in CONDITION
SS = 9	CP = 266	        Deduce simple_part
SS = 9	CP = 266	          Predict Failed in CONDITION
SS = 11	CP = 266	          Deduce terminal_symbol
SS = 11	CP = 266	            Predict Failed in CONDITION
SS = 11	CP = 266	            Predict Failed in CONDITION
SS = 12	CP = 266	            Match  token
SS = 12	CP = 266	            Accept token
SS = 11	CP = 267	          Accept terminal_symbol
SS = 9	CP = 267	        Accept simple_part
SS = 7	CP = 267	      Accept part
SS = 7	CP = 267	      Match  ,
SS = 7	CP = 267	      Reject ,
SS = 7	CP = 267	      Deduce part
SS = 7	CP = 267	        Predict Failed in CONDITION
SS = 7	CP = 267	        Predict Failed in CONDITION
SS = 7	CP = 267	        Predict Failed in CONDITION
SS = 9	CP = 267	        Deduce simple_part
SS = 11	CP = 267	          Deduce right_non_terminal_symbol
SS = 12	CP = 267	            Deduce non_terminal_symbol
SS = 12	CP = 267	              Match  id
SS = 12	CP = 267	              Accept id
SS = 12	CP = 268	            Accept non_terminal_symbol
SS = 11	CP = 268	          Accept right_non_terminal_symbol
SS = 9	CP = 268	        Accept simple_part
SS = 7	CP = 268	      Accept part
SS = 7	CP = 268	      Match  ,
SS = 7	CP = 268	      Reject ,
SS = 7	CP = 268	      Deduce part
SS = 7	CP = 268	        Predict Failed in CONDITION
SS = 7	CP = 268	        Predict Failed in CONDITION
SS = 7	CP = 268	        Predict Failed in CONDITION
SS = 9	CP = 268	        Deduce simple_part
SS = 9	CP = 268	          Predict Failed in CONDITION
SS = 11	CP = 268	          Deduce terminal_symbol
SS = 12	CP = 268	            Match  slit
SS = 12	CP = 268	            Accept slit
SS = 11	CP = 269	          Accept terminal_symbol
SS = 9	CP = 269	        Accept simple_part
SS = 7	CP = 269	      Accept part
SS = 7	CP = 269	      Match  ,
SS = 7	CP = 269	      Reject ,
SS = 7	CP = 269	      Deduce part
SS = 7	CP = 269	        Predict Failed in CONDITION
SS = 7	CP = 269	        Predict Failed in CONDITION
SS = 7	CP = 269	        Predict Failed in CONDITION
SS = 9	CP = 269	        Deduce simple_part
SS = 9	CP = 269	          Predict Failed in CONDITION
SS = 11	CP = 269	          Deduce terminal_symbol
SS = 11	CP = 269	            Predict Failed in CONDITION
SS = 11	CP = 269	            Predict Failed in CONDITION
SS = 12	CP = 269	            Match  token
SS = 12	CP = 269	            Accept token
SS = 11	CP = 270	          Accept terminal_symbol
SS = 9	CP = 270	        Accept simple_part
SS = 7	CP = 270	      Accept part
SS = 7	CP = 270	      Match  ,
SS = 7	CP = 270	      Reject ,
SS = 6	CP = 270	      Predict Failed: part
SS = 5	CP = 270	    Accept term
SS = 5	CP = 270	    Match  |
SS = 5	CP = 270	    Reject |
SS = 4	CP = 270	  Accept declaration
SS = 4	CP = 270	  Deduce end_op
SS = 5	CP = 270	    Match  ;
SS = 5	CP = 270	    Accept ;
SS = 4	CP = 271	  Accept end_op
SS = 3	CP = 271	Accept statement
SS = 3	CP = 271	Deduce statement
SS = 4	CP = 271	  Deduce non_terminal_symbol
SS = 4	CP = 271	    Match  id
SS = 4	CP = 271	    Accept id
SS = 4	CP = 272	  Accept non_terminal_symbol
SS = 4	CP = 272	  Deduce assign_op
SS = 5	CP = 272	    Match  ::=
SS = 5	CP = 272	    Accept ::=
SS = 4	CP = 273	  Accept assign_op
SS = 4	CP = 273	  Deduce declaration
SS = 5	CP = 273	    Deduce term
SS = 6	CP = 273	      Deduce part
SS = 6	CP = 273	        Predict Failed in CONDITION
SS = 6	CP = 273	        Predict Failed in CONDITION
SS = 6	CP = 273	        Predict Failed in CONDITION
SS = 8	CP = 273	        Deduce simple_part
SS = 8	CP = 273	          Predict Failed in CONDITION
SS = 10	CP = 273	          Deduce terminal_symbol
SS = 11	CP = 273	            Match  slit
SS = 11	CP = 273	            Accept slit
SS = 10	CP = 274	          Accept terminal_symbol
SS = 8	CP = 274	        Accept simple_part
SS = 6	CP = 274	      Accept part
SS = 7	CP = 274	      Match  ,
SS = 7	CP = 274	      Reject ,
SS = 7	CP = 274	      Deduce part
SS = 7	CP = 274	        Predict Failed in CONDITION
SS = 7	CP = 274	        Predict Failed in CONDITION
SS = 7	CP = 274	        Predict Failed in CONDITION
SS = 9	CP = 274	        Deduce simple_part
SS = 9	CP = 274	          Predict Failed in CONDITION
SS = 11	CP = 274	          Deduce terminal_symbol
SS = 11	CP = 274	            Predict Failed in CONDITION
SS = 11	CP = 274	            Predict Failed in CONDITION
SS = 12	CP = 274	            Match  token
SS = 12	CP = 274	            Accept token
SS = 11	CP = 275	          Accept terminal_symbol
SS = 9	CP = 275	        Accept simple_part
SS = 7	CP = 275	      Accept part
SS = 7	CP = 275	      Match  ,
SS = 7	CP = 275	      Reject ,
SS = 7	CP = 275	      Deduce part
SS = 7	CP = 275	        Predict Failed in CONDITION
SS = 7	CP = 275	        Predict Failed in CONDITION
SS = 7	CP = 275	        Predict Failed in CONDITION
SS = 9	CP = 275	        Deduce simple_part
SS = 11	CP = 275	          Deduce right_non_terminal_symbol
SS = 12	CP = 275	            Deduce non_terminal_symbol
SS = 12	CP = 275	              Match  id
SS = 12	CP = 275	              Accept id
SS = 12	CP = 276	            Accept non_terminal_symbol
SS = 11	CP = 276	          Accept right_non_terminal_symbol
SS = 9	CP = 276	        Accept simple_part
SS = 7	CP = 276	      Accept part
SS = 7	CP = 276	      Match  ,
SS = 7	CP = 276	      Reject ,
SS = 7	CP = 276	      Deduce part
SS = 7	CP = 276	        Predict Failed in CONDITION
SS = 7	CP = 276	        Predict Failed in CONDITION
SS = 7	CP = 276	        Predict Failed in CONDITION
SS = 9	CP = 276	        Deduce simple_part
SS = 9	CP = 276	          Predict Failed in CONDITION
SS = 11	CP = 276	          Deduce terminal_symbol
SS = 12	CP = 276	            Match  slit
SS = 12	CP = 276	            Accept slit
SS = 11	CP = 277	          Accept terminal_symbol
SS = 9	CP = 277	        Accept simple_part
SS = 7	CP = 277	      Accept part
SS = 7	CP = 277	      Match  ,
SS = 7	CP = 277	      Reject ,
SS = 7	CP = 277	      Deduce part
SS = 7	CP = 277	        Predict Failed in CONDITION
SS = 7	CP = 277	        Predict Failed in CONDITION
SS = 7	CP = 277	        Predict Failed in CONDITION
SS = 9	CP = 277	        Deduce simple_part
SS = 9	CP = 277	          Predict Failed in CONDITION
SS = 11	CP = 277	          Deduce terminal_symbol
SS = 11	CP = 277	            Predict Failed in CONDITION
SS = 11	CP = 277	            Predict Failed in CONDITION
SS = 12	CP = 277	            Match  token
SS = 12	CP = 277	            Accept token
SS = 11	CP = 278	          Accept terminal_symbol
SS = 9	CP = 278	        Accept simple_part
SS = 7	CP = 278	      Accept part
SS = 7	CP = 278	      Match  ,
SS = 7	CP = 278	      Reject ,
SS = 6	CP = 278	      Predict Failed: part
SS = 5	CP = 278	    Accept term
SS = 5	CP = 278	    Match  |
SS = 5	CP = 278	    Reject |
SS = 4	CP = 278	  Accept declaration
SS = 4	CP = 278	  Deduce end_op
SS = 5	CP = 278	    Match  ;
SS = 5	CP = 278	    Accept ;
SS = 4	CP = 279	  Accept end_op
SS = 3	CP = 279	Accept statement
SS = 3	CP = 279	Deduce statement
SS = 4	CP = 279	  Deduce non_terminal_symbol
SS = 4	CP = 279	    Match  id
SS = 4	CP = 279	    Accept id
SS = 4	CP = 280	  Accept non_terminal_symbol
SS = 4	CP = 280	  Deduce assign_op
SS = 5	CP = 280	    Match  ::=
SS = 5	CP = 280	    Accept ::=
SS = 4	CP = 281	  Accept assign_op
SS = 4	CP = 281	  Deduce declaration
SS = 5	CP = 281	    Deduce term
SS = 6	CP = 281	      Deduce part
SS = 6	CP = 281	        Predict Failed in CONDITION
SS = 6	CP = 281	        Predict Failed in CONDITION
SS = 6	CP = 281	        Predict Failed in CONDITION
SS = 8	CP = 281	        Deduce simple_part
SS = 8	CP = 281	          Predict Failed in CONDITION
SS = 10	CP = 281	          Deduce terminal_symbol
SS = 11	CP = 281	            Match  slit
SS = 11	CP = 281	            Accept slit
SS = 10	CP = 282	          Accept terminal_symbol
SS = 8	CP = 282	        Accept simple_part
SS = 6	CP = 282	      Accept part
SS = 7	CP = 282	      Match  ,
SS = 7	CP = 282	      Reject ,
SS = 7	CP = 282	      Deduce part
SS = 7	CP = 282	        Predict Failed in CONDITION
SS = 7	CP = 282	        Predict Failed in CONDITION
SS = 7	CP = 282	        Predict Failed in CONDITION
SS = 9	CP = 282	        Deduce simple_part
SS = 11	CP = 282	          Deduce right_non_terminal_symbol
SS = 12	CP = 282	            Deduce non_terminal_symbol
SS = 12	CP = 282	              Match  id
SS = 12	CP = 282	              Accept id
SS = 12	CP = 283	            Accept non_terminal_symbol
SS = 11	CP = 283	          Accept right_non_terminal_symbol
SS = 9	CP = 283	        Accept simple_part
SS = 7	CP = 283	      Accept part
SS = 7	CP = 283	      Match  ,
SS = 7	CP = 283	      Reject ,
SS = 7	CP = 283	      Deduce part
SS = 7	CP = 283	        Predict Failed in CONDITION
SS = 7	CP = 283	        Predict Failed in CONDITION
SS = 7	CP = 283	        Predict Failed in CONDITION
SS = 9	CP = 283	        Deduce simple_part
SS = 9	CP = 283	          Predict Failed in CONDITION
SS = 11	CP = 283	          Deduce terminal_symbol
SS = 11	CP = 283	            Predict Failed in CONDITION
SS = 11	CP = 283	            Predict Failed in CONDITION
SS = 12	CP = 283	            Match  token
SS = 12	CP = 283	            Accept token
SS = 11	CP = 284	          Accept terminal_symbol
SS = 9	CP = 284	        Accept simple_part
SS = 7	CP = 284	      Accept part
SS = 7	CP = 284	      Match  ,
SS = 7	CP = 284	      Reject ,
SS = 7	CP = 284	      Deduce part
SS = 7	CP = 284	        Predict Failed in CONDITION
SS = 7	CP = 284	        Predict Failed in CONDITION
SS = 7	CP = 284	        Predict Failed in CONDITION
SS = 9	CP = 284	        Deduce simple_part
SS = 11	CP = 284	          Deduce right_non_terminal_symbol
SS = 12	CP = 284	            Deduce non_terminal_symbol
SS = 12	CP = 284	              Match  id
SS = 12	CP = 284	              Accept id
SS = 12	CP = 285	            Accept non_terminal_symbol
SS = 11	CP = 285	          Accept right_non_terminal_symbol
SS = 9	CP = 285	        Accept simple_part
SS = 7	CP = 285	      Accept part
SS = 7	CP = 285	      Match  ,
SS = 7	CP = 285	      Reject ,
SS = 7	CP = 285	      Deduce part
SS = 7	CP = 285	        Predict Failed in CONDITION
SS = 7	CP = 285	        Predict Failed in CONDITION
SS = 7	CP = 285	        Predict Failed in CONDITION
SS = 9	CP = 285	        Deduce simple_part
SS = 9	CP = 285	          Predict Failed in CONDITION
SS = 11	CP = 285	          Deduce terminal_symbol
SS = 12	CP = 285	            Match  slit
SS = 12	CP = 285	            Accept slit
SS = 11	CP = 286	          Accept terminal_symbol
SS = 9	CP = 286	        Accept simple_part
SS = 7	CP = 286	      Accept part
SS = 7	CP = 286	      Match  ,
SS = 7	CP = 286	      Reject ,
SS = 7	CP = 286	      Deduce part
SS = 7	CP = 286	        Predict Failed in CONDITION
SS = 7	CP = 286	        Predict Failed in CONDITION
SS = 7	CP = 286	        Predict Failed in CONDITION
SS = 9	CP = 286	        Deduce simple_part
SS = 9	CP = 286	          Predict Failed in CONDITION
SS = 11	CP = 286	          Deduce terminal_symbol
SS = 11	CP = 286	            Predict Failed in CONDITION
SS = 11	CP = 286	            Predict Failed in CONDITION
SS = 12	CP = 286	            Match  token
SS = 12	CP = 286	            Accept token
SS = 11	CP = 287	          Accept terminal_symbol
SS = 9	CP = 287	        Accept simple_part
SS = 7	CP = 287	      Accept part
SS = 7	CP = 287	      Match  ,
SS = 7	CP = 287	      Reject ,
SS = 6	CP = 287	      Predict Failed: part
SS = 5	CP = 287	    Accept term
SS = 5	CP = 287	    Match  |
SS = 5	CP = 287	    Reject |
SS = 4	CP = 287	  Accept declaration
SS = 4	CP = 287	  Deduce end_op
SS = 5	CP = 287	    Match  ;
SS = 5	CP = 287	    Accept ;
SS = 4	CP = 288	  Accept end_op
SS = 3	CP = 288	Accept statement
SS = 3	CP = 288	Deduce statement
SS = 4	CP = 288	  Deduce non_terminal_symbol
SS = 4	CP = 288	    Match  id
SS = 4	CP = 288	    Accept id
SS = 4	CP = 289	  Accept non_terminal_symbol
SS = 4	CP = 289	  Deduce assign_op
SS = 5	CP = 289	    Match  ::=
SS = 5	CP = 289	    Accept ::=
SS = 4	CP = 290	  Accept assign_op
SS = 4	CP = 290	  Deduce declaration
SS = 5	CP = 290	    Deduce term
SS = 6	CP = 290	      Deduce part
SS = 6	CP = 290	        Predict Failed in CONDITION
SS = 6	CP = 290	        Predict Failed in CONDITION
SS = 6	CP = 290	        Predict Failed in CONDITION
SS = 8	CP = 290	        Deduce simple_part
SS = 8	CP = 290	          Predict Failed in CONDITION
SS = 10	CP = 290	          Deduce terminal_symbol
SS = 11	CP = 290	            Match  slit
SS = 11	CP = 290	            Accept slit
SS = 10	CP = 291	          Accept terminal_symbol
SS = 8	CP = 291	        Accept simple_part
SS = 6	CP = 291	      Accept part
SS = 7	CP = 291	      Match  ,
SS = 7	CP = 291	      Reject ,
SS = 7	CP = 291	      Deduce part
SS = 7	CP = 291	        Predict Failed in CONDITION
SS = 7	CP = 291	        Predict Failed in CONDITION
SS = 7	CP = 291	        Predict Failed in CONDITION
SS = 9	CP = 291	        Deduce simple_part
SS = 9	CP = 291	          Predict Failed in CONDITION
SS = 11	CP = 291	          Deduce terminal_symbol
SS = 11	CP = 291	            Predict Failed in CONDITION
SS = 11	CP = 291	            Predict Failed in CONDITION
SS = 12	CP = 291	            Match  token
SS = 12	CP = 291	            Accept token
SS = 11	CP = 292	          Accept terminal_symbol
SS = 9	CP = 292	        Accept simple_part
SS = 7	CP = 292	      Accept part
SS = 7	CP = 292	      Match  ,
SS = 7	CP = 292	      Reject ,
SS = 7	CP = 292	      Deduce part
SS = 7	CP = 292	        Predict Failed in CONDITION
SS = 7	CP = 292	        Predict Failed in CONDITION
SS = 7	CP = 292	        Predict Failed in CONDITION
SS = 9	CP = 292	        Deduce simple_part
SS = 11	CP = 292	          Deduce right_non_terminal_symbol
SS = 12	CP = 292	            Deduce non_terminal_symbol
SS = 12	CP = 292	              Match  id
SS = 12	CP = 292	              Accept id
SS = 12	CP = 293	            Accept non_terminal_symbol
SS = 11	CP = 293	          Accept right_non_terminal_symbol
SS = 9	CP = 293	        Accept simple_part
SS = 7	CP = 293	      Accept part
SS = 7	CP = 293	      Match  ,
SS = 7	CP = 293	      Reject ,
SS = 7	CP = 293	      Deduce part
SS = 7	CP = 293	        Predict Failed in CONDITION
SS = 9	CP = 293	        Deduce declaration_part
SS = 9	CP = 293	          Match  (
SS = 9	CP = 293	          Accept (
SS = 10	CP = 294	          Deduce declaration
SS = 11	CP = 294	            Deduce term
SS = 12	CP = 294	              Deduce part
SS = 12	CP = 294	                Predict Failed in CONDITION
SS = 12	CP = 294	                Predict Failed in CONDITION
SS = 12	CP = 294	                Predict Failed in CONDITION
SS = 14	CP = 294	                Deduce simple_part
SS = 16	CP = 294	                  Deduce right_non_terminal_symbol
SS = 17	CP = 294	                    Deduce non_terminal_symbol
SS = 17	CP = 294	                      Match  id
SS = 17	CP = 294	                      Accept id
SS = 17	CP = 295	                    Accept non_terminal_symbol
SS = 16	CP = 295	                  Accept right_non_terminal_symbol
SS = 14	CP = 295	                Accept simple_part
SS = 12	CP = 295	              Accept part
SS = 13	CP = 295	              Match  ,
SS = 13	CP = 295	              Reject ,
SS = 12	CP = 295	              Predict Failed: part
SS = 11	CP = 295	            Accept term
SS = 11	CP = 295	            Match  |
SS = 11	CP = 295	            Accept |
SS = 12	CP = 296	            Deduce term
SS = 13	CP = 296	              Deduce part
SS = 13	CP = 296	                Predict Failed in CONDITION
SS = 13	CP = 296	                Predict Failed in CONDITION
SS = 13	CP = 296	                Predict Failed in CONDITION
SS = 15	CP = 296	                Deduce simple_part
SS = 15	CP = 296	                  Predict Failed in CONDITION
SS = 17	CP = 296	                  Deduce terminal_symbol
SS = 18	CP = 296	                    Match  slit
SS = 18	CP = 296	                    Accept slit
SS = 17	CP = 297	                  Accept terminal_symbol
SS = 15	CP = 297	                Accept simple_part
SS = 13	CP = 297	              Accept part
SS = 14	CP = 297	              Match  ,
SS = 14	CP = 297	              Reject ,
SS = 13	CP = 297	              Predict Failed: part
SS = 12	CP = 297	            Accept term
SS = 11	CP = 297	            Match  |
SS = 11	CP = 297	            Accept |
SS = 12	CP = 298	            Deduce term
SS = 13	CP = 298	              Deduce part
SS = 13	CP = 298	                Predict Failed in CONDITION
SS = 13	CP = 298	                Predict Failed in CONDITION
SS = 13	CP = 298	                Predict Failed in CONDITION
SS = 15	CP = 298	                Deduce simple_part
SS = 15	CP = 298	                  Predict Failed in CONDITION
SS = 17	CP = 298	                  Deduce terminal_symbol
SS = 17	CP = 298	                    Predict Failed in CONDITION
SS = 17	CP = 298	                    Predict Failed in CONDITION
SS = 18	CP = 298	                    Match  token
SS = 18	CP = 298	                    Accept token
SS = 17	CP = 299	                  Accept terminal_symbol
SS = 15	CP = 299	                Accept simple_part
SS = 13	CP = 299	              Accept part
SS = 14	CP = 299	              Match  ,
SS = 14	CP = 299	              Reject ,
SS = 13	CP = 299	              Predict Failed: part
SS = 12	CP = 299	            Accept term
SS = 11	CP = 299	            Match  |
SS = 11	CP = 299	            Reject |
SS = 10	CP = 299	          Accept declaration
SS = 9	CP = 299	          Match  )
SS = 9	CP = 299	          Accept )
SS = 9	CP = 300	        Accept declaration_part
SS = 7	CP = 300	      Accept part
SS = 7	CP = 300	      Match  ,
SS = 7	CP = 300	      Reject ,
SS = 6	CP = 300	      Predict Failed: part
SS = 5	CP = 300	    Accept term
SS = 5	CP = 300	    Match  |
SS = 5	CP = 300	    Reject |
SS = 4	CP = 300	  Accept declaration
SS = 4	CP = 300	  Deduce end_op
SS = 5	CP = 300	    Match  ;
SS = 5	CP = 300	    Accept ;
SS = 4	CP = 301	  Accept end_op
SS = 3	CP = 301	Accept statement
SS = 3	CP = 301	Deduce statement
SS = 4	CP = 301	  Deduce non_terminal_symbol
SS = 4	CP = 301	    Match  id
SS = 4	CP = 301	    Accept id
SS = 4	CP = 302	  Accept non_terminal_symbol
SS = 4	CP = 302	  Deduce assign_op
SS = 5	CP = 302	    Match  ::=
SS = 5	CP = 302	    Accept ::=
SS = 4	CP = 303	  Accept assign_op
SS = 4	CP = 303	  Deduce declaration
SS = 5	CP = 303	    Deduce term
SS = 6	CP = 303	      Deduce part
SS = 6	CP = 303	        Predict Failed in CONDITION
SS = 6	CP = 303	        Predict Failed in CONDITION
SS = 6	CP = 303	        Predict Failed in CONDITION
SS = 8	CP = 303	        Deduce simple_part
SS = 8	CP = 303	          Predict Failed in CONDITION
SS = 10	CP = 303	          Deduce terminal_symbol
SS = 11	CP = 303	            Match  slit
SS = 11	CP = 303	            Accept slit
SS = 10	CP = 304	          Accept terminal_symbol
SS = 8	CP = 304	        Accept simple_part
SS = 6	CP = 304	      Accept part
SS = 7	CP = 304	      Match  ,
SS = 7	CP = 304	      Reject ,
SS = 7	CP = 304	      Deduce part
SS = 7	CP = 304	        Predict Failed in CONDITION
SS = 7	CP = 304	        Predict Failed in CONDITION
SS = 7	CP = 304	        Predict Failed in CONDITION
SS = 9	CP = 304	        Deduce simple_part
SS = 11	CP = 304	          Deduce right_non_terminal_symbol
SS = 12	CP = 304	            Deduce non_terminal_symbol
SS = 12	CP = 304	              Match  id
SS = 12	CP = 304	              Accept id
SS = 12	CP = 305	            Accept non_terminal_symbol
SS = 11	CP = 305	          Accept right_non_terminal_symbol
SS = 9	CP = 305	        Accept simple_part
SS = 7	CP = 305	      Accept part
SS = 7	CP = 305	      Match  ,
SS = 7	CP = 305	      Reject ,
SS = 7	CP = 305	      Deduce part
SS = 7	CP = 305	        Predict Failed in CONDITION
SS = 7	CP = 305	        Predict Failed in CONDITION
SS = 7	CP = 305	        Predict Failed in CONDITION
SS = 9	CP = 305	        Deduce simple_part
SS = 9	CP = 305	          Predict Failed in CONDITION
SS = 11	CP = 305	          Deduce terminal_symbol
SS = 11	CP = 305	            Predict Failed in CONDITION
SS = 11	CP = 305	            Predict Failed in CONDITION
SS = 12	CP = 305	            Match  token
SS = 12	CP = 305	            Accept token
SS = 11	CP = 306	          Accept terminal_symbol
SS = 9	CP = 306	        Accept simple_part
SS = 7	CP = 306	      Accept part
SS = 7	CP = 306	      Match  ,
SS = 7	CP = 306	      Reject ,
SS = 6	CP = 306	      Predict Failed: part
SS = 5	CP = 306	    Accept term
SS = 5	CP = 306	    Match  |
SS = 5	CP = 306	    Reject |
SS = 4	CP = 306	  Accept declaration
SS = 4	CP = 306	  Deduce end_op
SS = 5	CP = 306	    Match  ;
SS = 5	CP = 306	    Accept ;
SS = 4	CP = 307	  Accept end_op
SS = 3	CP = 307	Accept statement
SS = 3	CP = 307	Deduce statement
SS = 4	CP = 307	  Deduce non_terminal_symbol
SS = 4	CP = 307	    Match  id
SS = 4	CP = 307	    Accept id
SS = 4	CP = 308	  Accept non_terminal_symbol
SS = 4	CP = 308	  Deduce assign_op
SS = 5	CP = 308	    Match  ::=
SS = 5	CP = 308	    Accept ::=
SS = 4	CP = 309	  Accept assign_op
SS = 4	CP = 309	  Deduce declaration
SS = 5	CP = 309	    Deduce term
SS = 6	CP = 309	      Deduce part
SS = 6	CP = 309	        Predict Failed in CONDITION
SS = 6	CP = 309	        Predict Failed in CONDITION
SS = 6	CP = 309	        Predict Failed in CONDITION
SS = 8	CP = 309	        Deduce simple_part
SS = 8	CP = 309	          Predict Failed in CONDITION
SS = 10	CP = 309	          Deduce terminal_symbol
SS = 11	CP = 309	            Match  slit
SS = 11	CP = 309	            Accept slit
SS = 10	CP = 310	          Accept terminal_symbol
SS = 8	CP = 310	        Accept simple_part
SS = 6	CP = 310	      Accept part
SS = 7	CP = 310	      Match  ,
SS = 7	CP = 310	      Reject ,
SS = 7	CP = 310	      Deduce part
SS = 7	CP = 310	        Predict Failed in CONDITION
SS = 7	CP = 310	        Predict Failed in CONDITION
SS = 9	CP = 310	        Deduce alternative_part
SS = 9	CP = 310	          Match  [
SS = 9	CP = 310	          Accept [
SS = 10	CP = 311	          Deduce declaration
SS = 11	CP = 311	            Deduce term
SS = 12	CP = 311	              Deduce part
SS = 12	CP = 311	                Predict Failed in CONDITION
SS = 12	CP = 311	                Predict Failed in CONDITION
SS = 12	CP = 311	                Predict Failed in CONDITION
SS = 14	CP = 311	                Deduce simple_part
SS = 16	CP = 311	                  Deduce right_non_terminal_symbol
SS = 17	CP = 311	                    Deduce non_terminal_symbol
SS = 17	CP = 311	                      Match  id
SS = 17	CP = 311	                      Accept id
SS = 17	CP = 312	                    Accept non_terminal_symbol
SS = 16	CP = 312	                  Accept right_non_terminal_symbol
SS = 14	CP = 312	                Accept simple_part
SS = 12	CP = 312	              Accept part
SS = 13	CP = 312	              Match  ,
SS = 13	CP = 312	              Reject ,
SS = 12	CP = 312	              Predict Failed: part
SS = 11	CP = 312	            Accept term
SS = 11	CP = 312	            Match  |
SS = 11	CP = 312	            Reject |
SS = 10	CP = 312	          Accept declaration
SS = 9	CP = 312	          Match  ]
SS = 9	CP = 312	          Accept ]
SS = 9	CP = 313	        Accept alternative_part
SS = 7	CP = 313	      Accept part
SS = 7	CP = 313	      Match  ,
SS = 7	CP = 313	      Reject ,
SS = 7	CP = 313	      Deduce part
SS = 7	CP = 313	        Predict Failed in CONDITION
SS = 9	CP = 313	        Deduce declaration_part
SS = 9	CP = 313	          Match  (
SS = 9	CP = 313	          Accept (
SS = 10	CP = 314	          Deduce declaration
SS = 11	CP = 314	            Deduce term
SS = 12	CP = 314	              Deduce part
SS = 12	CP = 314	                Predict Failed in CONDITION
SS = 12	CP = 314	                Predict Failed in CONDITION
SS = 12	CP = 314	                Predict Failed in CONDITION
SS = 14	CP = 314	                Deduce simple_part
SS = 14	CP = 314	                  Predict Failed in CONDITION
SS = 16	CP = 314	                  Deduce terminal_symbol
SS = 17	CP = 314	                    Match  slit
SS = 17	CP = 314	                    Accept slit
SS = 16	CP = 315	                  Accept terminal_symbol
SS = 14	CP = 315	                Accept simple_part
SS = 12	CP = 315	              Accept part
SS = 13	CP = 315	              Match  ,
SS = 13	CP = 315	              Reject ,
SS = 12	CP = 315	              Predict Failed: part
SS = 11	CP = 315	            Accept term
SS = 11	CP = 315	            Match  |
SS = 11	CP = 315	            Accept |
SS = 12	CP = 316	            Deduce term
SS = 13	CP = 316	              Deduce part
SS = 13	CP = 316	                Predict Failed in CONDITION
SS = 13	CP = 316	                Predict Failed in CONDITION
SS = 13	CP = 316	                Predict Failed in CONDITION
SS = 15	CP = 316	                Deduce simple_part
SS = 15	CP = 316	                  Predict Failed in CONDITION
SS = 17	CP = 316	                  Deduce terminal_symbol
SS = 18	CP = 316	                    Match  slit
SS = 18	CP = 316	                    Accept slit
SS = 17	CP = 317	                  Accept terminal_symbol
SS = 15	CP = 317	                Accept simple_part
SS = 13	CP = 317	              Accept part
SS = 14	CP = 317	              Match  ,
SS = 14	CP = 317	              Reject ,
SS = 13	CP = 317	              Predict Failed: part
SS = 12	CP = 317	            Accept term
SS = 11	CP = 317	            Match  |
SS = 11	CP = 317	            Reject |
SS = 10	CP = 317	          Accept declaration
SS = 9	CP = 317	          Match  )
SS = 9	CP = 317	          Accept )
SS = 9	CP = 318	        Accept declaration_part
SS = 7	CP = 318	      Accept part
SS = 7	CP = 318	      Match  ,
SS = 7	CP = 318	      Reject ,
SS = 7	CP = 318	      Deduce part
SS = 7	CP = 318	        Predict Failed in CONDITION
SS = 7	CP = 318	        Predict Failed in CONDITION
SS = 9	CP = 318	        Deduce alternative_part
SS = 9	CP = 318	          Match  [
SS = 9	CP = 318	          Accept [
SS = 10	CP = 319	          Deduce declaration
SS = 11	CP = 319	            Deduce term
SS = 12	CP = 319	              Deduce part
SS = 12	CP = 319	                Predict Failed in CONDITION
SS = 12	CP = 319	                Predict Failed in CONDITION
SS = 12	CP = 319	                Predict Failed in CONDITION
SS = 14	CP = 319	                Deduce simple_part
SS = 16	CP = 319	                  Deduce right_non_terminal_symbol
SS = 17	CP = 319	                    Deduce non_terminal_symbol
SS = 17	CP = 319	                      Match  id
SS = 17	CP = 319	                      Accept id
SS = 17	CP = 320	                    Accept non_terminal_symbol
SS = 16	CP = 320	                  Accept right_non_terminal_symbol
SS = 14	CP = 320	                Accept simple_part
SS = 12	CP = 320	              Accept part
SS = 13	CP = 320	              Match  ,
SS = 13	CP = 320	              Reject ,
SS = 12	CP = 320	              Predict Failed: part
SS = 11	CP = 320	            Accept term
SS = 11	CP = 320	            Match  |
SS = 11	CP = 320	            Reject |
SS = 10	CP = 320	          Accept declaration
SS = 9	CP = 320	          Match  ]
SS = 9	CP = 320	          Accept ]
SS = 9	CP = 321	        Accept alternative_part
SS = 7	CP = 321	      Accept part
SS = 7	CP = 321	      Match  ,
SS = 7	CP = 321	      Reject ,
SS = 7	CP = 321	      Deduce part
SS = 7	CP = 321	        Predict Failed in CONDITION
SS = 9	CP = 321	        Deduce declaration_part
SS = 9	CP = 321	          Match  (
SS = 9	CP = 321	          Accept (
SS = 10	CP = 322	          Deduce declaration
SS = 11	CP = 322	            Deduce term
SS = 12	CP = 322	              Deduce part
SS = 12	CP = 322	                Predict Failed in CONDITION
SS = 12	CP = 322	                Predict Failed in CONDITION
SS = 12	CP = 322	                Predict Failed in CONDITION
SS = 14	CP = 322	                Deduce simple_part
SS = 14	CP = 322	                  Predict Failed in CONDITION
SS = 16	CP = 322	                  Deduce terminal_symbol
SS = 17	CP = 322	                    Match  slit
SS = 17	CP = 322	                    Accept slit
SS = 16	CP = 323	                  Accept terminal_symbol
SS = 14	CP = 323	                Accept simple_part
SS = 12	CP = 323	              Accept part
SS = 13	CP = 323	              Match  ,
SS = 13	CP = 323	              Reject ,
SS = 12	CP = 323	              Predict Failed: part
SS = 11	CP = 323	            Accept term
SS = 11	CP = 323	            Match  |
SS = 11	CP = 323	            Accept |
SS = 12	CP = 324	            Deduce term
SS = 13	CP = 324	              Deduce part
SS = 13	CP = 324	                Predict Failed in CONDITION
SS = 13	CP = 324	                Predict Failed in CONDITION
SS = 13	CP = 324	                Predict Failed in CONDITION
SS = 15	CP = 324	                Deduce simple_part
SS = 15	CP = 324	                  Predict Failed in CONDITION
SS = 17	CP = 324	                  Deduce terminal_symbol
SS = 18	CP = 324	                    Match  slit
SS = 18	CP = 324	                    Accept slit
SS = 17	CP = 325	                  Accept terminal_symbol
SS = 15	CP = 325	                Accept simple_part
SS = 13	CP = 325	              Accept part
SS = 14	CP = 325	              Match  ,
SS = 14	CP = 325	              Reject ,
SS = 13	CP = 325	              Predict Failed: part
SS = 12	CP = 325	            Accept term
SS = 11	CP = 325	            Match  |
SS = 11	CP = 325	            Reject |
SS = 10	CP = 325	          Accept declaration
SS = 9	CP = 325	          Match  )
SS = 9	CP = 325	          Accept )
SS = 9	CP = 326	        Accept declaration_part
SS = 7	CP = 326	      Accept part
SS = 7	CP = 326	      Match  ,
SS = 7	CP = 326	      Reject ,
SS = 7	CP = 326	      Deduce part
SS = 7	CP = 326	        Predict Failed in CONDITION
SS = 7	CP = 326	        Predict Failed in CONDITION
SS = 9	CP = 326	        Deduce alternative_part
SS = 9	CP = 326	          Match  [
SS = 9	CP = 326	          Accept [
SS = 10	CP = 327	          Deduce declaration
SS = 11	CP = 327	            Deduce term
SS = 12	CP = 327	              Deduce part
SS = 12	CP = 327	                Predict Failed in CONDITION
SS = 12	CP = 327	                Predict Failed in CONDITION
SS = 12	CP = 327	                Predict Failed in CONDITION
SS = 14	CP = 327	                Deduce simple_part
SS = 16	CP = 327	                  Deduce right_non_terminal_symbol
SS = 17	CP = 327	                    Deduce non_terminal_symbol
SS = 17	CP = 327	                      Match  id
SS = 17	CP = 327	                      Accept id
SS = 17	CP = 328	                    Accept non_terminal_symbol
SS = 16	CP = 328	                  Accept right_non_terminal_symbol
SS = 14	CP = 328	                Accept simple_part
SS = 12	CP = 328	              Accept part
SS = 13	CP = 328	              Match  ,
SS = 13	CP = 328	              Reject ,
SS = 12	CP = 328	              Predict Failed: part
SS = 11	CP = 328	            Accept term
SS = 11	CP = 328	            Match  |
SS = 11	CP = 328	            Reject |
SS = 10	CP = 328	          Accept declaration
SS = 9	CP = 328	          Match  ]
SS = 9	CP = 328	          Accept ]
SS = 9	CP = 329	        Accept alternative_part
SS = 7	CP = 329	      Accept part
SS = 7	CP = 329	      Match  ,
SS = 7	CP = 329	      Reject ,
SS = 7	CP = 329	      Deduce part
SS = 7	CP = 329	        Predict Failed in CONDITION
SS = 7	CP = 329	        Predict Failed in CONDITION
SS = 7	CP = 329	        Predict Failed in CONDITION
SS = 9	CP = 329	        Deduce simple_part
SS = 11	CP = 329	          Deduce right_non_terminal_symbol
SS = 12	CP = 329	            Deduce non_terminal_symbol
SS = 12	CP = 329	              Match  id
SS = 12	CP = 329	              Accept id
SS = 12	CP = 330	            Accept non_terminal_symbol
SS = 11	CP = 330	          Accept right_non_terminal_symbol
SS = 9	CP = 330	        Accept simple_part
SS = 7	CP = 330	      Accept part
SS = 7	CP = 330	      Match  ,
SS = 7	CP = 330	      Reject ,
SS = 6	CP = 330	      Predict Failed: part
SS = 5	CP = 330	    Accept term
SS = 5	CP = 330	    Match  |
SS = 5	CP = 330	    Reject |
SS = 4	CP = 330	  Accept declaration
SS = 4	CP = 330	  Deduce end_op
SS = 5	CP = 330	    Match  ;
SS = 5	CP = 330	    Accept ;
SS = 4	CP = 331	  Accept end_op
SS = 3	CP = 331	Accept statement
SS = 3	CP = 331	Deduce statement
SS = 4	CP = 331	  Deduce non_terminal_symbol
SS = 4	CP = 331	    Match  id
SS = 4	CP = 331	    Accept id
SS = 4	CP = 332	  Accept non_terminal_symbol
SS = 4	CP = 332	  Deduce assign_op
SS = 5	CP = 332	    Match  ::=
SS = 5	CP = 332	    Accept ::=
SS = 4	CP = 333	  Accept assign_op
SS = 4	CP = 333	  Deduce declaration
SS = 5	CP = 333	    Deduce term
SS = 6	CP = 333	      Deduce part
SS = 6	CP = 333	        Predict Failed in CONDITION
SS = 6	CP = 333	        Predict Failed in CONDITION
SS = 6	CP = 333	        Predict Failed in CONDITION
SS = 8	CP = 333	        Deduce simple_part
SS = 8	CP = 333	          Predict Failed in CONDITION
SS = 10	CP = 333	          Deduce terminal_symbol
SS = 11	CP = 333	            Match  slit
SS = 11	CP = 333	            Accept slit
SS = 10	CP = 334	          Accept terminal_symbol
SS = 8	CP = 334	        Accept simple_part
SS = 6	CP = 334	      Accept part
SS = 7	CP = 334	      Match  ,
SS = 7	CP = 334	      Reject ,
SS = 7	CP = 334	      Deduce part
SS = 7	CP = 334	        Predict Failed in CONDITION
SS = 7	CP = 334	        Predict Failed in CONDITION
SS = 7	CP = 334	        Predict Failed in CONDITION
SS = 9	CP = 334	        Deduce simple_part
SS = 9	CP = 334	          Predict Failed in CONDITION
SS = 11	CP = 334	          Deduce terminal_symbol
SS = 11	CP = 334	            Predict Failed in CONDITION
SS = 11	CP = 334	            Predict Failed in CONDITION
SS = 12	CP = 334	            Match  token
SS = 12	CP = 334	            Accept token
SS = 11	CP = 335	          Accept terminal_symbol
SS = 9	CP = 335	        Accept simple_part
SS = 7	CP = 335	      Accept part
SS = 7	CP = 335	      Match  ,
SS = 7	CP = 335	      Reject ,
SS = 7	CP = 335	      Deduce part
SS = 7	CP = 335	        Predict Failed in CONDITION
SS = 7	CP = 335	        Predict Failed in CONDITION
SS = 7	CP = 335	        Predict Failed in CONDITION
SS = 9	CP = 335	        Deduce simple_part
SS = 9	CP = 335	          Predict Failed in CONDITION
SS = 11	CP = 335	          Deduce terminal_symbol
SS = 12	CP = 335	            Match  slit
SS = 12	CP = 335	            Accept slit
SS = 11	CP = 336	          Accept terminal_symbol
SS = 9	CP = 336	        Accept simple_part
SS = 7	CP = 336	      Accept part
SS = 7	CP = 336	      Match  ,
SS = 7	CP = 336	      Reject ,
SS = 7	CP = 336	      Deduce part
SS = 7	CP = 336	        Predict Failed in CONDITION
SS = 7	CP = 336	        Predict Failed in CONDITION
SS = 7	CP = 336	        Predict Failed in CONDITION
SS = 9	CP = 336	        Deduce simple_part
SS = 11	CP = 336	          Deduce right_non_terminal_symbol
SS = 12	CP = 336	            Deduce non_terminal_symbol
SS = 12	CP = 336	              Match  id
SS = 12	CP = 336	              Accept id
SS = 12	CP = 337	            Accept non_terminal_symbol
SS = 11	CP = 337	          Accept right_non_terminal_symbol
SS = 9	CP = 337	        Accept simple_part
SS = 7	CP = 337	      Accept part
SS = 7	CP = 337	      Match  ,
SS = 7	CP = 337	      Reject ,
SS = 7	CP = 337	      Deduce part
SS = 7	CP = 337	        Predict Failed in CONDITION
SS = 7	CP = 337	        Predict Failed in CONDITION
SS = 7	CP = 337	        Predict Failed in CONDITION
SS = 9	CP = 337	        Deduce simple_part
SS = 11	CP = 337	          Deduce right_non_terminal_symbol
SS = 12	CP = 337	            Deduce non_terminal_symbol
SS = 12	CP = 337	              Match  id
SS = 12	CP = 337	              Accept id
SS = 12	CP = 338	            Accept non_terminal_symbol
SS = 11	CP = 338	          Accept right_non_terminal_symbol
SS = 9	CP = 338	        Accept simple_part
SS = 7	CP = 338	      Accept part
SS = 7	CP = 338	      Match  ,
SS = 7	CP = 338	      Reject ,
SS = 6	CP = 338	      Predict Failed: part
SS = 5	CP = 338	    Accept term
SS = 5	CP = 338	    Match  |
SS = 5	CP = 338	    Reject |
SS = 4	CP = 338	  Accept declaration
SS = 4	CP = 338	  Deduce end_op
SS = 5	CP = 338	    Match  ;
SS = 5	CP = 338	    Accept ;
SS = 4	CP = 339	  Accept end_op
SS = 3	CP = 339	Accept statement
SS = 3	CP = 339	Deduce statement
SS = 4	CP = 339	  Deduce non_terminal_symbol
SS = 4	CP = 339	    Match  id
SS = 4	CP = 339	    Accept id
SS = 4	CP = 340	  Accept non_terminal_symbol
SS = 4	CP = 340	  Deduce assign_op
SS = 5	CP = 340	    Match  ::=
SS = 5	CP = 340	    Accept ::=
SS = 4	CP = 341	  Accept assign_op
SS = 4	CP = 341	  Deduce declaration
SS = 5	CP = 341	    Deduce term
SS = 6	CP = 341	      Deduce part
SS = 6	CP = 341	        Predict Failed in CONDITION
SS = 8	CP = 341	        Deduce declaration_part
SS = 8	CP = 341	          Match  (
SS = 8	CP = 341	          Accept (
SS = 9	CP = 342	          Deduce declaration
SS = 10	CP = 342	            Deduce term
SS = 11	CP = 342	              Deduce part
SS = 11	CP = 342	                Predict Failed in CONDITION
SS = 11	CP = 342	                Predict Failed in CONDITION
SS = 11	CP = 342	                Predict Failed in CONDITION
SS = 13	CP = 342	                Deduce simple_part
SS = 13	CP = 342	                  Predict Failed in CONDITION
SS = 15	CP = 342	                  Deduce terminal_symbol
SS = 16	CP = 342	                    Match  slit
SS = 16	CP = 342	                    Accept slit
SS = 15	CP = 343	                  Accept terminal_symbol
SS = 13	CP = 343	                Accept simple_part
SS = 11	CP = 343	              Accept part
SS = 12	CP = 343	              Match  ,
SS = 12	CP = 343	              Reject ,
SS = 12	CP = 343	              Deduce part
SS = 12	CP = 343	                Predict Failed in CONDITION
SS = 12	CP = 343	                Predict Failed in CONDITION
SS = 12	CP = 343	                Predict Failed in CONDITION
SS = 14	CP = 343	                Deduce simple_part
SS = 16	CP = 343	                  Deduce right_non_terminal_symbol
SS = 17	CP = 343	                    Deduce non_terminal_symbol
SS = 17	CP = 343	                      Match  id
SS = 17	CP = 343	                      Accept id
SS = 17	CP = 344	                    Accept non_terminal_symbol
SS = 16	CP = 344	                  Accept right_non_terminal_symbol
SS = 14	CP = 344	                Accept simple_part
SS = 12	CP = 344	              Accept part
SS = 12	CP = 344	              Match  ,
SS = 12	CP = 344	              Reject ,
SS = 12	CP = 344	              Deduce part
SS = 12	CP = 344	                Predict Failed in CONDITION
SS = 12	CP = 344	                Predict Failed in CONDITION
SS = 12	CP = 344	                Predict Failed in CONDITION
SS = 14	CP = 344	                Deduce simple_part
SS = 16	CP = 344	                  Deduce right_non_terminal_symbol
SS = 17	CP = 344	                    Deduce non_terminal_symbol
SS = 17	CP = 344	                      Match  id
SS = 17	CP = 344	                      Accept id
SS = 17	CP = 345	                    Accept non_terminal_symbol
SS = 16	CP = 345	                  Accept right_non_terminal_symbol
SS = 14	CP = 345	                Accept simple_part
SS = 12	CP = 345	              Accept part
SS = 12	CP = 345	              Match  ,
SS = 12	CP = 345	              Reject ,
SS = 11	CP = 345	              Predict Failed: part
SS = 10	CP = 345	            Accept term
SS = 10	CP = 345	            Match  |
SS = 10	CP = 345	            Accept |
SS = 11	CP = 346	            Deduce term
SS = 12	CP = 346	              Deduce part
SS = 12	CP = 346	                Predict Failed in CONDITION
SS = 12	CP = 346	                Predict Failed in CONDITION
SS = 12	CP = 346	                Predict Failed in CONDITION
SS = 14	CP = 346	                Deduce simple_part
SS = 14	CP = 346	                  Predict Failed in CONDITION
SS = 16	CP = 346	                  Deduce terminal_symbol
SS = 16	CP = 346	                    Predict Failed in CONDITION
SS = 16	CP = 346	                    Predict Failed in CONDITION
SS = 17	CP = 346	                    Match  token
SS = 17	CP = 346	                    Accept token
SS = 16	CP = 347	                  Accept terminal_symbol
SS = 14	CP = 347	                Accept simple_part
SS = 12	CP = 347	              Accept part
SS = 13	CP = 347	              Match  ,
SS = 13	CP = 347	              Reject ,
SS = 13	CP = 347	              Deduce part
SS = 13	CP = 347	                Predict Failed in CONDITION
SS = 13	CP = 347	                Predict Failed in CONDITION
SS = 13	CP = 347	                Predict Failed in CONDITION
SS = 15	CP = 347	                Deduce simple_part
SS = 17	CP = 347	                  Deduce right_non_terminal_symbol
SS = 18	CP = 347	                    Deduce non_terminal_symbol
SS = 18	CP = 347	                      Match  id
SS = 18	CP = 347	                      Accept id
SS = 18	CP = 348	                    Accept non_terminal_symbol
SS = 17	CP = 348	                  Accept right_non_terminal_symbol
SS = 15	CP = 348	                Accept simple_part
SS = 13	CP = 348	              Accept part
SS = 13	CP = 348	              Match  ,
SS = 13	CP = 348	              Reject ,
SS = 13	CP = 348	              Deduce part
SS = 13	CP = 348	                Predict Failed in CONDITION
SS = 13	CP = 348	                Predict Failed in CONDITION
SS = 13	CP = 348	                Predict Failed in CONDITION
SS = 15	CP = 348	                Deduce simple_part
SS = 15	CP = 348	                  Predict Failed in CONDITION
SS = 17	CP = 348	                  Deduce terminal_symbol
SS = 18	CP = 348	                    Match  slit
SS = 18	CP = 348	                    Accept slit
SS = 17	CP = 349	                  Accept terminal_symbol
SS = 15	CP = 349	                Accept simple_part
SS = 13	CP = 349	              Accept part
SS = 13	CP = 349	              Match  ,
SS = 13	CP = 349	              Reject ,
SS = 13	CP = 349	              Deduce part
SS = 13	CP = 349	                Predict Failed in CONDITION
SS = 13	CP = 349	                Predict Failed in CONDITION
SS = 13	CP = 349	                Predict Failed in CONDITION
SS = 15	CP = 349	                Deduce simple_part
SS = 15	CP = 349	                  Predict Failed in CONDITION
SS = 17	CP = 349	                  Deduce terminal_symbol
SS = 17	CP = 349	                    Predict Failed in CONDITION
SS = 17	CP = 349	                    Predict Failed in CONDITION
SS = 18	CP = 349	                    Match  token
SS = 18	CP = 349	                    Accept token
SS = 17	CP = 350	                  Accept terminal_symbol
SS = 15	CP = 350	                Accept simple_part
SS = 13	CP = 350	              Accept part
SS = 13	CP = 350	              Match  ,
SS = 13	CP = 350	              Reject ,
SS = 12	CP = 350	              Predict Failed: part
SS = 11	CP = 350	            Accept term
SS = 10	CP = 350	            Match  |
SS = 10	CP = 350	            Reject |
SS = 9	CP = 350	          Accept declaration
SS = 8	CP = 350	          Match  )
SS = 8	CP = 350	          Accept )
SS = 8	CP = 351	        Accept declaration_part
SS = 6	CP = 351	      Accept part
SS = 7	CP = 351	      Match  ,
SS = 7	CP = 351	      Reject ,
SS = 6	CP = 351	      Predict Failed: part
SS = 5	CP = 351	    Accept term
SS = 5	CP = 351	    Match  |
SS = 5	CP = 351	    Reject |
SS = 4	CP = 351	  Accept declaration
SS = 4	CP = 351	  Deduce end_op
SS = 5	CP = 351	    Match  ;
SS = 5	CP = 351	    Accept ;
SS = 4	CP = 352	  Accept end_op
SS = 3	CP = 352	Accept statement
SS = 3	CP = 352	Deduce statement
SS = 4	CP = 352	  Deduce non_terminal_symbol
SS = 4	CP = 352	    Match  id
SS = 4	CP = 352	    Accept id
SS = 4	CP = 353	  Accept non_terminal_symbol
SS = 4	CP = 353	  Deduce assign_op
SS = 5	CP = 353	    Match  ::=
SS = 5	CP = 353	    Accept ::=
SS = 4	CP = 354	  Accept assign_op
SS = 4	CP = 354	  Deduce declaration
SS = 5	CP = 354	    Deduce term
SS = 6	CP = 354	      Deduce part
SS = 6	CP = 354	        Predict Failed in CONDITION
SS = 6	CP = 354	        Predict Failed in CONDITION
SS = 6	CP = 354	        Predict Failed in CONDITION
SS = 8	CP = 354	        Deduce simple_part
SS = 8	CP = 354	          Predict Failed in CONDITION
SS = 10	CP = 354	          Deduce terminal_symbol
SS = 11	CP = 354	            Match  slit
SS = 11	CP = 354	            Accept slit
SS = 10	CP = 355	          Accept terminal_symbol
SS = 8	CP = 355	        Accept simple_part
SS = 6	CP = 355	      Accept part
SS = 7	CP = 355	      Match  ,
SS = 7	CP = 355	      Reject ,
SS = 7	CP = 355	      Deduce part
SS = 7	CP = 355	        Predict Failed in CONDITION
SS = 7	CP = 355	        Predict Failed in CONDITION
SS = 7	CP = 355	        Predict Failed in CONDITION
SS = 9	CP = 355	        Deduce simple_part
SS = 9	CP = 355	          Predict Failed in CONDITION
SS = 11	CP = 355	          Deduce terminal_symbol
SS = 11	CP = 355	            Predict Failed in CONDITION
SS = 11	CP = 355	            Predict Failed in CONDITION
SS = 12	CP = 355	            Match  token
SS = 12	CP = 355	            Accept token
SS = 11	CP = 356	          Accept terminal_symbol
SS = 9	CP = 356	        Accept simple_part
SS = 7	CP = 356	      Accept part
SS = 7	CP = 356	      Match  ,
SS = 7	CP = 356	      Reject ,
SS = 7	CP = 356	      Deduce part
SS = 7	CP = 356	        Predict Failed in CONDITION
SS = 7	CP = 356	        Predict Failed in CONDITION
SS = 7	CP = 356	        Predict Failed in CONDITION
SS = 9	CP = 356	        Deduce simple_part
SS = 9	CP = 356	          Predict Failed in CONDITION
SS = 11	CP = 356	          Deduce terminal_symbol
SS = 12	CP = 356	            Match  slit
SS = 12	CP = 356	            Accept slit
SS = 11	CP = 357	          Accept terminal_symbol
SS = 9	CP = 357	        Accept simple_part
SS = 7	CP = 357	      Accept part
SS = 7	CP = 357	      Match  ,
SS = 7	CP = 357	      Reject ,
SS = 7	CP = 357	      Deduce part
SS = 7	CP = 357	        Predict Failed in CONDITION
SS = 7	CP = 357	        Predict Failed in CONDITION
SS = 9	CP = 357	        Deduce alternative_part
SS = 9	CP = 357	          Match  [
SS = 9	CP = 357	          Accept [
SS = 10	CP = 358	          Deduce declaration
SS = 11	CP = 358	            Deduce term
SS = 12	CP = 358	              Deduce part
SS = 12	CP = 358	                Predict Failed in CONDITION
SS = 12	CP = 358	                Predict Failed in CONDITION
SS = 12	CP = 358	                Predict Failed in CONDITION
SS = 14	CP = 358	                Deduce simple_part
SS = 16	CP = 358	                  Deduce right_non_terminal_symbol
SS = 17	CP = 358	                    Deduce non_terminal_symbol
SS = 17	CP = 358	                      Match  id
SS = 17	CP = 358	                      Accept id
SS = 17	CP = 359	                    Accept non_terminal_symbol
SS = 16	CP = 359	                  Accept right_non_terminal_symbol
SS = 14	CP = 359	                Accept simple_part
SS = 12	CP = 359	              Accept part
SS = 13	CP = 359	              Match  ,
SS = 13	CP = 359	              Reject ,
SS = 12	CP = 359	              Predict Failed: part
SS = 11	CP = 359	            Accept term
SS = 11	CP = 359	            Match  |
SS = 11	CP = 359	            Reject |
SS = 10	CP = 359	          Accept declaration
SS = 9	CP = 359	          Match  ]
SS = 9	CP = 359	          Accept ]
SS = 9	CP = 360	        Accept alternative_part
SS = 7	CP = 360	      Accept part
SS = 7	CP = 360	      Match  ,
SS = 7	CP = 360	      Reject ,
SS = 7	CP = 360	      Deduce part
SS = 7	CP = 360	        Predict Failed in CONDITION
SS = 7	CP = 360	        Predict Failed in CONDITION
SS = 7	CP = 360	        Predict Failed in CONDITION
SS = 9	CP = 360	        Deduce simple_part
SS = 9	CP = 360	          Predict Failed in CONDITION
SS = 11	CP = 360	          Deduce terminal_symbol
SS = 12	CP = 360	            Match  slit
SS = 12	CP = 360	            Accept slit
SS = 11	CP = 361	          Accept terminal_symbol
SS = 9	CP = 361	        Accept simple_part
SS = 7	CP = 361	      Accept part
SS = 7	CP = 361	      Match  ,
SS = 7	CP = 361	      Reject ,
SS = 7	CP = 361	      Deduce part
SS = 7	CP = 361	        Predict Failed in CONDITION
SS = 7	CP = 361	        Predict Failed in CONDITION
SS = 9	CP = 361	        Deduce alternative_part
SS = 9	CP = 361	          Match  [
SS = 9	CP = 361	          Accept [
SS = 10	CP = 362	          Deduce declaration
SS = 11	CP = 362	            Deduce term
SS = 12	CP = 362	              Deduce part
SS = 12	CP = 362	                Predict Failed in CONDITION
SS = 12	CP = 362	                Predict Failed in CONDITION
SS = 12	CP = 362	                Predict Failed in CONDITION
SS = 14	CP = 362	                Deduce simple_part
SS = 14	CP = 362	                  Predict Failed in CONDITION
SS = 16	CP = 362	                  Deduce terminal_symbol
SS = 17	CP = 362	                    Match  slit
SS = 17	CP = 362	                    Accept slit
SS = 16	CP = 363	                  Accept terminal_symbol
SS = 14	CP = 363	                Accept simple_part
SS = 12	CP = 363	              Accept part
SS = 13	CP = 363	              Match  ,
SS = 13	CP = 363	              Reject ,
SS = 12	CP = 363	              Predict Failed: part
SS = 11	CP = 363	            Accept term
SS = 11	CP = 363	            Match  |
SS = 11	CP = 363	            Reject |
SS = 10	CP = 363	          Accept declaration
SS = 9	CP = 363	          Match  ]
SS = 9	CP = 363	          Accept ]
SS = 9	CP = 364	        Accept alternative_part
SS = 7	CP = 364	      Accept part
SS = 7	CP = 364	      Match  ,
SS = 7	CP = 364	      Reject ,
SS = 7	CP = 364	      Deduce part
SS = 7	CP = 364	        Predict Failed in CONDITION
SS = 7	CP = 364	        Predict Failed in CONDITION
SS = 7	CP = 364	        Predict Failed in CONDITION
SS = 9	CP = 364	        Deduce simple_part
SS = 11	CP = 364	          Deduce right_non_terminal_symbol
SS = 12	CP = 364	            Deduce non_terminal_symbol
SS = 12	CP = 364	              Match  id
SS = 12	CP = 364	              Accept id
SS = 12	CP = 365	            Accept non_terminal_symbol
SS = 11	CP = 365	          Accept right_non_terminal_symbol
SS = 9	CP = 365	        Accept simple_part
SS = 7	CP = 365	      Accept part
SS = 7	CP = 365	      Match  ,
SS = 7	CP = 365	      Reject ,
SS = 6	CP = 365	      Predict Failed: part
SS = 5	CP = 365	    Accept term
SS = 5	CP = 365	    Match  |
SS = 5	CP = 365	    Reject |
SS = 4	CP = 365	  Accept declaration
SS = 4	CP = 365	  Deduce end_op
SS = 5	CP = 365	    Match  ;
SS = 5	CP = 365	    Accept ;
SS = 4	CP = 366	  Accept end_op
SS = 3	CP = 366	Accept statement
SS = 3	CP = 366	Deduce statement
SS = 4	CP = 366	  Deduce non_terminal_symbol
SS = 4	CP = 366	    Match  id
SS = 4	CP = 366	    Accept id
SS = 4	CP = 367	  Accept non_terminal_symbol
SS = 4	CP = 367	  Deduce assign_op
SS = 5	CP = 367	    Match  ::=
SS = 5	CP = 367	    Accept ::=
SS = 4	CP = 368	  Accept assign_op
SS = 4	CP = 368	  Deduce declaration
SS = 5	CP = 368	    Deduce term
SS = 6	CP = 368	      Deduce part
SS = 6	CP = 368	        Predict Failed in CONDITION
SS = 8	CP = 368	        Deduce declaration_part
SS = 8	CP = 368	          Match  (
SS = 8	CP = 368	          Accept (
SS = 9	CP = 369	          Deduce declaration
SS = 10	CP = 369	            Deduce term
SS = 11	CP = 369	              Deduce part
SS = 11	CP = 369	                Predict Failed in CONDITION
SS = 11	CP = 369	                Predict Failed in CONDITION
SS = 11	CP = 369	                Predict Failed in CONDITION
SS = 13	CP = 369	                Deduce simple_part
SS = 13	CP = 369	                  Predict Failed in CONDITION
SS = 15	CP = 369	                  Deduce terminal_symbol
SS = 16	CP = 369	                    Match  slit
SS = 16	CP = 369	                    Accept slit
SS = 15	CP = 370	                  Accept terminal_symbol
SS = 13	CP = 370	                Accept simple_part
SS = 11	CP = 370	              Accept part
SS = 12	CP = 370	              Match  ,
SS = 12	CP = 370	              Reject ,
SS = 12	CP = 370	              Deduce part
SS = 12	CP = 370	                Predict Failed in CONDITION
SS = 12	CP = 370	                Predict Failed in CONDITION
SS = 12	CP = 370	                Predict Failed in CONDITION
SS = 14	CP = 370	                Deduce simple_part
SS = 16	CP = 370	                  Deduce right_non_terminal_symbol
SS = 17	CP = 370	                    Deduce non_terminal_symbol
SS = 17	CP = 370	                      Match  id
SS = 17	CP = 370	                      Accept id
SS = 17	CP = 371	                    Accept non_terminal_symbol
SS = 16	CP = 371	                  Accept right_non_terminal_symbol
SS = 14	CP = 371	                Accept simple_part
SS = 12	CP = 371	              Accept part
SS = 12	CP = 371	              Match  ,
SS = 12	CP = 371	              Reject ,
SS = 12	CP = 371	              Deduce part
SS = 12	CP = 371	                Predict Failed in CONDITION
SS = 12	CP = 371	                Predict Failed in CONDITION
SS = 12	CP = 371	                Predict Failed in CONDITION
SS = 14	CP = 371	                Deduce simple_part
SS = 14	CP = 371	                  Predict Failed in CONDITION
SS = 16	CP = 371	                  Deduce terminal_symbol
SS = 17	CP = 371	                    Match  slit
SS = 17	CP = 371	                    Accept slit
SS = 16	CP = 372	                  Accept terminal_symbol
SS = 14	CP = 372	                Accept simple_part
SS = 12	CP = 372	              Accept part
SS = 12	CP = 372	              Match  ,
SS = 12	CP = 372	              Reject ,
SS = 11	CP = 372	              Predict Failed: part
SS = 10	CP = 372	            Accept term
SS = 10	CP = 372	            Match  |
SS = 10	CP = 372	            Accept |
SS = 11	CP = 373	            Deduce term
SS = 12	CP = 373	              Deduce part
SS = 12	CP = 373	                Predict Failed in CONDITION
SS = 12	CP = 373	                Predict Failed in CONDITION
SS = 12	CP = 373	                Predict Failed in CONDITION
SS = 14	CP = 373	                Deduce simple_part
SS = 14	CP = 373	                  Predict Failed in CONDITION
SS = 16	CP = 373	                  Deduce terminal_symbol
SS = 16	CP = 373	                    Predict Failed in CONDITION
SS = 16	CP = 373	                    Predict Failed in CONDITION
SS = 17	CP = 373	                    Match  token
SS = 17	CP = 373	                    Accept token
SS = 16	CP = 374	                  Accept terminal_symbol
SS = 14	CP = 374	                Accept simple_part
SS = 12	CP = 374	              Accept part
SS = 13	CP = 374	              Match  ,
SS = 13	CP = 374	              Reject ,
SS = 13	CP = 374	              Deduce part
SS = 13	CP = 374	                Predict Failed in CONDITION
SS = 13	CP = 374	                Predict Failed in CONDITION
SS = 13	CP = 374	                Predict Failed in CONDITION
SS = 15	CP = 374	                Deduce simple_part
SS = 17	CP = 374	                  Deduce right_non_terminal_symbol
SS = 18	CP = 374	                    Deduce non_terminal_symbol
SS = 18	CP = 374	                      Match  id
SS = 18	CP = 374	                      Accept id
SS = 18	CP = 375	                    Accept non_terminal_symbol
SS = 17	CP = 375	                  Accept right_non_terminal_symbol
SS = 15	CP = 375	                Accept simple_part
SS = 13	CP = 375	              Accept part
SS = 13	CP = 375	              Match  ,
SS = 13	CP = 375	              Reject ,
SS = 13	CP = 375	              Deduce part
SS = 13	CP = 375	                Predict Failed in CONDITION
SS = 13	CP = 375	                Predict Failed in CONDITION
SS = 13	CP = 375	                Predict Failed in CONDITION
SS = 15	CP = 375	                Deduce simple_part
SS = 15	CP = 375	                  Predict Failed in CONDITION
SS = 17	CP = 375	                  Deduce terminal_symbol
SS = 18	CP = 375	                    Match  slit
SS = 18	CP = 375	                    Accept slit
SS = 17	CP = 376	                  Accept terminal_symbol
SS = 15	CP = 376	                Accept simple_part
SS = 13	CP = 376	              Accept part
SS = 13	CP = 376	              Match  ,
SS = 13	CP = 376	              Reject ,
SS = 13	CP = 376	              Deduce part
SS = 13	CP = 376	                Predict Failed in CONDITION
SS = 13	CP = 376	                Predict Failed in CONDITION
SS = 13	CP = 376	                Predict Failed in CONDITION
SS = 15	CP = 376	                Deduce simple_part
SS = 15	CP = 376	                  Predict Failed in CONDITION
SS = 17	CP = 376	                  Deduce terminal_symbol
SS = 17	CP = 376	                    Predict Failed in CONDITION
SS = 17	CP = 376	                    Predict Failed in CONDITION
SS = 18	CP = 376	                    Match  token
SS = 18	CP = 376	                    Accept token
SS = 17	CP = 377	                  Accept terminal_symbol
SS = 15	CP = 377	                Accept simple_part
SS = 13	CP = 377	              Accept part
SS = 13	CP = 377	              Match  ,
SS = 13	CP = 377	              Reject ,
SS = 12	CP = 377	              Predict Failed: part
SS = 11	CP = 377	            Accept term
SS = 10	CP = 377	            Match  |
SS = 10	CP = 377	            Reject |
SS = 9	CP = 377	          Accept declaration
SS = 8	CP = 377	          Match  )
SS = 8	CP = 377	          Accept )
SS = 8	CP = 378	        Accept declaration_part
SS = 6	CP = 378	      Accept part
SS = 7	CP = 378	      Match  ,
SS = 7	CP = 378	      Reject ,
SS = 6	CP = 378	      Predict Failed: part
SS = 5	CP = 378	    Accept term
SS = 5	CP = 378	    Match  |
SS = 5	CP = 378	    Reject |
SS = 4	CP = 378	  Accept declaration
SS = 4	CP = 378	  Deduce end_op
SS = 5	CP = 378	    Match  ;
SS = 5	CP = 378	    Accept ;
SS = 4	CP = 379	  Accept end_op
SS = 3	CP = 379	Accept statement
SS = 3	CP = 379	Deduce statement
SS = 4	CP = 379	  Deduce non_terminal_symbol
SS = 4	CP = 379	    Match  id
SS = 4	CP = 379	    Accept id
SS = 4	CP = 380	  Accept non_terminal_symbol
SS = 4	CP = 380	  Deduce assign_op
SS = 5	CP = 380	    Match  ::=
SS = 5	CP = 380	    Accept ::=
SS = 4	CP = 381	  Accept assign_op
SS = 4	CP = 381	  Deduce declaration
SS = 5	CP = 381	    Deduce term
SS = 6	CP = 381	      Deduce part
SS = 6	CP = 381	        Predict Failed in CONDITION
SS = 6	CP = 381	        Predict Failed in CONDITION
SS = 6	CP = 381	        Predict Failed in CONDITION
SS = 8	CP = 381	        Deduce simple_part
SS = 8	CP = 381	          Predict Failed in CONDITION
SS = 10	CP = 381	          Deduce terminal_symbol
SS = 11	CP = 381	            Match  slit
SS = 11	CP = 381	            Accept slit
SS = 10	CP = 382	          Accept terminal_symbol
SS = 8	CP = 382	        Accept simple_part
SS = 6	CP = 382	      Accept part
SS = 7	CP = 382	      Match  ,
SS = 7	CP = 382	      Reject ,
SS = 7	CP = 382	      Deduce part
SS = 7	CP = 382	        Predict Failed in CONDITION
SS = 7	CP = 382	        Predict Failed in CONDITION
SS = 9	CP = 382	        Deduce alternative_part
SS = 9	CP = 382	          Match  [
SS = 9	CP = 382	          Accept [
SS = 10	CP = 383	          Deduce declaration
SS = 11	CP = 383	            Deduce term
SS = 12	CP = 383	              Deduce part
SS = 12	CP = 383	                Predict Failed in CONDITION
SS = 12	CP = 383	                Predict Failed in CONDITION
SS = 12	CP = 383	                Predict Failed in CONDITION
SS = 14	CP = 383	                Deduce simple_part
SS = 16	CP = 383	                  Deduce right_non_terminal_symbol
SS = 17	CP = 383	                    Deduce non_terminal_symbol
SS = 17	CP = 383	                      Match  id
SS = 17	CP = 383	                      Accept id
SS = 17	CP = 384	                    Accept non_terminal_symbol
SS = 16	CP = 384	                  Accept right_non_terminal_symbol
SS = 14	CP = 384	                Accept simple_part
SS = 12	CP = 384	              Accept part
SS = 13	CP = 384	              Match  ,
SS = 13	CP = 384	              Reject ,
SS = 12	CP = 384	              Predict Failed: part
SS = 11	CP = 384	            Accept term
SS = 11	CP = 384	            Match  |
SS = 11	CP = 384	            Reject |
SS = 10	CP = 384	          Accept declaration
SS = 9	CP = 384	          Match  ]
SS = 9	CP = 384	          Accept ]
SS = 9	CP = 385	        Accept alternative_part
SS = 7	CP = 385	      Accept part
SS = 7	CP = 385	      Match  ,
SS = 7	CP = 385	      Reject ,
SS = 7	CP = 385	      Deduce part
SS = 7	CP = 385	        Predict Failed in CONDITION
SS = 7	CP = 385	        Predict Failed in CONDITION
SS = 7	CP = 385	        Predict Failed in CONDITION
SS = 9	CP = 385	        Deduce simple_part
SS = 11	CP = 385	          Deduce right_non_terminal_symbol
SS = 12	CP = 385	            Deduce non_terminal_symbol
SS = 12	CP = 385	              Match  id
SS = 12	CP = 385	              Accept id
SS = 12	CP = 386	            Accept non_terminal_symbol
SS = 11	CP = 386	          Accept right_non_terminal_symbol
SS = 9	CP = 386	        Accept simple_part
SS = 7	CP = 386	      Accept part
SS = 7	CP = 386	      Match  ,
SS = 7	CP = 386	      Reject ,
SS = 6	CP = 386	      Predict Failed: part
SS = 5	CP = 386	    Accept term
SS = 5	CP = 386	    Match  |
SS = 5	CP = 386	    Reject |
SS = 4	CP = 386	  Accept declaration
SS = 4	CP = 386	  Deduce end_op
SS = 5	CP = 386	    Match  ;
SS = 5	CP = 386	    Accept ;
SS = 4	CP = 387	  Accept end_op
SS = 3	CP = 387	Accept statement
SS = 3	CP = 387	Deduce statement
SS = 4	CP = 387	  Deduce non_terminal_symbol
SS = 4	CP = 387	    Match  id
SS = 4	CP = 387	    Accept id
SS = 4	CP = 388	  Accept non_terminal_symbol
SS = 4	CP = 388	  Deduce assign_op
SS = 5	CP = 388	    Match  ::=
SS = 5	CP = 388	    Accept ::=
SS = 4	CP = 389	  Accept assign_op
SS = 4	CP = 389	  Deduce declaration
SS = 5	CP = 389	    Deduce term
SS = 6	CP = 389	      Deduce part
SS = 6	CP = 389	        Predict Failed in CONDITION
SS = 6	CP = 389	        Predict Failed in CONDITION
SS = 6	CP = 389	        Predict Failed in CONDITION
SS = 8	CP = 389	        Deduce simple_part
SS = 8	CP = 389	          Predict Failed in CONDITION
SS = 10	CP = 389	          Deduce terminal_symbol
SS = 11	CP = 389	            Match  slit
SS = 11	CP = 389	            Accept slit
SS = 10	CP = 390	          Accept terminal_symbol
SS = 8	CP = 390	        Accept simple_part
SS = 6	CP = 390	      Accept part
SS = 7	CP = 390	      Match  ,
SS = 7	CP = 390	      Reject ,
SS = 7	CP = 390	      Deduce part
SS = 7	CP = 390	        Predict Failed in CONDITION
SS = 7	CP = 390	        Predict Failed in CONDITION
SS = 7	CP = 390	        Predict Failed in CONDITION
SS = 9	CP = 390	        Deduce simple_part
SS = 9	CP = 390	          Predict Failed in CONDITION
SS = 11	CP = 390	          Deduce terminal_symbol
SS = 11	CP = 390	            Predict Failed in CONDITION
SS = 11	CP = 390	            Predict Failed in CONDITION
SS = 12	CP = 390	            Match  token
SS = 12	CP = 390	            Accept token
SS = 11	CP = 391	          Accept terminal_symbol
SS = 9	CP = 391	        Accept simple_part
SS = 7	CP = 391	      Accept part
SS = 7	CP = 391	      Match  ,
SS = 7	CP = 391	      Reject ,
SS = 7	CP = 391	      Deduce part
SS = 7	CP = 391	        Predict Failed in CONDITION
SS = 7	CP = 391	        Predict Failed in CONDITION
SS = 7	CP = 391	        Predict Failed in CONDITION
SS = 9	CP = 391	        Deduce simple_part
SS = 11	CP = 391	          Deduce right_non_terminal_symbol
SS = 12	CP = 391	            Deduce non_terminal_symbol
SS = 12	CP = 391	              Match  id
SS = 12	CP = 391	              Accept id
SS = 12	CP = 392	            Accept non_terminal_symbol
SS = 11	CP = 392	          Accept right_non_terminal_symbol
SS = 9	CP = 392	        Accept simple_part
SS = 7	CP = 392	      Accept part
SS = 7	CP = 392	      Match  ,
SS = 7	CP = 392	      Reject ,
SS = 7	CP = 392	      Deduce part
SS = 9	CP = 392	        Deduce repeat_part
SS = 9	CP = 392	          Match  {
SS = 9	CP = 392	          Accept {
SS = 10	CP = 393	          Deduce declaration
SS = 11	CP = 393	            Deduce term
SS = 12	CP = 393	              Deduce part
SS = 12	CP = 393	                Predict Failed in CONDITION
SS = 12	CP = 393	                Predict Failed in CONDITION
SS = 12	CP = 393	                Predict Failed in CONDITION
SS = 14	CP = 393	                Deduce simple_part
SS = 16	CP = 393	                  Deduce right_non_terminal_symbol
SS = 17	CP = 393	                    Deduce non_terminal_symbol
SS = 17	CP = 393	                      Match  id
SS = 17	CP = 393	                      Accept id
SS = 17	CP = 394	                    Accept non_terminal_symbol
SS = 16	CP = 394	                  Accept right_non_terminal_symbol
SS = 14	CP = 394	                Accept simple_part
SS = 12	CP = 394	              Accept part
SS = 13	CP = 394	              Match  ,
SS = 13	CP = 394	              Reject ,
SS = 13	CP = 394	              Deduce part
SS = 13	CP = 394	                Predict Failed in CONDITION
SS = 13	CP = 394	                Predict Failed in CONDITION
SS = 13	CP = 394	                Predict Failed in CONDITION
SS = 15	CP = 394	                Deduce simple_part
SS = 17	CP = 394	                  Deduce right_non_terminal_symbol
SS = 18	CP = 394	                    Deduce non_terminal_symbol
SS = 18	CP = 394	                      Match  id
SS = 18	CP = 394	                      Accept id
SS = 18	CP = 395	                    Accept non_terminal_symbol
SS = 17	CP = 395	                  Accept right_non_terminal_symbol
SS = 15	CP = 395	                Accept simple_part
SS = 13	CP = 395	              Accept part
SS = 13	CP = 395	              Match  ,
SS = 13	CP = 395	              Reject ,
SS = 12	CP = 395	              Predict Failed: part
SS = 11	CP = 395	            Accept term
SS = 11	CP = 395	            Match  |
SS = 11	CP = 395	            Reject |
SS = 10	CP = 395	          Accept declaration
SS = 9	CP = 395	          Match  }
SS = 9	CP = 395	          Accept }
SS = 9	CP = 396	        Accept repeat_part
SS = 7	CP = 396	      Accept part
SS = 7	CP = 396	      Match  ,
SS = 7	CP = 396	      Reject ,
SS = 7	CP = 396	      Deduce part
SS = 7	CP = 396	        Predict Failed in CONDITION
SS = 7	CP = 396	        Predict Failed in CONDITION
SS = 7	CP = 396	        Predict Failed in CONDITION
SS = 9	CP = 396	        Deduce simple_part
SS = 9	CP = 396	          Predict Failed in CONDITION
SS = 11	CP = 396	          Deduce terminal_symbol
SS = 12	CP = 396	            Match  slit
SS = 12	CP = 396	            Accept slit
SS = 11	CP = 397	          Accept terminal_symbol
SS = 9	CP = 397	        Accept simple_part
SS = 7	CP = 397	      Accept part
SS = 7	CP = 397	      Match  ,
SS = 7	CP = 397	      Reject ,
SS = 7	CP = 397	      Deduce part
SS = 7	CP = 397	        Predict Failed in CONDITION
SS = 7	CP = 397	        Predict Failed in CONDITION
SS = 7	CP = 397	        Predict Failed in CONDITION
SS = 9	CP = 397	        Deduce simple_part
SS = 9	CP = 397	          Predict Failed in CONDITION
SS = 11	CP = 397	          Deduce terminal_symbol
SS = 11	CP = 397	            Predict Failed in CONDITION
SS = 11	CP = 397	            Predict Failed in CONDITION
SS = 12	CP = 397	            Match  token
SS = 12	CP = 397	            Accept token
SS = 11	CP = 398	          Accept terminal_symbol
SS = 9	CP = 398	        Accept simple_part
SS = 7	CP = 398	      Accept part
SS = 7	CP = 398	      Match  ,
SS = 7	CP = 398	      Reject ,
SS = 6	CP = 398	      Predict Failed: part
SS = 5	CP = 398	    Accept term
SS = 5	CP = 398	    Match  |
SS = 5	CP = 398	    Reject |
SS = 4	CP = 398	  Accept declaration
SS = 4	CP = 398	  Deduce end_op
SS = 5	CP = 398	    Match  ;
SS = 5	CP = 398	    Accept ;
SS = 4	CP = 399	  Accept end_op
SS = 3	CP = 399	Accept statement
SS = 3	CP = 399	Deduce statement
SS = 4	CP = 399	  Deduce non_terminal_symbol
SS = 4	CP = 399	    Match  id
SS = 4	CP = 399	    Accept id
SS = 4	CP = 400	  Accept non_terminal_symbol
SS = 4	CP = 400	  Deduce assign_op
SS = 5	CP = 400	    Match  ::=
SS = 5	CP = 400	    Accept ::=
SS = 4	CP = 401	  Accept assign_op
SS = 4	CP = 401	  Deduce declaration
SS = 5	CP = 401	    Deduce term
SS = 6	CP = 401	      Deduce part
SS = 6	CP = 401	        Predict Failed in CONDITION
SS = 6	CP = 401	        Predict Failed in CONDITION
SS = 6	CP = 401	        Predict Failed in CONDITION
SS = 8	CP = 401	        Deduce simple_part
SS = 8	CP = 401	          Predict Failed in CONDITION
SS = 10	CP = 401	          Deduce terminal_symbol
SS = 11	CP = 401	            Match  slit
SS = 11	CP = 401	            Accept slit
SS = 10	CP = 402	          Accept terminal_symbol
SS = 8	CP = 402	        Accept simple_part
SS = 6	CP = 402	      Accept part
SS = 7	CP = 402	      Match  ,
SS = 7	CP = 402	      Reject ,
SS = 7	CP = 402	      Deduce part
SS = 7	CP = 402	        Predict Failed in CONDITION
SS = 7	CP = 402	        Predict Failed in CONDITION
SS = 7	CP = 402	        Predict Failed in CONDITION
SS = 9	CP = 402	        Deduce simple_part
SS = 9	CP = 402	          Predict Failed in CONDITION
SS = 11	CP = 402	          Deduce terminal_symbol
SS = 11	CP = 402	            Predict Failed in CONDITION
SS = 11	CP = 402	            Predict Failed in CONDITION
SS = 12	CP = 402	            Match  token
SS = 12	CP = 402	            Accept token
SS = 11	CP = 403	          Accept terminal_symbol
SS = 9	CP = 403	        Accept simple_part
SS = 7	CP = 403	      Accept part
SS = 7	CP = 403	      Match  ,
SS = 7	CP = 403	      Reject ,
SS = 7	CP = 403	      Deduce part
SS = 7	CP = 403	        Predict Failed in CONDITION
SS = 7	CP = 403	        Predict Failed in CONDITION
SS = 9	CP = 403	        Deduce alternative_part
SS = 9	CP = 403	          Match  [
SS = 9	CP = 403	          Accept [
SS = 10	CP = 404	          Deduce declaration
SS = 11	CP = 404	            Deduce term
SS = 12	CP = 404	              Deduce part
SS = 12	CP = 404	                Predict Failed in CONDITION
SS = 12	CP = 404	                Predict Failed in CONDITION
SS = 12	CP = 404	                Predict Failed in CONDITION
SS = 14	CP = 404	                Deduce simple_part
SS = 14	CP = 404	                  Predict Failed in CONDITION
SS = 16	CP = 404	                  Deduce terminal_symbol
SS = 17	CP = 404	                    Match  slit
SS = 17	CP = 404	                    Accept slit
SS = 16	CP = 405	                  Accept terminal_symbol
SS = 14	CP = 405	                Accept simple_part
SS = 12	CP = 405	              Accept part
SS = 13	CP = 405	              Match  ,
SS = 13	CP = 405	              Reject ,
SS = 13	CP = 405	              Deduce part
SS = 13	CP = 405	                Predict Failed in CONDITION
SS = 13	CP = 405	                Predict Failed in CONDITION
SS = 13	CP = 405	                Predict Failed in CONDITION
SS = 15	CP = 405	                Deduce simple_part
SS = 17	CP = 405	                  Deduce right_non_terminal_symbol
SS = 18	CP = 405	                    Deduce non_terminal_symbol
SS = 18	CP = 405	                      Match  id
SS = 18	CP = 405	                      Accept id
SS = 18	CP = 406	                    Accept non_terminal_symbol
SS = 17	CP = 406	                  Accept right_non_terminal_symbol
SS = 15	CP = 406	                Accept simple_part
SS = 13	CP = 406	              Accept part
SS = 13	CP = 406	              Match  ,
SS = 13	CP = 406	              Reject ,
SS = 12	CP = 406	              Predict Failed: part
SS = 11	CP = 406	            Accept term
SS = 11	CP = 406	            Match  |
SS = 11	CP = 406	            Reject |
SS = 10	CP = 406	          Accept declaration
SS = 9	CP = 406	          Match  ]
SS = 9	CP = 406	          Accept ]
SS = 9	CP = 407	        Accept alternative_part
SS = 7	CP = 407	      Accept part
SS = 7	CP = 407	      Match  ,
SS = 7	CP = 407	      Reject ,
SS = 7	CP = 407	      Deduce part
SS = 7	CP = 407	        Predict Failed in CONDITION
SS = 7	CP = 407	        Predict Failed in CONDITION
SS = 7	CP = 407	        Predict Failed in CONDITION
SS = 9	CP = 407	        Deduce simple_part
SS = 9	CP = 407	          Predict Failed in CONDITION
SS = 11	CP = 407	          Deduce terminal_symbol
SS = 11	CP = 407	            Predict Failed in CONDITION
SS = 11	CP = 407	            Predict Failed in CONDITION
SS = 12	CP = 407	            Match  token
SS = 12	CP = 407	            Accept token
SS = 11	CP = 408	          Accept terminal_symbol
SS = 9	CP = 408	        Accept simple_part
SS = 7	CP = 408	      Accept part
SS = 7	CP = 408	      Match  ,
SS = 7	CP = 408	      Reject ,
SS = 6	CP = 408	      Predict Failed: part
SS = 5	CP = 408	    Accept term
SS = 5	CP = 408	    Match  |
SS = 5	CP = 408	    Reject |
SS = 4	CP = 408	  Accept declaration
SS = 4	CP = 408	  Deduce end_op
SS = 5	CP = 408	    Match  ;
SS = 5	CP = 408	    Accept ;
SS = 4	CP = 409	  Accept end_op
SS = 3	CP = 409	Accept statement
SS = 3	CP = 409	Deduce statement
SS = 4	CP = 409	  Deduce non_terminal_symbol
SS = 4	CP = 409	    Match  id
SS = 4	CP = 409	    Accept id
SS = 4	CP = 410	  Accept non_terminal_symbol
SS = 4	CP = 410	  Deduce assign_op
SS = 5	CP = 410	    Match  ::=
SS = 5	CP = 410	    Accept ::=
SS = 4	CP = 411	  Accept assign_op
SS = 4	CP = 411	  Deduce declaration
SS = 5	CP = 411	    Deduce term
SS = 6	CP = 411	      Deduce part
SS = 6	CP = 411	        Predict Failed in CONDITION
SS = 6	CP = 411	        Predict Failed in CONDITION
SS = 6	CP = 411	        Predict Failed in CONDITION
SS = 8	CP = 411	        Deduce simple_part
SS = 8	CP = 411	          Predict Failed in CONDITION
SS = 10	CP = 411	          Deduce terminal_symbol
SS = 11	CP = 411	            Match  slit
SS = 11	CP = 411	            Accept slit
SS = 10	CP = 412	          Accept terminal_symbol
SS = 8	CP = 412	        Accept simple_part
SS = 6	CP = 412	      Accept part
SS = 7	CP = 412	      Match  ,
SS = 7	CP = 412	      Reject ,
SS = 7	CP = 412	      Deduce part
SS = 7	CP = 412	        Predict Failed in CONDITION
SS = 7	CP = 412	        Predict Failed in CONDITION
SS = 9	CP = 412	        Deduce alternative_part
SS = 9	CP = 412	          Match  [
SS = 9	CP = 412	          Accept [
SS = 10	CP = 413	          Deduce declaration
SS = 11	CP = 413	            Deduce term
SS = 12	CP = 413	              Deduce part
SS = 12	CP = 413	                Predict Failed in CONDITION
SS = 12	CP = 413	                Predict Failed in CONDITION
SS = 12	CP = 413	                Predict Failed in CONDITION
SS = 14	CP = 413	                Deduce simple_part
SS = 16	CP = 413	                  Deduce right_non_terminal_symbol
SS = 17	CP = 413	                    Deduce non_terminal_symbol
SS = 17	CP = 413	                      Match  id
SS = 17	CP = 413	                      Accept id
SS = 17	CP = 414	                    Accept non_terminal_symbol
SS = 16	CP = 414	                  Accept right_non_terminal_symbol
SS = 14	CP = 414	                Accept simple_part
SS = 12	CP = 414	              Accept part
SS = 13	CP = 414	              Match  ,
SS = 13	CP = 414	              Reject ,
SS = 12	CP = 414	              Predict Failed: part
SS = 11	CP = 414	            Accept term
SS = 11	CP = 414	            Match  |
SS = 11	CP = 414	            Reject |
SS = 10	CP = 414	          Accept declaration
SS = 9	CP = 414	          Match  ]
SS = 9	CP = 414	          Accept ]
SS = 9	CP = 415	        Accept alternative_part
SS = 7	CP = 415	      Accept part
SS = 7	CP = 415	      Match  ,
SS = 7	CP = 415	      Reject ,
SS = 7	CP = 415	      Deduce part
SS = 7	CP = 415	        Predict Failed in CONDITION
SS = 7	CP = 415	        Predict Failed in CONDITION
SS = 7	CP = 415	        Predict Failed in CONDITION
SS = 9	CP = 415	        Deduce simple_part
SS = 11	CP = 415	          Deduce right_non_terminal_symbol
SS = 12	CP = 415	            Deduce non_terminal_symbol
SS = 12	CP = 415	              Match  id
SS = 12	CP = 415	              Accept id
SS = 12	CP = 416	            Accept non_terminal_symbol
SS = 11	CP = 416	          Accept right_non_terminal_symbol
SS = 9	CP = 416	        Accept simple_part
SS = 7	CP = 416	      Accept part
SS = 7	CP = 416	      Match  ,
SS = 7	CP = 416	      Reject ,
SS = 6	CP = 416	      Predict Failed: part
SS = 5	CP = 416	    Accept term
SS = 5	CP = 416	    Match  |
SS = 5	CP = 416	    Reject |
SS = 4	CP = 416	  Accept declaration
SS = 4	CP = 416	  Deduce end_op
SS = 5	CP = 416	    Match  ;
SS = 5	CP = 416	    Accept ;
SS = 4	CP = 417	  Accept end_op
SS = 3	CP = 417	Accept statement
SS = 3	CP = 417	Deduce statement
SS = 4	CP = 417	  Deduce non_terminal_symbol
SS = 4	CP = 417	    Match  id
SS = 4	CP = 417	    Accept id
SS = 4	CP = 418	  Accept non_terminal_symbol
SS = 4	CP = 418	  Deduce assign_op
SS = 5	CP = 418	    Match  ::=
SS = 5	CP = 418	    Accept ::=
SS = 4	CP = 419	  Accept assign_op
SS = 4	CP = 419	  Deduce declaration
SS = 5	CP = 419	    Deduce term
SS = 6	CP = 419	      Deduce part
SS = 6	CP = 419	        Predict Failed in CONDITION
SS = 8	CP = 419	        Deduce declaration_part
SS = 8	CP = 419	          Match  (
SS = 8	CP = 419	          Accept (
SS = 9	CP = 420	          Deduce declaration
SS = 10	CP = 420	            Deduce term
SS = 11	CP = 420	              Deduce part
SS = 11	CP = 420	                Predict Failed in CONDITION
SS = 11	CP = 420	                Predict Failed in CONDITION
SS = 11	CP = 420	                Predict Failed in CONDITION
SS = 13	CP = 420	                Deduce simple_part
SS = 13	CP = 420	                  Predict Failed in CONDITION
SS = 15	CP = 420	                  Deduce terminal_symbol
SS = 16	CP = 420	                    Match  slit
SS = 16	CP = 420	                    Accept slit
SS = 15	CP = 421	                  Accept terminal_symbol
SS = 13	CP = 421	                Accept simple_part
SS = 11	CP = 421	              Accept part
SS = 12	CP = 421	              Match  ,
SS = 12	CP = 421	              Reject ,
SS = 11	CP = 421	              Predict Failed: part
SS = 10	CP = 421	            Accept term
SS = 10	CP = 421	            Match  |
SS = 10	CP = 421	            Accept |
SS = 11	CP = 422	            Deduce term
SS = 12	CP = 422	              Deduce part
SS = 12	CP = 422	                Predict Failed in CONDITION
SS = 12	CP = 422	                Predict Failed in CONDITION
SS = 12	CP = 422	                Predict Failed in CONDITION
SS = 14	CP = 422	                Deduce simple_part
SS = 14	CP = 422	                  Predict Failed in CONDITION
SS = 16	CP = 422	                  Deduce terminal_symbol
SS = 17	CP = 422	                    Match  slit
SS = 17	CP = 422	                    Accept slit
SS = 16	CP = 423	                  Accept terminal_symbol
SS = 14	CP = 423	                Accept simple_part
SS = 12	CP = 423	              Accept part
SS = 13	CP = 423	              Match  ,
SS = 13	CP = 423	              Reject ,
SS = 12	CP = 423	              Predict Failed: part
SS = 11	CP = 423	            Accept term
SS = 10	CP = 423	            Match  |
SS = 10	CP = 423	            Reject |
SS = 9	CP = 423	          Accept declaration
SS = 8	CP = 423	          Match  )
SS = 8	CP = 423	          Accept )
SS = 8	CP = 424	        Accept declaration_part
SS = 6	CP = 424	      Accept part
SS = 7	CP = 424	      Match  ,
SS = 7	CP = 424	      Reject ,
SS = 7	CP = 424	      Deduce part
SS = 7	CP = 424	        Predict Failed in CONDITION
SS = 7	CP = 424	        Predict Failed in CONDITION
SS = 7	CP = 424	        Predict Failed in CONDITION
SS = 9	CP = 424	        Deduce simple_part
SS = 9	CP = 424	          Predict Failed in CONDITION
SS = 11	CP = 424	          Deduce terminal_symbol
SS = 11	CP = 424	            Predict Failed in CONDITION
SS = 11	CP = 424	            Predict Failed in CONDITION
SS = 12	CP = 424	            Match  token
SS = 12	CP = 424	            Accept token
SS = 11	CP = 425	          Accept terminal_symbol
SS = 9	CP = 425	        Accept simple_part
SS = 7	CP = 425	      Accept part
SS = 7	CP = 425	      Match  ,
SS = 7	CP = 425	      Reject ,
SS = 7	CP = 425	      Deduce part
SS = 7	CP = 425	        Predict Failed in CONDITION
SS = 7	CP = 425	        Predict Failed in CONDITION
SS = 9	CP = 425	        Deduce alternative_part
SS = 9	CP = 425	          Match  [
SS = 9	CP = 425	          Accept [
SS = 10	CP = 426	          Deduce declaration
SS = 11	CP = 426	            Deduce term
SS = 12	CP = 426	              Deduce part
SS = 12	CP = 426	                Predict Failed in CONDITION
SS = 12	CP = 426	                Predict Failed in CONDITION
SS = 12	CP = 426	                Predict Failed in CONDITION
SS = 14	CP = 426	                Deduce simple_part
SS = 14	CP = 426	                  Predict Failed in CONDITION
SS = 16	CP = 426	                  Deduce terminal_symbol
SS = 17	CP = 426	                    Match  slit
SS = 17	CP = 426	                    Accept slit
SS = 16	CP = 427	                  Accept terminal_symbol
SS = 14	CP = 427	                Accept simple_part
SS = 12	CP = 427	              Accept part
SS = 13	CP = 427	              Match  ,
SS = 13	CP = 427	              Reject ,
SS = 13	CP = 427	              Deduce part
SS = 13	CP = 427	                Predict Failed in CONDITION
SS = 13	CP = 427	                Predict Failed in CONDITION
SS = 13	CP = 427	                Predict Failed in CONDITION
SS = 15	CP = 427	                Deduce simple_part
SS = 17	CP = 427	                  Deduce right_non_terminal_symbol
SS = 18	CP = 427	                    Deduce non_terminal_symbol
SS = 18	CP = 427	                      Match  id
SS = 18	CP = 427	                      Accept id
SS = 18	CP = 428	                    Accept non_terminal_symbol
SS = 17	CP = 428	                  Accept right_non_terminal_symbol
SS = 15	CP = 428	                Accept simple_part
SS = 13	CP = 428	              Accept part
SS = 13	CP = 428	              Match  ,
SS = 13	CP = 428	              Reject ,
SS = 12	CP = 428	              Predict Failed: part
SS = 11	CP = 428	            Accept term
SS = 11	CP = 428	            Match  |
SS = 11	CP = 428	            Reject |
SS = 10	CP = 428	          Accept declaration
SS = 9	CP = 428	          Match  ]
SS = 9	CP = 428	          Accept ]
SS = 9	CP = 429	        Accept alternative_part
SS = 7	CP = 429	      Accept part
SS = 7	CP = 429	      Match  ,
SS = 7	CP = 429	      Reject ,
SS = 7	CP = 429	      Deduce part
SS = 7	CP = 429	        Predict Failed in CONDITION
SS = 7	CP = 429	        Predict Failed in CONDITION
SS = 7	CP = 429	        Predict Failed in CONDITION
SS = 9	CP = 429	        Deduce simple_part
SS = 9	CP = 429	          Predict Failed in CONDITION
SS = 11	CP = 429	          Deduce terminal_symbol
SS = 11	CP = 429	            Predict Failed in CONDITION
SS = 11	CP = 429	            Predict Failed in CONDITION
SS = 12	CP = 429	            Match  token
SS = 12	CP = 429	            Accept token
SS = 11	CP = 430	          Accept terminal_symbol
SS = 9	CP = 430	        Accept simple_part
SS = 7	CP = 430	      Accept part
SS = 7	CP = 430	      Match  ,
SS = 7	CP = 430	      Reject ,
SS = 7	CP = 430	      Deduce part
SS = 7	CP = 430	        Predict Failed in CONDITION
SS = 7	CP = 430	        Predict Failed in CONDITION
SS = 7	CP = 430	        Predict Failed in CONDITION
SS = 9	CP = 430	        Deduce simple_part
SS = 11	CP = 430	          Deduce right_non_terminal_symbol
SS = 12	CP = 430	            Deduce non_terminal_symbol
SS = 12	CP = 430	              Match  id
SS = 12	CP = 430	              Accept id
SS = 12	CP = 431	            Accept non_terminal_symbol
SS = 11	CP = 431	          Accept right_non_terminal_symbol
SS = 9	CP = 431	        Accept simple_part
SS = 7	CP = 431	      Accept part
SS = 7	CP = 431	      Match  ,
SS = 7	CP = 431	      Reject ,
SS = 7	CP = 431	      Deduce part
SS = 7	CP = 431	        Predict Failed in CONDITION
SS = 7	CP = 431	        Predict Failed in CONDITION
SS = 7	CP = 431	        Predict Failed in CONDITION
SS = 9	CP = 431	        Deduce simple_part
SS = 9	CP = 431	          Predict Failed in CONDITION
SS = 11	CP = 431	          Deduce terminal_symbol
SS = 12	CP = 431	            Match  slit
SS = 12	CP = 431	            Accept slit
SS = 11	CP = 432	          Accept terminal_symbol
SS = 9	CP = 432	        Accept simple_part
SS = 7	CP = 432	      Accept part
SS = 7	CP = 432	      Match  ,
SS = 7	CP = 432	      Reject ,
SS = 7	CP = 432	      Deduce part
SS = 7	CP = 432	        Predict Failed in CONDITION
SS = 7	CP = 432	        Predict Failed in CONDITION
SS = 7	CP = 432	        Predict Failed in CONDITION
SS = 9	CP = 432	        Deduce simple_part
SS = 9	CP = 432	          Predict Failed in CONDITION
SS = 11	CP = 432	          Deduce terminal_symbol
SS = 11	CP = 432	            Predict Failed in CONDITION
SS = 11	CP = 432	            Predict Failed in CONDITION
SS = 12	CP = 432	            Match  token
SS = 12	CP = 432	            Accept token
SS = 11	CP = 433	          Accept terminal_symbol
SS = 9	CP = 433	        Accept simple_part
SS = 7	CP = 433	      Accept part
SS = 7	CP = 433	      Match  ,
SS = 7	CP = 433	      Reject ,
SS = 6	CP = 433	      Predict Failed: part
SS = 5	CP = 433	    Accept term
SS = 5	CP = 433	    Match  |
SS = 5	CP = 433	    Reject |
SS = 4	CP = 433	  Accept declaration
SS = 4	CP = 433	  Deduce end_op
SS = 5	CP = 433	    Match  ;
SS = 5	CP = 433	    Accept ;
SS = 4	CP = 434	  Accept end_op
SS = 3	CP = 434	Accept statement
SS = 3	CP = 434	Deduce statement
SS = 4	CP = 434	  Deduce non_terminal_symbol
SS = 4	CP = 434	    Match  id
SS = 4	CP = 434	    Accept id
SS = 4	CP = 435	  Accept non_terminal_symbol
SS = 4	CP = 435	  Deduce assign_op
SS = 5	CP = 435	    Match  ::=
SS = 5	CP = 435	    Accept ::=
SS = 4	CP = 436	  Accept assign_op
SS = 4	CP = 436	  Deduce declaration
SS = 5	CP = 436	    Deduce term
SS = 6	CP = 436	      Deduce part
SS = 6	CP = 436	        Predict Failed in CONDITION
SS = 8	CP = 436	        Deduce declaration_part
SS = 8	CP = 436	          Match  (
SS = 8	CP = 436	          Accept (
SS = 9	CP = 437	          Deduce declaration
SS = 10	CP = 437	            Deduce term
SS = 11	CP = 437	              Deduce part
SS = 11	CP = 437	                Predict Failed in CONDITION
SS = 11	CP = 437	                Predict Failed in CONDITION
SS = 11	CP = 437	                Predict Failed in CONDITION
SS = 13	CP = 437	                Deduce simple_part
SS = 13	CP = 437	                  Predict Failed in CONDITION
SS = 15	CP = 437	                  Deduce terminal_symbol
SS = 16	CP = 437	                    Match  slit
SS = 16	CP = 437	                    Accept slit
SS = 15	CP = 438	                  Accept terminal_symbol
SS = 13	CP = 438	                Accept simple_part
SS = 11	CP = 438	              Accept part
SS = 12	CP = 438	              Match  ,
SS = 12	CP = 438	              Reject ,
SS = 11	CP = 438	              Predict Failed: part
SS = 10	CP = 438	            Accept term
SS = 10	CP = 438	            Match  |
SS = 10	CP = 438	            Accept |
SS = 11	CP = 439	            Deduce term
SS = 12	CP = 439	              Deduce part
SS = 12	CP = 439	                Predict Failed in CONDITION
SS = 12	CP = 439	                Predict Failed in CONDITION
SS = 12	CP = 439	                Predict Failed in CONDITION
SS = 14	CP = 439	                Deduce simple_part
SS = 14	CP = 439	                  Predict Failed in CONDITION
SS = 16	CP = 439	                  Deduce terminal_symbol
SS = 17	CP = 439	                    Match  slit
SS = 17	CP = 439	                    Accept slit
SS = 16	CP = 440	                  Accept terminal_symbol
SS = 14	CP = 440	                Accept simple_part
SS = 12	CP = 440	              Accept part
SS = 13	CP = 440	              Match  ,
SS = 13	CP = 440	              Reject ,
SS = 12	CP = 440	              Predict Failed: part
SS = 11	CP = 440	            Accept term
SS = 10	CP = 440	            Match  |
SS = 10	CP = 440	            Reject |
SS = 9	CP = 440	          Accept declaration
SS = 8	CP = 440	          Match  )
SS = 8	CP = 440	          Accept )
SS = 8	CP = 441	        Accept declaration_part
SS = 6	CP = 441	      Accept part
SS = 7	CP = 441	      Match  ,
SS = 7	CP = 441	      Reject ,
SS = 7	CP = 441	      Deduce part
SS = 7	CP = 441	        Predict Failed in CONDITION
SS = 7	CP = 441	        Predict Failed in CONDITION
SS = 7	CP = 441	        Predict Failed in CONDITION
SS = 9	CP = 441	        Deduce simple_part
SS = 11	CP = 441	          Deduce right_non_terminal_symbol
SS = 12	CP = 441	            Deduce non_terminal_symbol
SS = 12	CP = 441	              Match  id
SS = 12	CP = 441	              Accept id
SS = 12	CP = 442	            Accept non_terminal_symbol
SS = 11	CP = 442	          Accept right_non_terminal_symbol
SS = 9	CP = 442	        Accept simple_part
SS = 7	CP = 442	      Accept part
SS = 7	CP = 442	      Match  ,
SS = 7	CP = 442	      Reject ,
SS = 6	CP = 442	      Predict Failed: part
SS = 5	CP = 442	    Accept term
SS = 5	CP = 442	    Match  |
SS = 5	CP = 442	    Reject |
SS = 4	CP = 442	  Accept declaration
SS = 4	CP = 442	  Deduce end_op
SS = 5	CP = 442	    Match  ;
SS = 5	CP = 442	    Accept ;
SS = 4	CP = 443	  Accept end_op
SS = 3	CP = 443	Accept statement
SS = 3	CP = 443	Deduce statement
SS = 4	CP = 443	  Deduce non_terminal_symbol
SS = 4	CP = 443	    Match  id
SS = 4	CP = 443	    Accept id
SS = 4	CP = 444	  Accept non_terminal_symbol
SS = 4	CP = 444	  Deduce assign_op
SS = 5	CP = 444	    Match  ::=
SS = 5	CP = 444	    Accept ::=
SS = 4	CP = 445	  Accept assign_op
SS = 4	CP = 445	  Deduce declaration
SS = 5	CP = 445	    Deduce term
SS = 6	CP = 445	      Deduce part
SS = 6	CP = 445	        Predict Failed in CONDITION
SS = 6	CP = 445	        Predict Failed in CONDITION
SS = 6	CP = 445	        Predict Failed in CONDITION
SS = 8	CP = 445	        Deduce simple_part
SS = 10	CP = 445	          Deduce right_non_terminal_symbol
SS = 11	CP = 445	            Deduce non_terminal_symbol
SS = 11	CP = 445	              Match  id
SS = 11	CP = 445	              Accept id
SS = 11	CP = 446	            Accept non_terminal_symbol
SS = 10	CP = 446	          Accept right_non_terminal_symbol
SS = 8	CP = 446	        Accept simple_part
SS = 6	CP = 446	      Accept part
SS = 7	CP = 446	      Match  ,
SS = 7	CP = 446	      Reject ,
SS = 7	CP = 446	      Deduce part
SS = 7	CP = 446	        Predict Failed in CONDITION
SS = 7	CP = 446	        Predict Failed in CONDITION
SS = 7	CP = 446	        Predict Failed in CONDITION
SS = 9	CP = 446	        Deduce simple_part
SS = 11	CP = 446	          Deduce right_non_terminal_symbol
SS = 12	CP = 446	            Deduce non_terminal_symbol
SS = 12	CP = 446	              Match  id
SS = 12	CP = 446	              Accept id
SS = 12	CP = 447	            Accept non_terminal_symbol
SS = 11	CP = 447	          Accept right_non_terminal_symbol
SS = 9	CP = 447	        Accept simple_part
SS = 7	CP = 447	      Accept part
SS = 7	CP = 447	      Match  ,
SS = 7	CP = 447	      Reject ,
SS = 6	CP = 447	      Predict Failed: part
SS = 5	CP = 447	    Accept term
SS = 5	CP = 447	    Match  |
SS = 5	CP = 447	    Reject |
SS = 4	CP = 447	  Accept declaration
SS = 4	CP = 447	  Deduce end_op
SS = 5	CP = 447	    Match  ;
SS = 5	CP = 447	    Accept ;
SS = 4	CP = 448	  Accept end_op
SS = 3	CP = 448	Accept statement
SS = 3	CP = 448	Deduce statement
SS = 4	CP = 448	  Deduce non_terminal_symbol
SS = 4	CP = 448	    Match  id
SS = 4	CP = 448	    Accept id
SS = 4	CP = 449	  Accept non_terminal_symbol
SS = 4	CP = 449	  Deduce assign_op
SS = 5	CP = 449	    Match  ::=
SS = 5	CP = 449	    Accept ::=
SS = 4	CP = 450	  Accept assign_op
SS = 4	CP = 450	  Deduce declaration
SS = 5	CP = 450	    Deduce term
SS = 6	CP = 450	      Deduce part
SS = 6	CP = 450	        Predict Failed in CONDITION
SS = 6	CP = 450	        Predict Failed in CONDITION
SS = 6	CP = 450	        Predict Failed in CONDITION
SS = 8	CP = 450	        Deduce simple_part
SS = 8	CP = 450	          Predict Failed in CONDITION
SS = 10	CP = 450	          Deduce terminal_symbol
SS = 11	CP = 450	            Match  slit
SS = 11	CP = 450	            Accept slit
SS = 10	CP = 451	          Accept terminal_symbol
SS = 8	CP = 451	        Accept simple_part
SS = 6	CP = 451	      Accept part
SS = 7	CP = 451	      Match  ,
SS = 7	CP = 451	      Reject ,
SS = 7	CP = 451	      Deduce part
SS = 7	CP = 451	        Predict Failed in CONDITION
SS = 7	CP = 451	        Predict Failed in CONDITION
SS = 7	CP = 451	        Predict Failed in CONDITION
SS = 9	CP = 451	        Deduce simple_part
SS = 9	CP = 451	          Predict Failed in CONDITION
SS = 11	CP = 451	          Deduce terminal_symbol
SS = 11	CP = 451	            Predict Failed in CONDITION
SS = 11	CP = 451	            Predict Failed in CONDITION
SS = 12	CP = 451	            Match  token
SS = 12	CP = 451	            Accept token
SS = 11	CP = 452	          Accept terminal_symbol
SS = 9	CP = 452	        Accept simple_part
SS = 7	CP = 452	      Accept part
SS = 7	CP = 452	      Match  ,
SS = 7	CP = 452	      Reject ,
SS = 6	CP = 452	      Predict Failed: part
SS = 5	CP = 452	    Accept term
SS = 5	CP = 452	    Match  |
SS = 5	CP = 452	    Reject |
SS = 4	CP = 452	  Accept declaration
SS = 4	CP = 452	  Deduce end_op
SS = 5	CP = 452	    Match  ;
SS = 5	CP = 452	    Accept ;
SS = 4	CP = 453	  Accept end_op
SS = 3	CP = 453	Accept statement
SS = 3	CP = 453	Deduce statement
SS = 4	CP = 453	  Deduce non_terminal_symbol
SS = 4	CP = 453	    Match  id
SS = 4	CP = 453	    Accept id
SS = 4	CP = 454	  Accept non_terminal_symbol
SS = 4	CP = 454	  Deduce assign_op
SS = 5	CP = 454	    Match  ::=
SS = 5	CP = 454	    Accept ::=
SS = 4	CP = 455	  Accept assign_op
SS = 4	CP = 455	  Deduce declaration
SS = 5	CP = 455	    Deduce term
SS = 6	CP = 455	      Deduce part
SS = 6	CP = 455	        Predict Failed in CONDITION
SS = 6	CP = 455	        Predict Failed in CONDITION
SS = 6	CP = 455	        Predict Failed in CONDITION
SS = 8	CP = 455	        Deduce simple_part
SS = 10	CP = 455	          Deduce right_non_terminal_symbol
SS = 11	CP = 455	            Deduce non_terminal_symbol
SS = 11	CP = 455	              Match  id
SS = 11	CP = 455	              Accept id
SS = 11	CP = 456	            Accept non_terminal_symbol
SS = 10	CP = 456	          Accept right_non_terminal_symbol
SS = 8	CP = 456	        Accept simple_part
SS = 6	CP = 456	      Accept part
SS = 7	CP = 456	      Match  ,
SS = 7	CP = 456	      Reject ,
SS = 7	CP = 456	      Deduce part
SS = 7	CP = 456	        Predict Failed in CONDITION
SS = 7	CP = 456	        Predict Failed in CONDITION
SS = 9	CP = 456	        Deduce alternative_part
SS = 9	CP = 456	          Match  [
SS = 9	CP = 456	          Accept [
SS = 10	CP = 457	          Deduce declaration
SS = 11	CP = 457	            Deduce term
SS = 12	CP = 457	              Deduce part
SS = 12	CP = 457	                Predict Failed in CONDITION
SS = 12	CP = 457	                Predict Failed in CONDITION
SS = 12	CP = 457	                Predict Failed in CONDITION
SS = 14	CP = 457	                Deduce simple_part
SS = 14	CP = 457	                  Predict Failed in CONDITION
SS = 16	CP = 457	                  Deduce terminal_symbol
SS = 17	CP = 457	                    Match  slit
SS = 17	CP = 457	                    Accept slit
SS = 16	CP = 458	                  Accept terminal_symbol
SS = 14	CP = 458	                Accept simple_part
SS = 12	CP = 458	              Accept part
SS = 13	CP = 458	              Match  ,
SS = 13	CP = 458	              Reject ,
SS = 13	CP = 458	              Deduce part
SS = 13	CP = 458	                Predict Failed in CONDITION
SS = 13	CP = 458	                Predict Failed in CONDITION
SS = 13	CP = 458	                Predict Failed in CONDITION
SS = 15	CP = 458	                Deduce simple_part
SS = 17	CP = 458	                  Deduce right_non_terminal_symbol
SS = 18	CP = 458	                    Deduce non_terminal_symbol
SS = 18	CP = 458	                      Match  id
SS = 18	CP = 458	                      Accept id
SS = 18	CP = 459	                    Accept non_terminal_symbol
SS = 17	CP = 459	                  Accept right_non_terminal_symbol
SS = 15	CP = 459	                Accept simple_part
SS = 13	CP = 459	              Accept part
SS = 13	CP = 459	              Match  ,
SS = 13	CP = 459	              Reject ,
SS = 12	CP = 459	              Predict Failed: part
SS = 11	CP = 459	            Accept term
SS = 11	CP = 459	            Match  |
SS = 11	CP = 459	            Reject |
SS = 10	CP = 459	          Accept declaration
SS = 9	CP = 459	          Match  ]
SS = 9	CP = 459	          Accept ]
SS = 9	CP = 460	        Accept alternative_part
SS = 7	CP = 460	      Accept part
SS = 7	CP = 460	      Match  ,
SS = 7	CP = 460	      Reject ,
SS = 6	CP = 460	      Predict Failed: part
SS = 5	CP = 460	    Accept term
SS = 5	CP = 460	    Match  |
SS = 5	CP = 460	    Reject |
SS = 4	CP = 460	  Accept declaration
SS = 4	CP = 460	  Deduce end_op
SS = 5	CP = 460	    Match  ;
SS = 5	CP = 460	    Accept ;
SS = 4	CP = 461	  Accept end_op
SS = 3	CP = 461	Accept statement
SS = 3	CP = 461	Deduce statement
SS = 4	CP = 461	  Deduce non_terminal_symbol
SS = 4	CP = 461	    Match  id
SS = 4	CP = 461	    Accept id
SS = 4	CP = 462	  Accept non_terminal_symbol
SS = 4	CP = 462	  Deduce assign_op
SS = 5	CP = 462	    Match  ::=
SS = 5	CP = 462	    Accept ::=
SS = 4	CP = 463	  Accept assign_op
SS = 4	CP = 463	  Deduce declaration
SS = 5	CP = 463	    Deduce term
SS = 6	CP = 463	      Deduce part
SS = 6	CP = 463	        Predict Failed in CONDITION
SS = 6	CP = 463	        Predict Failed in CONDITION
SS = 6	CP = 463	        Predict Failed in CONDITION
SS = 8	CP = 463	        Deduce simple_part
SS = 10	CP = 463	          Deduce right_non_terminal_symbol
SS = 11	CP = 463	            Deduce non_terminal_symbol
SS = 11	CP = 463	              Match  id
SS = 11	CP = 463	              Accept id
SS = 11	CP = 464	            Accept non_terminal_symbol
SS = 10	CP = 464	          Accept right_non_terminal_symbol
SS = 8	CP = 464	        Accept simple_part
SS = 6	CP = 464	      Accept part
SS = 7	CP = 464	      Match  ,
SS = 7	CP = 464	      Reject ,
SS = 6	CP = 464	      Predict Failed: part
SS = 5	CP = 464	    Accept term
SS = 5	CP = 464	    Match  |
SS = 5	CP = 464	    Accept |
SS = 6	CP = 465	    Deduce term
SS = 7	CP = 465	      Deduce part
SS = 7	CP = 465	        Predict Failed in CONDITION
SS = 7	CP = 465	        Predict Failed in CONDITION
SS = 7	CP = 465	        Predict Failed in CONDITION
SS = 9	CP = 465	        Deduce simple_part
SS = 11	CP = 465	          Deduce right_non_terminal_symbol
SS = 12	CP = 465	            Deduce non_terminal_symbol
SS = 12	CP = 465	              Match  id
SS = 12	CP = 465	              Accept id
SS = 12	CP = 466	            Accept non_terminal_symbol
SS = 11	CP = 466	          Accept right_non_terminal_symbol
SS = 9	CP = 466	        Accept simple_part
SS = 7	CP = 466	      Accept part
SS = 8	CP = 466	      Match  ,
SS = 8	CP = 466	      Reject ,
SS = 7	CP = 466	      Predict Failed: part
SS = 6	CP = 466	    Accept term
SS = 5	CP = 466	    Match  |
SS = 5	CP = 466	    Reject |
SS = 4	CP = 466	  Accept declaration
SS = 4	CP = 466	  Deduce end_op
SS = 5	CP = 466	    Match  ;
SS = 5	CP = 466	    Accept ;
SS = 4	CP = 467	  Accept end_op
SS = 3	CP = 467	Accept statement
SS = 3	CP = 467	Deduce statement
SS = 4	CP = 467	  Deduce non_terminal_symbol
SS = 4	CP = 467	    Match  id
SS = 4	CP = 467	    Accept id
SS = 4	CP = 468	  Accept non_terminal_symbol
SS = 4	CP = 468	  Deduce assign_op
SS = 5	CP = 468	    Match  ::=
SS = 5	CP = 468	    Accept ::=
SS = 4	CP = 469	  Accept assign_op
SS = 4	CP = 469	  Deduce declaration
SS = 5	CP = 469	    Deduce term
SS = 6	CP = 469	      Deduce part
SS = 6	CP = 469	        Predict Failed in CONDITION
SS = 6	CP = 469	        Predict Failed in CONDITION
SS = 6	CP = 469	        Predict Failed in CONDITION
SS = 8	CP = 469	        Deduce simple_part
SS = 10	CP = 469	          Deduce right_non_terminal_symbol
SS = 11	CP = 469	            Deduce non_terminal_symbol
SS = 11	CP = 469	              Match  id
SS = 11	CP = 469	              Accept id
SS = 11	CP = 470	            Accept non_terminal_symbol
SS = 10	CP = 470	          Accept right_non_terminal_symbol
SS = 8	CP = 470	        Accept simple_part
SS = 6	CP = 470	      Accept part
SS = 7	CP = 470	      Match  ,
SS = 7	CP = 470	      Reject ,
SS = 7	CP = 470	      Deduce part
SS = 7	CP = 470	        Predict Failed in CONDITION
SS = 7	CP = 470	        Predict Failed in CONDITION
SS = 7	CP = 470	        Predict Failed in CONDITION
SS = 9	CP = 470	        Deduce simple_part
SS = 9	CP = 470	          Predict Failed in CONDITION
SS = 11	CP = 470	          Deduce terminal_symbol
SS = 12	CP = 470	            Match  slit
SS = 12	CP = 470	            Accept slit
SS = 11	CP = 471	          Accept terminal_symbol
SS = 9	CP = 471	        Accept simple_part
SS = 7	CP = 471	      Accept part
SS = 7	CP = 471	      Match  ,
SS = 7	CP = 471	      Reject ,
SS = 7	CP = 471	      Deduce part
SS = 7	CP = 471	        Predict Failed in CONDITION
SS = 7	CP = 471	        Predict Failed in CONDITION
SS = 7	CP = 471	        Predict Failed in CONDITION
SS = 9	CP = 471	        Deduce simple_part
SS = 11	CP = 471	          Deduce right_non_terminal_symbol
SS = 12	CP = 471	            Deduce non_terminal_symbol
SS = 12	CP = 471	              Match  id
SS = 12	CP = 471	              Accept id
SS = 12	CP = 472	            Accept non_terminal_symbol
SS = 11	CP = 472	          Accept right_non_terminal_symbol
SS = 9	CP = 472	        Accept simple_part
SS = 7	CP = 472	      Accept part
SS = 7	CP = 472	      Match  ,
SS = 7	CP = 472	      Reject ,
SS = 6	CP = 472	      Predict Failed: part
SS = 5	CP = 472	    Accept term
SS = 5	CP = 472	    Match  |
SS = 5	CP = 472	    Accept |
SS = 6	CP = 473	    Deduce term
SS = 7	CP = 473	      Deduce part
SS = 7	CP = 473	        Predict Failed in CONDITION
SS = 7	CP = 473	        Predict Failed in CONDITION
SS = 7	CP = 473	        Predict Failed in CONDITION
SS = 9	CP = 473	        Deduce simple_part
SS = 11	CP = 473	          Deduce right_non_terminal_symbol
SS = 12	CP = 473	            Deduce non_terminal_symbol
SS = 12	CP = 473	              Match  id
SS = 12	CP = 473	              Accept id
SS = 12	CP = 474	            Accept non_terminal_symbol
SS = 11	CP = 474	          Accept right_non_terminal_symbol
SS = 9	CP = 474	        Accept simple_part
SS = 7	CP = 474	      Accept part
SS = 8	CP = 474	      Match  ,
SS = 8	CP = 474	      Reject ,
SS = 8	CP = 474	      Deduce part
SS = 8	CP = 474	        Predict Failed in CONDITION
SS = 8	CP = 474	        Predict Failed in CONDITION
SS = 10	CP = 474	        Deduce alternative_part
SS = 10	CP = 474	          Match  [
SS = 10	CP = 474	          Accept [
SS = 11	CP = 475	          Deduce declaration
SS = 12	CP = 475	            Deduce term
SS = 13	CP = 475	              Deduce part
SS = 13	CP = 475	                Predict Failed in CONDITION
SS = 13	CP = 475	                Predict Failed in CONDITION
SS = 13	CP = 475	                Predict Failed in CONDITION
SS = 15	CP = 475	                Deduce simple_part
SS = 17	CP = 475	                  Deduce right_non_terminal_symbol
SS = 18	CP = 475	                    Deduce non_terminal_symbol
SS = 18	CP = 475	                      Match  id
SS = 18	CP = 475	                      Accept id
SS = 18	CP = 476	                    Accept non_terminal_symbol
SS = 17	CP = 476	                  Accept right_non_terminal_symbol
SS = 15	CP = 476	                Accept simple_part
SS = 13	CP = 476	              Accept part
SS = 14	CP = 476	              Match  ,
SS = 14	CP = 476	              Reject ,
SS = 14	CP = 476	              Deduce part
SS = 14	CP = 476	                Predict Failed in CONDITION
SS = 14	CP = 476	                Predict Failed in CONDITION
SS = 14	CP = 476	                Predict Failed in CONDITION
SS = 16	CP = 476	                Deduce simple_part
SS = 18	CP = 476	                  Deduce right_non_terminal_symbol
SS = 19	CP = 476	                    Deduce non_terminal_symbol
SS = 19	CP = 476	                      Match  id
SS = 19	CP = 476	                      Accept id
SS = 19	CP = 477	                    Accept non_terminal_symbol
SS = 18	CP = 477	                  Accept right_non_terminal_symbol
SS = 16	CP = 477	                Accept simple_part
SS = 14	CP = 477	              Accept part
SS = 14	CP = 477	              Match  ,
SS = 14	CP = 477	              Reject ,
SS = 13	CP = 477	              Predict Failed: part
SS = 12	CP = 477	            Accept term
SS = 12	CP = 477	            Match  |
SS = 12	CP = 477	            Reject |
SS = 11	CP = 477	          Accept declaration
SS = 10	CP = 477	          Match  ]
SS = 10	CP = 477	          Accept ]
SS = 10	CP = 478	        Accept alternative_part
SS = 8	CP = 478	      Accept part
SS = 8	CP = 478	      Match  ,
SS = 8	CP = 478	      Reject ,
SS = 7	CP = 478	      Predict Failed: part
SS = 6	CP = 478	    Accept term
SS = 5	CP = 478	    Match  |
SS = 5	CP = 478	    Reject |
SS = 4	CP = 478	  Accept declaration
SS = 4	CP = 478	  Deduce end_op
SS = 5	CP = 478	    Match  ;
SS = 5	CP = 478	    Accept ;
SS = 4	CP = 479	  Accept end_op
SS = 3	CP = 479	Accept statement
SS = 3	CP = 479	Deduce statement
SS = 4	CP = 479	  Deduce non_terminal_symbol
SS = 4	CP = 479	    Match  id
SS = 4	CP = 479	    Accept id
SS = 4	CP = 480	  Accept non_terminal_symbol
SS = 4	CP = 480	  Deduce assign_op
SS = 5	CP = 480	    Match  ::=
SS = 5	CP = 480	    Accept ::=
SS = 4	CP = 481	  Accept assign_op
SS = 4	CP = 481	  Deduce declaration
SS = 5	CP = 481	    Deduce term
SS = 6	CP = 481	      Deduce part
SS = 6	CP = 481	        Predict Failed in CONDITION
SS = 6	CP = 481	        Predict Failed in CONDITION
SS = 6	CP = 481	        Predict Failed in CONDITION
SS = 8	CP = 481	        Deduce simple_part
SS = 8	CP = 481	          Predict Failed in CONDITION
SS = 10	CP = 481	          Deduce terminal_symbol
SS = 11	CP = 481	            Match  slit
SS = 11	CP = 481	            Accept slit
SS = 10	CP = 482	          Accept terminal_symbol
SS = 8	CP = 482	        Accept simple_part
SS = 6	CP = 482	      Accept part
SS = 7	CP = 482	      Match  ,
SS = 7	CP = 482	      Reject ,
SS = 6	CP = 482	      Predict Failed: part
SS = 5	CP = 482	    Accept term
SS = 5	CP = 482	    Match  |
SS = 5	CP = 482	    Accept |
SS = 6	CP = 483	    Deduce term
SS = 7	CP = 483	      Deduce part
SS = 7	CP = 483	        Predict Failed in CONDITION
SS = 7	CP = 483	        Predict Failed in CONDITION
SS = 7	CP = 483	        Predict Failed in CONDITION
SS = 9	CP = 483	        Deduce simple_part
SS = 9	CP = 483	          Predict Failed in CONDITION
SS = 11	CP = 483	          Deduce terminal_symbol
SS = 12	CP = 483	            Match  slit
SS = 12	CP = 483	            Accept slit
SS = 11	CP = 484	          Accept terminal_symbol
SS = 9	CP = 484	        Accept simple_part
SS = 7	CP = 484	      Accept part
SS = 8	CP = 484	      Match  ,
SS = 8	CP = 484	      Reject ,
SS = 7	CP = 484	      Predict Failed: part
SS = 6	CP = 484	    Accept term
SS = 5	CP = 484	    Match  |
SS = 5	CP = 484	    Accept |
SS = 6	CP = 485	    Deduce term
SS = 7	CP = 485	      Deduce part
SS = 7	CP = 485	        Predict Failed in CONDITION
SS = 7	CP = 485	        Predict Failed in CONDITION
SS = 7	CP = 485	        Predict Failed in CONDITION
SS = 9	CP = 485	        Deduce simple_part
SS = 9	CP = 485	          Predict Failed in CONDITION
SS = 11	CP = 485	          Deduce terminal_symbol
SS = 12	CP = 485	            Match  slit
SS = 12	CP = 485	            Accept slit
SS = 11	CP = 486	          Accept terminal_symbol
SS = 9	CP = 486	        Accept simple_part
SS = 7	CP = 486	      Accept part
SS = 8	CP = 486	      Match  ,
SS = 8	CP = 486	      Reject ,
SS = 7	CP = 486	      Predict Failed: part
SS = 6	CP = 486	    Accept term
SS = 5	CP = 486	    Match  |
SS = 5	CP = 486	    Accept |
SS = 6	CP = 487	    Deduce term
SS = 7	CP = 487	      Deduce part
SS = 7	CP = 487	        Predict Failed in CONDITION
SS = 7	CP = 487	        Predict Failed in CONDITION
SS = 7	CP = 487	        Predict Failed in CONDITION
SS = 9	CP = 487	        Deduce simple_part
SS = 9	CP = 487	          Predict Failed in CONDITION
SS = 11	CP = 487	          Deduce terminal_symbol
SS = 12	CP = 487	            Match  slit
SS = 12	CP = 487	            Accept slit
SS = 11	CP = 488	          Accept terminal_symbol
SS = 9	CP = 488	        Accept simple_part
SS = 7	CP = 488	      Accept part
SS = 8	CP = 488	      Match  ,
SS = 8	CP = 488	      Reject ,
SS = 7	CP = 488	      Predict Failed: part
SS = 6	CP = 488	    Accept term
SS = 5	CP = 488	    Match  |
SS = 5	CP = 488	    Accept |
SS = 6	CP = 489	    Deduce term
SS = 7	CP = 489	      Deduce part
SS = 7	CP = 489	        Predict Failed in CONDITION
SS = 7	CP = 489	        Predict Failed in CONDITION
SS = 7	CP = 489	        Predict Failed in CONDITION
SS = 9	CP = 489	        Deduce simple_part
SS = 9	CP = 489	          Predict Failed in CONDITION
SS = 11	CP = 489	          Deduce terminal_symbol
SS = 12	CP = 489	            Match  slit
SS = 12	CP = 489	            Accept slit
SS = 11	CP = 490	          Accept terminal_symbol
SS = 9	CP = 490	        Accept simple_part
SS = 7	CP = 490	      Accept part
SS = 8	CP = 490	      Match  ,
SS = 8	CP = 490	      Reject ,
SS = 7	CP = 490	      Predict Failed: part
SS = 6	CP = 490	    Accept term
SS = 5	CP = 490	    Match  |
SS = 5	CP = 490	    Accept |
SS = 6	CP = 491	    Deduce term
SS = 7	CP = 491	      Deduce part
SS = 7	CP = 491	        Predict Failed in CONDITION
SS = 7	CP = 491	        Predict Failed in CONDITION
SS = 7	CP = 491	        Predict Failed in CONDITION
SS = 9	CP = 491	        Deduce simple_part
SS = 9	CP = 491	          Predict Failed in CONDITION
SS = 11	CP = 491	          Deduce terminal_symbol
SS = 12	CP = 491	            Match  slit
SS = 12	CP = 491	            Accept slit
SS = 11	CP = 492	          Accept terminal_symbol
SS = 9	CP = 492	        Accept simple_part
SS = 7	CP = 492	      Accept part
SS = 8	CP = 492	      Match  ,
SS = 8	CP = 492	      Reject ,
SS = 7	CP = 492	      Predict Failed: part
SS = 6	CP = 492	    Accept term
SS = 5	CP = 492	    Match  |
SS = 5	CP = 492	    Accept |
SS = 6	CP = 493	    Deduce term
SS = 7	CP = 493	      Deduce part
SS = 7	CP = 493	        Predict Failed in CONDITION
SS = 7	CP = 493	        Predict Failed in CONDITION
SS = 7	CP = 493	        Predict Failed in CONDITION
SS = 9	CP = 493	        Deduce simple_part
SS = 9	CP = 493	          Predict Failed in CONDITION
SS = 11	CP = 493	          Deduce terminal_symbol
SS = 12	CP = 493	            Match  slit
SS = 12	CP = 493	            Accept slit
SS = 11	CP = 494	          Accept terminal_symbol
SS = 9	CP = 494	        Accept simple_part
SS = 7	CP = 494	      Accept part
SS = 8	CP = 494	      Match  ,
SS = 8	CP = 494	      Reject ,
SS = 7	CP = 494	      Predict Failed: part
SS = 6	CP = 494	    Accept term
SS = 5	CP = 494	    Match  |
SS = 5	CP = 494	    Accept |
SS = 6	CP = 495	    Deduce term
SS = 7	CP = 495	      Deduce part
SS = 7	CP = 495	        Predict Failed in CONDITION
SS = 7	CP = 495	        Predict Failed in CONDITION
SS = 7	CP = 495	        Predict Failed in CONDITION
SS = 9	CP = 495	        Deduce simple_part
SS = 9	CP = 495	          Predict Failed in CONDITION
SS = 11	CP = 495	          Deduce terminal_symbol
SS = 12	CP = 495	            Match  slit
SS = 12	CP = 495	            Accept slit
SS = 11	CP = 496	          Accept terminal_symbol
SS = 9	CP = 496	        Accept simple_part
SS = 7	CP = 496	      Accept part
SS = 8	CP = 496	      Match  ,
SS = 8	CP = 496	      Reject ,
SS = 7	CP = 496	      Predict Failed: part
SS = 6	CP = 496	    Accept term
SS = 5	CP = 496	    Match  |
SS = 5	CP = 496	    Reject |
SS = 4	CP = 496	  Accept declaration
SS = 4	CP = 496	  Deduce end_op
SS = 5	CP = 496	    Match  ;
SS = 5	CP = 496	    Accept ;
SS = 4	CP = 497	  Accept end_op
SS = 3	CP = 497	Accept statement
SS = 3	CP = 497	Deduce statement
SS = 4	CP = 497	  Deduce non_terminal_symbol
SS = 4	CP = 497	    Match  id
SS = 4	CP = 497	    Accept id
SS = 4	CP = 498	  Accept non_terminal_symbol
SS = 4	CP = 498	  Deduce assign_op
SS = 5	CP = 498	    Match  ::=
SS = 5	CP = 498	    Accept ::=
SS = 4	CP = 499	  Accept assign_op
SS = 4	CP = 499	  Deduce declaration
SS = 5	CP = 499	    Deduce term
SS = 6	CP = 499	      Deduce part
SS = 6	CP = 499	        Predict Failed in CONDITION
SS = 6	CP = 499	        Predict Failed in CONDITION
SS = 6	CP = 499	        Predict Failed in CONDITION
SS = 8	CP = 499	        Deduce simple_part
SS = 8	CP = 499	          Predict Failed in CONDITION
SS = 10	CP = 499	          Deduce terminal_symbol
SS = 11	CP = 499	            Match  slit
SS = 11	CP = 499	            Accept slit
SS = 10	CP = 500	          Accept terminal_symbol
SS = 8	CP = 500	        Accept simple_part
SS = 6	CP = 500	      Accept part
SS = 7	CP = 500	      Match  ,
SS = 7	CP = 500	      Reject ,
SS = 7	CP = 500	      Deduce part
SS = 7	CP = 500	        Predict Failed in CONDITION
SS = 7	CP = 500	        Predict Failed in CONDITION
SS = 9	CP = 500	        Deduce alternative_part
SS = 9	CP = 500	          Match  [
SS = 9	CP = 500	          Accept [
SS = 10	CP = 501	          Deduce declaration
SS = 11	CP = 501	            Deduce term
SS = 12	CP = 501	              Deduce part
SS = 12	CP = 501	                Predict Failed in CONDITION
SS = 12	CP = 501	                Predict Failed in CONDITION
SS = 12	CP = 501	                Predict Failed in CONDITION
SS = 14	CP = 501	                Deduce simple_part
SS = 16	CP = 501	                  Deduce right_non_terminal_symbol
SS = 17	CP = 501	                    Deduce non_terminal_symbol
SS = 17	CP = 501	                      Match  id
SS = 17	CP = 501	                      Accept id
SS = 17	CP = 502	                    Accept non_terminal_symbol
SS = 16	CP = 502	                  Accept right_non_terminal_symbol
SS = 14	CP = 502	                Accept simple_part
SS = 12	CP = 502	              Accept part
SS = 13	CP = 502	              Match  ,
SS = 13	CP = 502	              Reject ,
SS = 12	CP = 502	              Predict Failed: part
SS = 11	CP = 502	            Accept term
SS = 11	CP = 502	            Match  |
SS = 11	CP = 502	            Reject |
SS = 10	CP = 502	          Accept declaration
SS = 9	CP = 502	          Match  ]
SS = 9	CP = 502	          Accept ]
SS = 9	CP = 503	        Accept alternative_part
SS = 7	CP = 503	      Accept part
SS = 7	CP = 503	      Match  ,
SS = 7	CP = 503	      Reject ,
SS = 7	CP = 503	      Deduce part
SS = 7	CP = 503	        Predict Failed in CONDITION
SS = 7	CP = 503	        Predict Failed in CONDITION
SS = 7	CP = 503	        Predict Failed in CONDITION
SS = 9	CP = 503	        Deduce simple_part
SS = 9	CP = 503	          Predict Failed in CONDITION
SS = 11	CP = 503	          Deduce terminal_symbol
SS = 12	CP = 503	            Match  slit
SS = 12	CP = 503	            Accept slit
SS = 11	CP = 504	          Accept terminal_symbol
SS = 9	CP = 504	        Accept simple_part
SS = 7	CP = 504	      Accept part
SS = 7	CP = 504	      Match  ,
SS = 7	CP = 504	      Reject ,
SS = 7	CP = 504	      Deduce part
SS = 7	CP = 504	        Predict Failed in CONDITION
SS = 7	CP = 504	        Predict Failed in CONDITION
SS = 7	CP = 504	        Predict Failed in CONDITION
SS = 9	CP = 504	        Deduce simple_part
SS = 9	CP = 504	          Predict Failed in CONDITION
SS = 11	CP = 504	          Deduce terminal_symbol
SS = 12	CP = 504	            Match  slit
SS = 12	CP = 504	            Accept slit
SS = 11	CP = 505	          Accept terminal_symbol
SS = 9	CP = 505	        Accept simple_part
SS = 7	CP = 505	      Accept part
SS = 7	CP = 505	      Match  ,
SS = 7	CP = 505	      Reject ,
SS = 7	CP = 505	      Deduce part
SS = 7	CP = 505	        Predict Failed in CONDITION
SS = 7	CP = 505	        Predict Failed in CONDITION
SS = 9	CP = 505	        Deduce alternative_part
SS = 9	CP = 505	          Match  [
SS = 9	CP = 505	          Accept [
SS = 10	CP = 506	          Deduce declaration
SS = 11	CP = 506	            Deduce term
SS = 12	CP = 506	              Deduce part
SS = 12	CP = 506	                Predict Failed in CONDITION
SS = 12	CP = 506	                Predict Failed in CONDITION
SS = 12	CP = 506	                Predict Failed in CONDITION
SS = 14	CP = 506	                Deduce simple_part
SS = 16	CP = 506	                  Deduce right_non_terminal_symbol
SS = 17	CP = 506	                    Deduce non_terminal_symbol
SS = 17	CP = 506	                      Match  id
SS = 17	CP = 506	                      Accept id
SS = 17	CP = 507	                    Accept non_terminal_symbol
SS = 16	CP = 507	                  Accept right_non_terminal_symbol
SS = 14	CP = 507	                Accept simple_part
SS = 12	CP = 507	              Accept part
SS = 13	CP = 507	              Match  ,
SS = 13	CP = 507	              Reject ,
SS = 12	CP = 507	              Predict Failed: part
SS = 11	CP = 507	            Accept term
SS = 11	CP = 507	            Match  |
SS = 11	CP = 507	            Reject |
SS = 10	CP = 507	          Accept declaration
SS = 9	CP = 507	          Match  ]
SS = 9	CP = 507	          Accept ]
SS = 9	CP = 508	        Accept alternative_part
SS = 7	CP = 508	      Accept part
SS = 7	CP = 508	      Match  ,
SS = 7	CP = 508	      Reject ,
SS = 7	CP = 508	      Deduce part
SS = 7	CP = 508	        Predict Failed in CONDITION
SS = 7	CP = 508	        Predict Failed in CONDITION
SS = 7	CP = 508	        Predict Failed in CONDITION
SS = 9	CP = 508	        Deduce simple_part
SS = 9	CP = 508	          Predict Failed in CONDITION
SS = 11	CP = 508	          Deduce terminal_symbol
SS = 12	CP = 508	            Match  slit
SS = 12	CP = 508	            Accept slit
SS = 11	CP = 509	          Accept terminal_symbol
SS = 9	CP = 509	        Accept simple_part
SS = 7	CP = 509	      Accept part
SS = 7	CP = 509	      Match  ,
SS = 7	CP = 509	      Reject ,
SS = 7	CP = 509	      Deduce part
SS = 7	CP = 509	        Predict Failed in CONDITION
SS = 7	CP = 509	        Predict Failed in CONDITION
SS = 7	CP = 509	        Predict Failed in CONDITION
SS = 9	CP = 509	        Deduce simple_part
SS = 11	CP = 509	          Deduce right_non_terminal_symbol
SS = 12	CP = 509	            Deduce non_terminal_symbol
SS = 12	CP = 509	              Match  id
SS = 12	CP = 509	              Accept id
SS = 12	CP = 510	            Accept non_terminal_symbol
SS = 11	CP = 510	          Accept right_non_terminal_symbol
SS = 9	CP = 510	        Accept simple_part
SS = 7	CP = 510	      Accept part
SS = 7	CP = 510	      Match  ,
SS = 7	CP = 510	      Reject ,
SS = 6	CP = 510	      Predict Failed: part
SS = 5	CP = 510	    Accept term
SS = 5	CP = 510	    Match  |
SS = 5	CP = 510	    Reject |
SS = 4	CP = 510	  Accept declaration
SS = 4	CP = 510	  Deduce end_op
SS = 5	CP = 510	    Match  ;
SS = 5	CP = 510	    Accept ;
SS = 4	CP = 511	  Accept end_op
SS = 3	CP = 511	Accept statement
SS = 3	CP = 511	Deduce statement
SS = 4	CP = 511	  Deduce non_terminal_symbol
SS = 4	CP = 511	    Match  id
SS = 4	CP = 511	    Accept id
SS = 4	CP = 512	  Accept non_terminal_symbol
SS = 4	CP = 512	  Deduce assign_op
SS = 5	CP = 512	    Match  ::=
SS = 5	CP = 512	    Accept ::=
SS = 4	CP = 513	  Accept assign_op
SS = 4	CP = 513	  Deduce declaration
SS = 5	CP = 513	    Deduce term
SS = 6	CP = 513	      Deduce part
SS = 6	CP = 513	        Predict Failed in CONDITION
SS = 6	CP = 513	        Predict Failed in CONDITION
SS = 8	CP = 513	        Deduce alternative_part
SS = 8	CP = 513	          Match  [
SS = 8	CP = 513	          Accept [
SS = 9	CP = 514	          Deduce declaration
SS = 10	CP = 514	            Deduce term
SS = 11	CP = 514	              Deduce part
SS = 11	CP = 514	                Predict Failed in CONDITION
SS = 11	CP = 514	                Predict Failed in CONDITION
SS = 11	CP = 514	                Predict Failed in CONDITION
SS = 13	CP = 514	                Deduce simple_part
SS = 13	CP = 514	                  Predict Failed in CONDITION
SS = 15	CP = 514	                  Deduce terminal_symbol
SS = 16	CP = 514	                    Match  slit
SS = 16	CP = 514	                    Accept slit
SS = 15	CP = 515	                  Accept terminal_symbol
SS = 13	CP = 515	                Accept simple_part
SS = 11	CP = 515	              Accept part
SS = 12	CP = 515	              Match  ,
SS = 12	CP = 515	              Reject ,
SS = 11	CP = 515	              Predict Failed: part
SS = 10	CP = 515	            Accept term
SS = 10	CP = 515	            Match  |
SS = 10	CP = 515	            Reject |
SS = 9	CP = 515	          Accept declaration
SS = 8	CP = 515	          Match  ]
SS = 8	CP = 515	          Accept ]
SS = 8	CP = 516	        Accept alternative_part
SS = 6	CP = 516	      Accept part
SS = 7	CP = 516	      Match  ,
SS = 7	CP = 516	      Reject ,
SS = 7	CP = 516	      Deduce part
SS = 7	CP = 516	        Predict Failed in CONDITION
SS = 7	CP = 516	        Predict Failed in CONDITION
SS = 7	CP = 516	        Predict Failed in CONDITION
SS = 9	CP = 516	        Deduce simple_part
SS = 9	CP = 516	          Predict Failed in CONDITION
SS = 11	CP = 516	          Deduce terminal_symbol
SS = 11	CP = 516	            Predict Failed in CONDITION
SS = 11	CP = 516	            Predict Failed in CONDITION
SS = 12	CP = 516	            Match  token
SS = 12	CP = 516	            Accept token
SS = 11	CP = 517	          Accept terminal_symbol
SS = 9	CP = 517	        Accept simple_part
SS = 7	CP = 517	      Accept part
SS = 7	CP = 517	      Match  ,
SS = 7	CP = 517	      Reject ,
SS = 7	CP = 517	      Deduce part
SS = 9	CP = 517	        Deduce repeat_part
SS = 9	CP = 517	          Match  {
SS = 9	CP = 517	          Accept {
SS = 10	CP = 518	          Deduce declaration
SS = 11	CP = 518	            Deduce term
SS = 12	CP = 518	              Deduce part
SS = 12	CP = 518	                Predict Failed in CONDITION
SS = 12	CP = 518	                Predict Failed in CONDITION
SS = 12	CP = 518	                Predict Failed in CONDITION
SS = 14	CP = 518	                Deduce simple_part
SS = 14	CP = 518	                  Predict Failed in CONDITION
SS = 16	CP = 518	                  Deduce terminal_symbol
SS = 17	CP = 518	                    Match  slit
SS = 17	CP = 518	                    Accept slit
SS = 16	CP = 519	                  Accept terminal_symbol
SS = 14	CP = 519	                Accept simple_part
SS = 12	CP = 519	              Accept part
SS = 13	CP = 519	              Match  ,
SS = 13	CP = 519	              Reject ,
SS = 13	CP = 519	              Deduce part
SS = 13	CP = 519	                Predict Failed in CONDITION
SS = 13	CP = 519	                Predict Failed in CONDITION
SS = 13	CP = 519	                Predict Failed in CONDITION
SS = 15	CP = 519	                Deduce simple_part
SS = 17	CP = 519	                  Deduce right_non_terminal_symbol
SS = 18	CP = 519	                    Deduce non_terminal_symbol
SS = 18	CP = 519	                      Match  id
SS = 18	CP = 519	                      Accept id
SS = 18	CP = 520	                    Accept non_terminal_symbol
SS = 17	CP = 520	                  Accept right_non_terminal_symbol
SS = 15	CP = 520	                Accept simple_part
SS = 13	CP = 520	              Accept part
SS = 13	CP = 520	              Match  ,
SS = 13	CP = 520	              Reject ,
SS = 12	CP = 520	              Predict Failed: part
SS = 11	CP = 520	            Accept term
SS = 11	CP = 520	            Match  |
SS = 11	CP = 520	            Reject |
SS = 10	CP = 520	          Accept declaration
SS = 9	CP = 520	          Match  }
SS = 9	CP = 520	          Accept }
SS = 9	CP = 521	        Accept repeat_part
SS = 7	CP = 521	      Accept part
SS = 7	CP = 521	      Match  ,
SS = 7	CP = 521	      Reject ,
SS = 6	CP = 521	      Predict Failed: part
SS = 5	CP = 521	    Accept term
SS = 5	CP = 521	    Match  |
SS = 5	CP = 521	    Reject |
SS = 4	CP = 521	  Accept declaration
SS = 4	CP = 521	  Deduce end_op
SS = 5	CP = 521	    Match  ;
SS = 5	CP = 521	    Accept ;
SS = 4	CP = 522	  Accept end_op
SS = 3	CP = 522	Accept statement
SS = 3	CP = 522	Deduce statement
SS = 4	CP = 522	  Deduce non_terminal_symbol
SS = 4	CP = 522	    Match  id
SS = 4	CP = 522	    Accept id
SS = 4	CP = 523	  Accept non_terminal_symbol
SS = 4	CP = 523	  Deduce assign_op
SS = 5	CP = 523	    Match  ::=
SS = 5	CP = 523	    Accept ::=
SS = 4	CP = 524	  Accept assign_op
SS = 4	CP = 524	  Deduce declaration
SS = 5	CP = 524	    Deduce term
SS = 6	CP = 524	      Deduce part
SS = 6	CP = 524	        Predict Failed in CONDITION
SS = 6	CP = 524	        Predict Failed in CONDITION
SS = 6	CP = 524	        Predict Failed in CONDITION
SS = 8	CP = 524	        Deduce simple_part
SS = 8	CP = 524	          Predict Failed in CONDITION
SS = 10	CP = 524	          Deduce terminal_symbol
SS = 11	CP = 524	            Match  slit
SS = 11	CP = 524	            Accept slit
SS = 10	CP = 525	          Accept terminal_symbol
SS = 8	CP = 525	        Accept simple_part
SS = 6	CP = 525	      Accept part
SS = 7	CP = 525	      Match  ,
SS = 7	CP = 525	      Reject ,
SS = 7	CP = 525	      Deduce part
SS = 7	CP = 525	        Predict Failed in CONDITION
SS = 7	CP = 525	        Predict Failed in CONDITION
SS = 7	CP = 525	        Predict Failed in CONDITION
SS = 9	CP = 525	        Deduce simple_part
SS = 9	CP = 525	          Predict Failed in CONDITION
SS = 11	CP = 525	          Deduce terminal_symbol
SS = 11	CP = 525	            Predict Failed in CONDITION
SS = 11	CP = 525	            Predict Failed in CONDITION
SS = 12	CP = 525	            Match  token
SS = 12	CP = 525	            Accept token
SS = 11	CP = 526	          Accept terminal_symbol
SS = 9	CP = 526	        Accept simple_part
SS = 7	CP = 526	      Accept part
SS = 7	CP = 526	      Match  ,
SS = 7	CP = 526	      Reject ,
SS = 6	CP = 526	      Predict Failed: part
SS = 5	CP = 526	    Accept term
SS = 5	CP = 526	    Match  |
SS = 5	CP = 526	    Accept |
SS = 6	CP = 527	    Deduce term
SS = 7	CP = 527	      Deduce part
SS = 7	CP = 527	        Predict Failed in CONDITION
SS = 7	CP = 527	        Predict Failed in CONDITION
SS = 9	CP = 527	        Deduce alternative_part
SS = 9	CP = 527	          Match  [
SS = 9	CP = 527	          Accept [
SS = 10	CP = 528	          Deduce declaration
SS = 11	CP = 528	            Deduce term
SS = 12	CP = 528	              Deduce part
SS = 12	CP = 528	                Predict Failed in CONDITION
SS = 12	CP = 528	                Predict Failed in CONDITION
SS = 12	CP = 528	                Predict Failed in CONDITION
SS = 14	CP = 528	                Deduce simple_part
SS = 14	CP = 528	                  Predict Failed in CONDITION
SS = 16	CP = 528	                  Deduce terminal_symbol
SS = 17	CP = 528	                    Match  slit
SS = 17	CP = 528	                    Accept slit
SS = 16	CP = 529	                  Accept terminal_symbol
SS = 14	CP = 529	                Accept simple_part
SS = 12	CP = 529	              Accept part
SS = 13	CP = 529	              Match  ,
SS = 13	CP = 529	              Reject ,
SS = 12	CP = 529	              Predict Failed: part
SS = 11	CP = 529	            Accept term
SS = 11	CP = 529	            Match  |
SS = 11	CP = 529	            Reject |
SS = 10	CP = 529	          Accept declaration
SS = 9	CP = 529	          Match  ]
SS = 9	CP = 529	          Accept ]
SS = 9	CP = 530	        Accept alternative_part
SS = 7	CP = 530	      Accept part
SS = 8	CP = 530	      Match  ,
SS = 8	CP = 530	      Reject ,
SS = 8	CP = 530	      Deduce part
SS = 8	CP = 530	        Predict Failed in CONDITION
SS = 8	CP = 530	        Predict Failed in CONDITION
SS = 8	CP = 530	        Predict Failed in CONDITION
SS = 10	CP = 530	        Deduce simple_part
SS = 10	CP = 530	          Predict Failed in CONDITION
SS = 12	CP = 530	          Deduce terminal_symbol
SS = 12	CP = 530	            Predict Failed in CONDITION
SS = 12	CP = 530	            Predict Failed in CONDITION
SS = 13	CP = 530	            Match  token
SS = 13	CP = 530	            Accept token
SS = 12	CP = 531	          Accept terminal_symbol
SS = 10	CP = 531	        Accept simple_part
SS = 8	CP = 531	      Accept part
SS = 8	CP = 531	      Match  ,
SS = 8	CP = 531	      Reject ,
SS = 8	CP = 531	      Deduce part
SS = 8	CP = 531	        Predict Failed in CONDITION
SS = 8	CP = 531	        Predict Failed in CONDITION
SS = 10	CP = 531	        Deduce alternative_part
SS = 10	CP = 531	          Match  [
SS = 10	CP = 531	          Accept [
SS = 11	CP = 532	          Deduce declaration
SS = 12	CP = 532	            Deduce term
SS = 13	CP = 532	              Deduce part
SS = 13	CP = 532	                Predict Failed in CONDITION
SS = 13	CP = 532	                Predict Failed in CONDITION
SS = 13	CP = 532	                Predict Failed in CONDITION
SS = 15	CP = 532	                Deduce simple_part
SS = 15	CP = 532	                  Predict Failed in CONDITION
SS = 17	CP = 532	                  Deduce terminal_symbol
SS = 18	CP = 532	                    Match  slit
SS = 18	CP = 532	                    Accept slit
SS = 17	CP = 533	                  Accept terminal_symbol
SS = 15	CP = 533	                Accept simple_part
SS = 13	CP = 533	              Accept part
SS = 14	CP = 533	              Match  ,
SS = 14	CP = 533	              Reject ,
SS = 13	CP = 533	              Predict Failed: part
SS = 12	CP = 533	            Accept term
SS = 12	CP = 533	            Match  |
SS = 12	CP = 533	            Reject |
SS = 11	CP = 533	          Accept declaration
SS = 10	CP = 533	          Match  ]
SS = 10	CP = 533	          Accept ]
SS = 10	CP = 534	        Accept alternative_part
SS = 8	CP = 534	      Accept part
SS = 8	CP = 534	      Match  ,
SS = 8	CP = 534	      Reject ,
SS = 8	CP = 534	      Deduce part
SS = 8	CP = 534	        Predict Failed in CONDITION
SS = 8	CP = 534	        Predict Failed in CONDITION
SS = 8	CP = 534	        Predict Failed in CONDITION
SS = 10	CP = 534	        Deduce simple_part
SS = 12	CP = 534	          Deduce right_non_terminal_symbol
SS = 13	CP = 534	            Deduce non_terminal_symbol
SS = 13	CP = 534	              Match  id
SS = 13	CP = 534	              Accept id
SS = 13	CP = 535	            Accept non_terminal_symbol
SS = 12	CP = 535	          Accept right_non_terminal_symbol
SS = 10	CP = 535	        Accept simple_part
SS = 8	CP = 535	      Accept part
SS = 8	CP = 535	      Match  ,
SS = 8	CP = 535	      Reject ,
SS = 8	CP = 535	      Deduce part
SS = 10	CP = 535	        Deduce repeat_part
SS = 10	CP = 535	          Match  {
SS = 10	CP = 535	          Accept {
SS = 11	CP = 536	          Deduce declaration
SS = 12	CP = 536	            Deduce term
SS = 13	CP = 536	              Deduce part
SS = 13	CP = 536	                Predict Failed in CONDITION
SS = 13	CP = 536	                Predict Failed in CONDITION
SS = 13	CP = 536	                Predict Failed in CONDITION
SS = 15	CP = 536	                Deduce simple_part
SS = 15	CP = 536	                  Predict Failed in CONDITION
SS = 17	CP = 536	                  Deduce terminal_symbol
SS = 18	CP = 536	                    Match  slit
SS = 18	CP = 536	                    Accept slit
SS = 17	CP = 537	                  Accept terminal_symbol
SS = 15	CP = 537	                Accept simple_part
SS = 13	CP = 537	              Accept part
SS = 14	CP = 537	              Match  ,
SS = 14	CP = 537	              Reject ,
SS = 14	CP = 537	              Deduce part
SS = 14	CP = 537	                Predict Failed in CONDITION
SS = 14	CP = 537	                Predict Failed in CONDITION
SS = 14	CP = 537	                Predict Failed in CONDITION
SS = 16	CP = 537	                Deduce simple_part
SS = 18	CP = 537	                  Deduce right_non_terminal_symbol
SS = 19	CP = 537	                    Deduce non_terminal_symbol
SS = 19	CP = 537	                      Match  id
SS = 19	CP = 537	                      Accept id
SS = 19	CP = 538	                    Accept non_terminal_symbol
SS = 18	CP = 538	                  Accept right_non_terminal_symbol
SS = 16	CP = 538	                Accept simple_part
SS = 14	CP = 538	              Accept part
SS = 14	CP = 538	              Match  ,
SS = 14	CP = 538	              Reject ,
SS = 13	CP = 538	              Predict Failed: part
SS = 12	CP = 538	            Accept term
SS = 12	CP = 538	            Match  |
SS = 12	CP = 538	            Reject |
SS = 11	CP = 538	          Accept declaration
SS = 10	CP = 538	          Match  }
SS = 10	CP = 538	          Accept }
SS = 10	CP = 539	        Accept repeat_part
SS = 8	CP = 539	      Accept part
SS = 8	CP = 539	      Match  ,
SS = 8	CP = 539	      Reject ,
SS = 7	CP = 539	      Predict Failed: part
SS = 6	CP = 539	    Accept term
SS = 5	CP = 539	    Match  |
SS = 5	CP = 539	    Reject |
SS = 4	CP = 539	  Accept declaration
SS = 4	CP = 539	  Deduce end_op
SS = 5	CP = 539	    Match  ;
SS = 5	CP = 539	    Accept ;
SS = 4	CP = 540	  Accept end_op
SS = 3	CP = 540	Accept statement
SS = 3	CP = 540	Deduce statement
SS = 4	CP = 540	  Deduce non_terminal_symbol
SS = 4	CP = 540	    Match  id
SS = 4	CP = 540	    Accept id
SS = 4	CP = 541	  Accept non_terminal_symbol
SS = 4	CP = 541	  Deduce assign_op
SS = 5	CP = 541	    Match  ::=
SS = 5	CP = 541	    Accept ::=
SS = 4	CP = 542	  Accept assign_op
SS = 4	CP = 542	  Deduce declaration
SS = 5	CP = 542	    Deduce term
SS = 6	CP = 542	      Deduce part
SS = 6	CP = 542	        Predict Failed in CONDITION
SS = 6	CP = 542	        Predict Failed in CONDITION
SS = 6	CP = 542	        Predict Failed in CONDITION
SS = 8	CP = 542	        Deduce simple_part
SS = 8	CP = 542	          Predict Failed in CONDITION
SS = 10	CP = 542	          Deduce terminal_symbol
SS = 11	CP = 542	            Match  slit
SS = 11	CP = 542	            Accept slit
SS = 10	CP = 543	          Accept terminal_symbol
SS = 8	CP = 543	        Accept simple_part
SS = 6	CP = 543	      Accept part
SS = 7	CP = 543	      Match  ,
SS = 7	CP = 543	      Reject ,
SS = 7	CP = 543	      Deduce part
SS = 9	CP = 543	        Deduce repeat_part
SS = 9	CP = 543	          Match  {
SS = 9	CP = 543	          Accept {
SS = 10	CP = 544	          Deduce declaration
SS = 11	CP = 544	            Deduce term
SS = 12	CP = 544	              Deduce part
SS = 12	CP = 544	                Predict Failed in CONDITION
SS = 12	CP = 544	                Predict Failed in CONDITION
SS = 12	CP = 544	                Predict Failed in CONDITION
SS = 14	CP = 544	                Deduce simple_part
SS = 16	CP = 544	                  Deduce right_non_terminal_symbol
SS = 17	CP = 544	                    Deduce non_terminal_symbol
SS = 17	CP = 544	                      Match  id
SS = 17	CP = 544	                      Accept id
SS = 17	CP = 545	                    Accept non_terminal_symbol
SS = 16	CP = 545	                  Accept right_non_terminal_symbol
SS = 14	CP = 545	                Accept simple_part
SS = 12	CP = 545	              Accept part
SS = 13	CP = 545	              Match  ,
SS = 13	CP = 545	              Reject ,
SS = 13	CP = 545	              Deduce part
SS = 15	CP = 545	                Deduce repeat_part
SS = 15	CP = 545	                  Match  {
SS = 15	CP = 545	                  Accept {
SS = 16	CP = 546	                  Deduce declaration
SS = 17	CP = 546	                    Deduce term
SS = 18	CP = 546	                      Deduce part
SS = 18	CP = 546	                        Predict Failed in CONDITION
SS = 18	CP = 546	                        Predict Failed in CONDITION
SS = 18	CP = 546	                        Predict Failed in CONDITION
SS = 20	CP = 546	                        Deduce simple_part
SS = 20	CP = 546	                          Predict Failed in CONDITION
SS = 22	CP = 546	                          Deduce terminal_symbol
SS = 22	CP = 546	                            Predict Failed in CONDITION
SS = 22	CP = 546	                            Predict Failed in CONDITION
SS = 23	CP = 546	                            Match  token
SS = 23	CP = 546	                            Accept token
SS = 22	CP = 547	                          Accept terminal_symbol
SS = 20	CP = 547	                        Accept simple_part
SS = 18	CP = 547	                      Accept part
SS = 19	CP = 547	                      Match  ,
SS = 19	CP = 547	                      Reject ,
SS = 18	CP = 547	                      Predict Failed: part
SS = 17	CP = 547	                    Accept term
SS = 17	CP = 547	                    Match  |
SS = 17	CP = 547	                    Reject |
SS = 16	CP = 547	                  Accept declaration
SS = 15	CP = 547	                  Match  }
SS = 15	CP = 547	                  Accept }
SS = 15	CP = 548	                Accept repeat_part
SS = 13	CP = 548	              Accept part
SS = 13	CP = 548	              Match  ,
SS = 13	CP = 548	              Reject ,
SS = 12	CP = 548	              Predict Failed: part
SS = 11	CP = 548	            Accept term
SS = 11	CP = 548	            Match  |
SS = 11	CP = 548	            Reject |
SS = 10	CP = 548	          Accept declaration
SS = 9	CP = 548	          Match  }
SS = 9	CP = 548	          Accept }
SS = 9	CP = 549	        Accept repeat_part
SS = 7	CP = 549	      Accept part
SS = 7	CP = 549	      Match  ,
SS = 7	CP = 549	      Reject ,
SS = 7	CP = 549	      Deduce part
SS = 7	CP = 549	        Predict Failed in CONDITION
SS = 7	CP = 549	        Predict Failed in CONDITION
SS = 7	CP = 549	        Predict Failed in CONDITION
SS = 9	CP = 549	        Deduce simple_part
SS = 9	CP = 549	          Predict Failed in CONDITION
SS = 11	CP = 549	          Deduce terminal_symbol
SS = 12	CP = 549	            Match  slit
SS = 12	CP = 549	            Accept slit
SS = 11	CP = 550	          Accept terminal_symbol
SS = 9	CP = 550	        Accept simple_part
SS = 7	CP = 550	      Accept part
SS = 7	CP = 550	      Match  ,
SS = 7	CP = 550	      Reject ,
SS = 6	CP = 550	      Predict Failed: part
SS = 5	CP = 550	    Accept term
SS = 5	CP = 550	    Match  |
SS = 5	CP = 550	    Accept |
SS = 6	CP = 551	    Deduce term
SS = 7	CP = 551	      Deduce part
SS = 7	CP = 551	        Predict Failed in CONDITION
SS = 7	CP = 551	        Predict Failed in CONDITION
SS = 7	CP = 551	        Predict Failed in CONDITION
SS = 9	CP = 551	        Deduce simple_part
SS = 9	CP = 551	          Predict Failed in CONDITION
SS = 11	CP = 551	          Deduce terminal_symbol
SS = 12	CP = 551	            Match  slit
SS = 12	CP = 551	            Accept slit
SS = 11	CP = 552	          Accept terminal_symbol
SS = 9	CP = 552	        Accept simple_part
SS = 7	CP = 552	      Accept part
SS = 8	CP = 552	      Match  ,
SS = 8	CP = 552	      Reject ,
SS = 8	CP = 552	      Deduce part
SS = 8	CP = 552	        Predict Failed in CONDITION
SS = 8	CP = 552	        Predict Failed in CONDITION
SS = 8	CP = 552	        Predict Failed in CONDITION
SS = 10	CP = 552	        Deduce simple_part
SS = 12	CP = 552	          Deduce right_non_terminal_symbol
SS = 13	CP = 552	            Deduce non_terminal_symbol
SS = 13	CP = 552	              Match  id
SS = 13	CP = 552	              Accept id
SS = 13	CP = 553	            Accept non_terminal_symbol
SS = 12	CP = 553	          Accept right_non_terminal_symbol
SS = 10	CP = 553	        Accept simple_part
SS = 8	CP = 553	      Accept part
SS = 8	CP = 553	      Match  ,
SS = 8	CP = 553	      Reject ,
SS = 7	CP = 553	      Predict Failed: part
SS = 6	CP = 553	    Accept term
SS = 5	CP = 553	    Match  |
SS = 5	CP = 553	    Reject |
SS = 4	CP = 553	  Accept declaration
SS = 4	CP = 553	  Deduce end_op
SS = 5	CP = 553	    Match  ;
SS = 5	CP = 553	    Accept ;
SS = 4	CP = 554	  Accept end_op
SS = 3	CP = 554	Accept statement
SS = 3	CP = 554	Deduce statement
SS = 4	CP = 554	  Deduce non_terminal_symbol
SS = 4	CP = 554	    Match  id
SS = 4	CP = 554	    Accept id
SS = 4	CP = 555	  Accept non_terminal_symbol
SS = 4	CP = 555	  Deduce assign_op
SS = 5	CP = 555	    Match  ::=
SS = 5	CP = 555	    Accept ::=
SS = 4	CP = 556	  Accept assign_op
SS = 4	CP = 556	  Deduce declaration
SS = 5	CP = 556	    Deduce term
SS = 6	CP = 556	      Deduce part
SS = 6	CP = 556	        Predict Failed in CONDITION
SS = 6	CP = 556	        Predict Failed in CONDITION
SS = 6	CP = 556	        Predict Failed in CONDITION
SS = 8	CP = 556	        Deduce simple_part
SS = 10	CP = 556	          Deduce right_non_terminal_symbol
SS = 11	CP = 556	            Deduce non_terminal_symbol
SS = 11	CP = 556	              Match  id
SS = 11	CP = 556	              Accept id
SS = 11	CP = 557	            Accept non_terminal_symbol
SS = 10	CP = 557	          Accept right_non_terminal_symbol
SS = 8	CP = 557	        Accept simple_part
SS = 6	CP = 557	      Accept part
SS = 7	CP = 557	      Match  ,
SS = 7	CP = 557	      Reject ,
SS = 7	CP = 557	      Deduce part
SS = 7	CP = 557	        Predict Failed in CONDITION
SS = 7	CP = 557	        Predict Failed in CONDITION
SS = 9	CP = 557	        Deduce alternative_part
SS = 9	CP = 557	          Match  [
SS = 9	CP = 557	          Accept [
SS = 10	CP = 558	          Deduce declaration
SS = 11	CP = 558	            Deduce term
SS = 12	CP = 558	              Deduce part
SS = 12	CP = 558	                Predict Failed in CONDITION
SS = 12	CP = 558	                Predict Failed in CONDITION
SS = 12	CP = 558	                Predict Failed in CONDITION
SS = 14	CP = 558	                Deduce simple_part
SS = 16	CP = 558	                  Deduce right_non_terminal_symbol
SS = 17	CP = 558	                    Deduce non_terminal_symbol
SS = 17	CP = 558	                      Match  id
SS = 17	CP = 558	                      Accept id
SS = 17	CP = 559	                    Accept non_terminal_symbol
SS = 16	CP = 559	                  Accept right_non_terminal_symbol
SS = 14	CP = 559	                Accept simple_part
SS = 12	CP = 559	              Accept part
SS = 13	CP = 559	              Match  ,
SS = 13	CP = 559	              Reject ,
SS = 12	CP = 559	              Predict Failed: part
SS = 11	CP = 559	            Accept term
SS = 11	CP = 559	            Match  |
SS = 11	CP = 559	            Reject |
SS = 10	CP = 559	          Accept declaration
SS = 9	CP = 559	          Match  ]
SS = 9	CP = 559	          Accept ]
SS = 9	CP = 560	        Accept alternative_part
SS = 7	CP = 560	      Accept part
SS = 7	CP = 560	      Match  ,
SS = 7	CP = 560	      Reject ,
SS = 6	CP = 560	      Predict Failed: part
SS = 5	CP = 560	    Accept term
SS = 5	CP = 560	    Match  |
SS = 5	CP = 560	    Reject |
SS = 4	CP = 560	  Accept declaration
SS = 4	CP = 560	  Deduce end_op
SS = 5	CP = 560	    Match  ;
SS = 5	CP = 560	    Accept ;
SS = 4	CP = 561	  Accept end_op
SS = 3	CP = 561	Accept statement
SS = 3	CP = 561	Deduce statement
SS = 4	CP = 561	  Deduce non_terminal_symbol
SS = 4	CP = 561	    Match  id
SS = 4	CP = 561	    Accept id
SS = 4	CP = 562	  Accept non_terminal_symbol
SS = 4	CP = 562	  Deduce assign_op
SS = 5	CP = 562	    Match  ::=
SS = 5	CP = 562	    Accept ::=
SS = 4	CP = 563	  Accept assign_op
SS = 4	CP = 563	  Deduce declaration
SS = 5	CP = 563	    Deduce term
SS = 6	CP = 563	      Deduce part
SS = 6	CP = 563	        Predict Failed in CONDITION
SS = 6	CP = 563	        Predict Failed in CONDITION
SS = 6	CP = 563	        Predict Failed in CONDITION
SS = 8	CP = 563	        Deduce simple_part
SS = 8	CP = 563	          Predict Failed in CONDITION
SS = 10	CP = 563	          Deduce terminal_symbol
SS = 11	CP = 563	            Match  slit
SS = 11	CP = 563	            Accept slit
SS = 10	CP = 564	          Accept terminal_symbol
SS = 8	CP = 564	        Accept simple_part
SS = 6	CP = 564	      Accept part
SS = 7	CP = 564	      Match  ,
SS = 7	CP = 564	      Reject ,
SS = 7	CP = 564	      Deduce part
SS = 7	CP = 564	        Predict Failed in CONDITION
SS = 7	CP = 564	        Predict Failed in CONDITION
SS = 7	CP = 564	        Predict Failed in CONDITION
SS = 9	CP = 564	        Deduce simple_part
SS = 11	CP = 564	          Deduce right_non_terminal_symbol
SS = 12	CP = 564	            Deduce non_terminal_symbol
SS = 12	CP = 564	              Match  id
SS = 12	CP = 564	              Accept id
SS = 12	CP = 565	            Accept non_terminal_symbol
SS = 11	CP = 565	          Accept right_non_terminal_symbol
SS = 9	CP = 565	        Accept simple_part
SS = 7	CP = 565	      Accept part
SS = 7	CP = 565	      Match  ,
SS = 7	CP = 565	      Reject ,
SS = 7	CP = 565	      Deduce part
SS = 7	CP = 565	        Predict Failed in CONDITION
SS = 7	CP = 565	        Predict Failed in CONDITION
SS = 7	CP = 565	        Predict Failed in CONDITION
SS = 9	CP = 565	        Deduce simple_part
SS = 9	CP = 565	          Predict Failed in CONDITION
SS = 11	CP = 565	          Deduce terminal_symbol
SS = 12	CP = 565	            Match  slit
SS = 12	CP = 565	            Accept slit
SS = 11	CP = 566	          Accept terminal_symbol
SS = 9	CP = 566	        Accept simple_part
SS = 7	CP = 566	      Accept part
SS = 7	CP = 566	      Match  ,
SS = 7	CP = 566	      Reject ,
SS = 7	CP = 566	      Deduce part
SS = 7	CP = 566	        Predict Failed in CONDITION
SS = 7	CP = 566	        Predict Failed in CONDITION
SS = 7	CP = 566	        Predict Failed in CONDITION
SS = 9	CP = 566	        Deduce simple_part
SS = 11	CP = 566	          Deduce right_non_terminal_symbol
SS = 12	CP = 566	            Deduce non_terminal_symbol
SS = 12	CP = 566	              Match  id
SS = 12	CP = 566	              Accept id
SS = 12	CP = 567	            Accept non_terminal_symbol
SS = 11	CP = 567	          Accept right_non_terminal_symbol
SS = 9	CP = 567	        Accept simple_part
SS = 7	CP = 567	      Accept part
SS = 7	CP = 567	      Match  ,
SS = 7	CP = 567	      Reject ,
SS = 6	CP = 567	      Predict Failed: part
SS = 5	CP = 567	    Accept term
SS = 5	CP = 567	    Match  |
SS = 5	CP = 567	    Accept |
SS = 6	CP = 568	    Deduce term
SS = 7	CP = 568	      Deduce part
SS = 7	CP = 568	        Predict Failed in CONDITION
SS = 7	CP = 568	        Predict Failed in CONDITION
SS = 7	CP = 568	        Predict Failed in CONDITION
SS = 9	CP = 568	        Deduce simple_part
SS = 9	CP = 568	          Predict Failed in CONDITION
SS = 11	CP = 568	          Deduce terminal_symbol
SS = 12	CP = 568	            Match  slit
SS = 12	CP = 568	            Accept slit
SS = 11	CP = 569	          Accept terminal_symbol
SS = 9	CP = 569	        Accept simple_part
SS = 7	CP = 569	      Accept part
SS = 8	CP = 569	      Match  ,
SS = 8	CP = 569	      Reject ,
SS = 8	CP = 569	      Deduce part
SS = 8	CP = 569	        Predict Failed in CONDITION
SS = 8	CP = 569	        Predict Failed in CONDITION
SS = 8	CP = 569	        Predict Failed in CONDITION
SS = 10	CP = 569	        Deduce simple_part
SS = 12	CP = 569	          Deduce right_non_terminal_symbol
SS = 13	CP = 569	            Deduce non_terminal_symbol
SS = 13	CP = 569	              Match  id
SS = 13	CP = 569	              Accept id
SS = 13	CP = 570	            Accept non_terminal_symbol
SS = 12	CP = 570	          Accept right_non_terminal_symbol
SS = 10	CP = 570	        Accept simple_part
SS = 8	CP = 570	      Accept part
SS = 8	CP = 570	      Match  ,
SS = 8	CP = 570	      Reject ,
SS = 7	CP = 570	      Predict Failed: part
SS = 6	CP = 570	    Accept term
SS = 5	CP = 570	    Match  |
SS = 5	CP = 570	    Reject |
SS = 4	CP = 570	  Accept declaration
SS = 4	CP = 570	  Deduce end_op
SS = 5	CP = 570	    Match  ;
SS = 5	CP = 570	    Accept ;
SS = 4	CP = 571	  Accept end_op
SS = 3	CP = 571	Accept statement
SS = 3	CP = 571	Deduce statement
SS = 4	CP = 571	  Deduce non_terminal_symbol
SS = 4	CP = 571	    Match  id
SS = 4	CP = 571	    Accept id
SS = 4	CP = 572	  Accept non_terminal_symbol
SS = 4	CP = 572	  Deduce assign_op
SS = 5	CP = 572	    Match  ::=
SS = 5	CP = 572	    Accept ::=
SS = 4	CP = 573	  Accept assign_op
SS = 4	CP = 573	  Deduce declaration
SS = 5	CP = 573	    Deduce term
SS = 6	CP = 573	      Deduce part
SS = 6	CP = 573	        Predict Failed in CONDITION
SS = 6	CP = 573	        Predict Failed in CONDITION
SS = 6	CP = 573	        Predict Failed in CONDITION
SS = 8	CP = 573	        Deduce simple_part
SS = 10	CP = 573	          Deduce right_non_terminal_symbol
SS = 11	CP = 573	            Deduce non_terminal_symbol
SS = 11	CP = 573	              Match  id
SS = 11	CP = 573	              Accept id
SS = 11	CP = 574	            Accept non_terminal_symbol
SS = 10	CP = 574	          Accept right_non_terminal_symbol
SS = 8	CP = 574	        Accept simple_part
SS = 6	CP = 574	      Accept part
SS = 7	CP = 574	      Match  ,
SS = 7	CP = 574	      Reject ,
SS = 7	CP = 574	      Deduce part
SS = 7	CP = 574	        Predict Failed in CONDITION
SS = 7	CP = 574	        Predict Failed in CONDITION
SS = 9	CP = 574	        Deduce alternative_part
SS = 9	CP = 574	          Match  [
SS = 9	CP = 574	          Accept [
SS = 10	CP = 575	          Deduce declaration
SS = 11	CP = 575	            Deduce term
SS = 12	CP = 575	              Deduce part
SS = 12	CP = 575	                Predict Failed in CONDITION
SS = 14	CP = 575	                Deduce declaration_part
SS = 14	CP = 575	                  Match  (
SS = 14	CP = 575	                  Accept (
SS = 15	CP = 576	                  Deduce declaration
SS = 16	CP = 576	                    Deduce term
SS = 17	CP = 576	                      Deduce part
SS = 17	CP = 576	                        Predict Failed in CONDITION
SS = 17	CP = 576	                        Predict Failed in CONDITION
SS = 17	CP = 576	                        Predict Failed in CONDITION
SS = 19	CP = 576	                        Deduce simple_part
SS = 19	CP = 576	                          Predict Failed in CONDITION
SS = 21	CP = 576	                          Deduce terminal_symbol
SS = 22	CP = 576	                            Match  slit
SS = 22	CP = 576	                            Accept slit
SS = 21	CP = 577	                          Accept terminal_symbol
SS = 19	CP = 577	                        Accept simple_part
SS = 17	CP = 577	                      Accept part
SS = 18	CP = 577	                      Match  ,
SS = 18	CP = 577	                      Reject ,
SS = 17	CP = 577	                      Predict Failed: part
SS = 16	CP = 577	                    Accept term
SS = 16	CP = 577	                    Match  |
SS = 16	CP = 577	                    Accept |
SS = 17	CP = 578	                    Deduce term
SS = 18	CP = 578	                      Deduce part
SS = 18	CP = 578	                        Predict Failed in CONDITION
SS = 18	CP = 578	                        Predict Failed in CONDITION
SS = 18	CP = 578	                        Predict Failed in CONDITION
SS = 20	CP = 578	                        Deduce simple_part
SS = 20	CP = 578	                          Predict Failed in CONDITION
SS = 22	CP = 578	                          Deduce terminal_symbol
SS = 23	CP = 578	                            Match  slit
SS = 23	CP = 578	                            Accept slit
SS = 22	CP = 579	                          Accept terminal_symbol
SS = 20	CP = 579	                        Accept simple_part
SS = 18	CP = 579	                      Accept part
SS = 19	CP = 579	                      Match  ,
SS = 19	CP = 579	                      Reject ,
SS = 18	CP = 579	                      Predict Failed: part
SS = 17	CP = 579	                    Accept term
SS = 16	CP = 579	                    Match  |
SS = 16	CP = 579	                    Reject |
SS = 15	CP = 579	                  Accept declaration
SS = 14	CP = 579	                  Match  )
SS = 14	CP = 579	                  Accept )
SS = 14	CP = 580	                Accept declaration_part
SS = 12	CP = 580	              Accept part
SS = 13	CP = 580	              Match  ,
SS = 13	CP = 580	              Reject ,
SS = 13	CP = 580	              Deduce part
SS = 13	CP = 580	                Predict Failed in CONDITION
SS = 13	CP = 580	                Predict Failed in CONDITION
SS = 13	CP = 580	                Predict Failed in CONDITION
SS = 15	CP = 580	                Deduce simple_part
SS = 17	CP = 580	                  Deduce right_non_terminal_symbol
SS = 18	CP = 580	                    Deduce non_terminal_symbol
SS = 18	CP = 580	                      Match  id
SS = 18	CP = 580	                      Accept id
SS = 18	CP = 581	                    Accept non_terminal_symbol
SS = 17	CP = 581	                  Accept right_non_terminal_symbol
SS = 15	CP = 581	                Accept simple_part
SS = 13	CP = 581	              Accept part
SS = 13	CP = 581	              Match  ,
SS = 13	CP = 581	              Reject ,
SS = 12	CP = 581	              Predict Failed: part
SS = 11	CP = 581	            Accept term
SS = 11	CP = 581	            Match  |
SS = 11	CP = 581	            Reject |
SS = 10	CP = 581	          Accept declaration
SS = 9	CP = 581	          Match  ]
SS = 9	CP = 581	          Accept ]
SS = 9	CP = 582	        Accept alternative_part
SS = 7	CP = 582	      Accept part
SS = 7	CP = 582	      Match  ,
SS = 7	CP = 582	      Reject ,
SS = 6	CP = 582	      Predict Failed: part
SS = 5	CP = 582	    Accept term
SS = 5	CP = 582	    Match  |
SS = 5	CP = 582	    Reject |
SS = 4	CP = 582	  Accept declaration
SS = 4	CP = 582	  Deduce end_op
SS = 5	CP = 582	    Match  ;
SS = 5	CP = 582	    Accept ;
SS = 4	CP = 583	  Accept end_op
SS = 3	CP = 583	Accept statement
SS = 3	CP = 583	Deduce statement
SS = 4	CP = 583	  Deduce non_terminal_symbol
SS = 4	CP = 583	    Match  id
SS = 4	CP = 583	    Accept id
SS = 4	CP = 584	  Accept non_terminal_symbol
SS = 4	CP = 584	  Deduce assign_op
SS = 5	CP = 584	    Match  ::=
SS = 5	CP = 584	    Accept ::=
SS = 4	CP = 585	  Accept assign_op
SS = 4	CP = 585	  Deduce declaration
SS = 5	CP = 585	    Deduce term
SS = 6	CP = 585	      Deduce part
SS = 6	CP = 585	        Predict Failed in CONDITION
SS = 6	CP = 585	        Predict Failed in CONDITION
SS = 6	CP = 585	        Predict Failed in CONDITION
SS = 8	CP = 585	        Deduce simple_part
SS = 10	CP = 585	          Deduce right_non_terminal_symbol
SS = 11	CP = 585	            Deduce non_terminal_symbol
SS = 11	CP = 585	              Match  id
SS = 11	CP = 585	              Accept id
SS = 11	CP = 586	            Accept non_terminal_symbol
SS = 10	CP = 586	          Accept right_non_terminal_symbol
SS = 8	CP = 586	        Accept simple_part
SS = 6	CP = 586	      Accept part
SS = 7	CP = 586	      Match  ,
SS = 7	CP = 586	      Reject ,
SS = 7	CP = 586	      Deduce part
SS = 7	CP = 586	        Predict Failed in CONDITION
SS = 7	CP = 586	        Predict Failed in CONDITION
SS = 9	CP = 586	        Deduce alternative_part
SS = 9	CP = 586	          Match  [
SS = 9	CP = 586	          Accept [
SS = 10	CP = 587	          Deduce declaration
SS = 11	CP = 587	            Deduce term
SS = 12	CP = 587	              Deduce part
SS = 12	CP = 587	                Predict Failed in CONDITION
SS = 14	CP = 587	                Deduce declaration_part
SS = 14	CP = 587	                  Match  (
SS = 14	CP = 587	                  Accept (
SS = 15	CP = 588	                  Deduce declaration
SS = 16	CP = 588	                    Deduce term
SS = 17	CP = 588	                      Deduce part
SS = 17	CP = 588	                        Predict Failed in CONDITION
SS = 17	CP = 588	                        Predict Failed in CONDITION
SS = 17	CP = 588	                        Predict Failed in CONDITION
SS = 19	CP = 588	                        Deduce simple_part
SS = 19	CP = 588	                          Predict Failed in CONDITION
SS = 21	CP = 588	                          Deduce terminal_symbol
SS = 22	CP = 588	                            Match  slit
SS = 22	CP = 588	                            Accept slit
SS = 21	CP = 589	                          Accept terminal_symbol
SS = 19	CP = 589	                        Accept simple_part
SS = 17	CP = 589	                      Accept part
SS = 18	CP = 589	                      Match  ,
SS = 18	CP = 589	                      Reject ,
SS = 17	CP = 589	                      Predict Failed: part
SS = 16	CP = 589	                    Accept term
SS = 16	CP = 589	                    Match  |
SS = 16	CP = 589	                    Accept |
SS = 17	CP = 590	                    Deduce term
SS = 18	CP = 590	                      Deduce part
SS = 18	CP = 590	                        Predict Failed in CONDITION
SS = 18	CP = 590	                        Predict Failed in CONDITION
SS = 18	CP = 590	                        Predict Failed in CONDITION
SS = 20	CP = 590	                        Deduce simple_part
SS = 20	CP = 590	                          Predict Failed in CONDITION
SS = 22	CP = 590	                          Deduce terminal_symbol
SS = 23	CP = 590	                            Match  slit
SS = 23	CP = 590	                            Accept slit
SS = 22	CP = 591	                          Accept terminal_symbol
SS = 20	CP = 591	                        Accept simple_part
SS = 18	CP = 591	                      Accept part
SS = 19	CP = 591	                      Match  ,
SS = 19	CP = 591	                      Reject ,
SS = 18	CP = 591	                      Predict Failed: part
SS = 17	CP = 591	                    Accept term
SS = 16	CP = 591	                    Match  |
SS = 16	CP = 591	                    Reject |
SS = 15	CP = 591	                  Accept declaration
SS = 14	CP = 591	                  Match  )
SS = 14	CP = 591	                  Accept )
SS = 14	CP = 592	                Accept declaration_part
SS = 12	CP = 592	              Accept part
SS = 13	CP = 592	              Match  ,
SS = 13	CP = 592	              Reject ,
SS = 13	CP = 592	              Deduce part
SS = 13	CP = 592	                Predict Failed in CONDITION
SS = 13	CP = 592	                Predict Failed in CONDITION
SS = 13	CP = 592	                Predict Failed in CONDITION
SS = 15	CP = 592	                Deduce simple_part
SS = 17	CP = 592	                  Deduce right_non_terminal_symbol
SS = 18	CP = 592	                    Deduce non_terminal_symbol
SS = 18	CP = 592	                      Match  id
SS = 18	CP = 592	                      Accept id
SS = 18	CP = 593	                    Accept non_terminal_symbol
SS = 17	CP = 593	                  Accept right_non_terminal_symbol
SS = 15	CP = 593	                Accept simple_part
SS = 13	CP = 593	              Accept part
SS = 13	CP = 593	              Match  ,
SS = 13	CP = 593	              Reject ,
SS = 12	CP = 593	              Predict Failed: part
SS = 11	CP = 593	            Accept term
SS = 11	CP = 593	            Match  |
SS = 11	CP = 593	            Reject |
SS = 10	CP = 593	          Accept declaration
SS = 9	CP = 593	          Match  ]
SS = 9	CP = 593	          Accept ]
SS = 9	CP = 594	        Accept alternative_part
SS = 7	CP = 594	      Accept part
SS = 7	CP = 594	      Match  ,
SS = 7	CP = 594	      Reject ,
SS = 6	CP = 594	      Predict Failed: part
SS = 5	CP = 594	    Accept term
SS = 5	CP = 594	    Match  |
SS = 5	CP = 594	    Reject |
SS = 4	CP = 594	  Accept declaration
SS = 4	CP = 594	  Deduce end_op
SS = 5	CP = 594	    Match  ;
SS = 5	CP = 594	    Accept ;
SS = 4	CP = 595	  Accept end_op
SS = 3	CP = 595	Accept statement
SS = 3	CP = 595	Deduce statement
SS = 4	CP = 595	  Deduce non_terminal_symbol
SS = 4	CP = 595	    Match  id
SS = 4	CP = 595	    Accept id
SS = 4	CP = 596	  Accept non_terminal_symbol
SS = 4	CP = 596	  Deduce assign_op
SS = 5	CP = 596	    Match  ::=
SS = 5	CP = 596	    Accept ::=
SS = 4	CP = 597	  Accept assign_op
SS = 4	CP = 597	  Deduce declaration
SS = 5	CP = 597	    Deduce term
SS = 6	CP = 597	      Deduce part
SS = 6	CP = 597	        Predict Failed in CONDITION
SS = 6	CP = 597	        Predict Failed in CONDITION
SS = 6	CP = 597	        Predict Failed in CONDITION
SS = 8	CP = 597	        Deduce simple_part
SS = 10	CP = 597	          Deduce right_non_terminal_symbol
SS = 11	CP = 597	            Deduce non_terminal_symbol
SS = 11	CP = 597	              Match  id
SS = 11	CP = 597	              Accept id
SS = 11	CP = 598	            Accept non_terminal_symbol
SS = 10	CP = 598	          Accept right_non_terminal_symbol
SS = 8	CP = 598	        Accept simple_part
SS = 6	CP = 598	      Accept part
SS = 7	CP = 598	      Match  ,
SS = 7	CP = 598	      Reject ,
SS = 7	CP = 598	      Deduce part
SS = 7	CP = 598	        Predict Failed in CONDITION
SS = 7	CP = 598	        Predict Failed in CONDITION
SS = 9	CP = 598	        Deduce alternative_part
SS = 9	CP = 598	          Match  [
SS = 9	CP = 598	          Accept [
SS = 10	CP = 599	          Deduce declaration
SS = 11	CP = 599	            Deduce term
SS = 12	CP = 599	              Deduce part
SS = 12	CP = 599	                Predict Failed in CONDITION
SS = 14	CP = 599	                Deduce declaration_part
SS = 14	CP = 599	                  Match  (
SS = 14	CP = 599	                  Accept (
SS = 15	CP = 600	                  Deduce declaration
SS = 16	CP = 600	                    Deduce term
SS = 17	CP = 600	                      Deduce part
SS = 17	CP = 600	                        Predict Failed in CONDITION
SS = 17	CP = 600	                        Predict Failed in CONDITION
SS = 17	CP = 600	                        Predict Failed in CONDITION
SS = 19	CP = 600	                        Deduce simple_part
SS = 19	CP = 600	                          Predict Failed in CONDITION
SS = 21	CP = 600	                          Deduce terminal_symbol
SS = 22	CP = 600	                            Match  slit
SS = 22	CP = 600	                            Accept slit
SS = 21	CP = 601	                          Accept terminal_symbol
SS = 19	CP = 601	                        Accept simple_part
SS = 17	CP = 601	                      Accept part
SS = 18	CP = 601	                      Match  ,
SS = 18	CP = 601	                      Reject ,
SS = 17	CP = 601	                      Predict Failed: part
SS = 16	CP = 601	                    Accept term
SS = 16	CP = 601	                    Match  |
SS = 16	CP = 601	                    Accept |
SS = 17	CP = 602	                    Deduce term
SS = 18	CP = 602	                      Deduce part
SS = 18	CP = 602	                        Predict Failed in CONDITION
SS = 18	CP = 602	                        Predict Failed in CONDITION
SS = 18	CP = 602	                        Predict Failed in CONDITION
SS = 20	CP = 602	                        Deduce simple_part
SS = 20	CP = 602	                          Predict Failed in CONDITION
SS = 22	CP = 602	                          Deduce terminal_symbol
SS = 23	CP = 602	                            Match  slit
SS = 23	CP = 602	                            Accept slit
SS = 22	CP = 603	                          Accept terminal_symbol
SS = 20	CP = 603	                        Accept simple_part
SS = 18	CP = 603	                      Accept part
SS = 19	CP = 603	                      Match  ,
SS = 19	CP = 603	                      Reject ,
SS = 18	CP = 603	                      Predict Failed: part
SS = 17	CP = 603	                    Accept term
SS = 16	CP = 603	                    Match  |
SS = 16	CP = 603	                    Reject |
SS = 15	CP = 603	                  Accept declaration
SS = 14	CP = 603	                  Match  )
SS = 14	CP = 603	                  Accept )
SS = 14	CP = 604	                Accept declaration_part
SS = 12	CP = 604	              Accept part
SS = 13	CP = 604	              Match  ,
SS = 13	CP = 604	              Reject ,
SS = 13	CP = 604	              Deduce part
SS = 13	CP = 604	                Predict Failed in CONDITION
SS = 13	CP = 604	                Predict Failed in CONDITION
SS = 13	CP = 604	                Predict Failed in CONDITION
SS = 15	CP = 604	                Deduce simple_part
SS = 17	CP = 604	                  Deduce right_non_terminal_symbol
SS = 18	CP = 604	                    Deduce non_terminal_symbol
SS = 18	CP = 604	                      Match  id
SS = 18	CP = 604	                      Accept id
SS = 18	CP = 605	                    Accept non_terminal_symbol
SS = 17	CP = 605	                  Accept right_non_terminal_symbol
SS = 15	CP = 605	                Accept simple_part
SS = 13	CP = 605	              Accept part
SS = 13	CP = 605	              Match  ,
SS = 13	CP = 605	              Reject ,
SS = 12	CP = 605	              Predict Failed: part
SS = 11	CP = 605	            Accept term
SS = 11	CP = 605	            Match  |
SS = 11	CP = 605	            Reject |
SS = 10	CP = 605	          Accept declaration
SS = 9	CP = 605	          Match  ]
SS = 9	CP = 605	          Accept ]
SS = 9	CP = 606	        Accept alternative_part
SS = 7	CP = 606	      Accept part
SS = 7	CP = 606	      Match  ,
SS = 7	CP = 606	      Reject ,
SS = 6	CP = 606	      Predict Failed: part
SS = 5	CP = 606	    Accept term
SS = 5	CP = 606	    Match  |
SS = 5	CP = 606	    Reject |
SS = 4	CP = 606	  Accept declaration
SS = 4	CP = 606	  Deduce end_op
SS = 5	CP = 606	    Match  ;
SS = 5	CP = 606	    Accept ;
SS = 4	CP = 607	  Accept end_op
SS = 3	CP = 607	Accept statement
SS = 3	CP = 607	Deduce statement
SS = 4	CP = 607	  Deduce non_terminal_symbol
SS = 4	CP = 607	    Match  id
SS = 4	CP = 607	    Accept id
SS = 4	CP = 608	  Accept non_terminal_symbol
SS = 4	CP = 608	  Deduce assign_op
SS = 5	CP = 608	    Match  ::=
SS = 5	CP = 608	    Accept ::=
SS = 4	CP = 609	  Accept assign_op
SS = 4	CP = 609	  Deduce declaration
SS = 5	CP = 609	    Deduce term
SS = 6	CP = 609	      Deduce part
SS = 6	CP = 609	        Predict Failed in CONDITION
SS = 6	CP = 609	        Predict Failed in CONDITION
SS = 6	CP = 609	        Predict Failed in CONDITION
SS = 8	CP = 609	        Deduce simple_part
SS = 10	CP = 609	          Deduce right_non_terminal_symbol
SS = 11	CP = 609	            Deduce non_terminal_symbol
SS = 11	CP = 609	              Match  id
SS = 11	CP = 609	              Accept id
SS = 11	CP = 610	            Accept non_terminal_symbol
SS = 10	CP = 610	          Accept right_non_terminal_symbol
SS = 8	CP = 610	        Accept simple_part
SS = 6	CP = 610	      Accept part
SS = 7	CP = 610	      Match  ,
SS = 7	CP = 610	      Reject ,
SS = 7	CP = 610	      Deduce part
SS = 7	CP = 610	        Predict Failed in CONDITION
SS = 7	CP = 610	        Predict Failed in CONDITION
SS = 9	CP = 610	        Deduce alternative_part
SS = 9	CP = 610	          Match  [
SS = 9	CP = 610	          Accept [
SS = 10	CP = 611	          Deduce declaration
SS = 11	CP = 611	            Deduce term
SS = 12	CP = 611	              Deduce part
SS = 12	CP = 611	                Predict Failed in CONDITION
SS = 14	CP = 611	                Deduce declaration_part
SS = 14	CP = 611	                  Match  (
SS = 14	CP = 611	                  Accept (
SS = 15	CP = 612	                  Deduce declaration
SS = 16	CP = 612	                    Deduce term
SS = 17	CP = 612	                      Deduce part
SS = 17	CP = 612	                        Predict Failed in CONDITION
SS = 17	CP = 612	                        Predict Failed in CONDITION
SS = 17	CP = 612	                        Predict Failed in CONDITION
SS = 19	CP = 612	                        Deduce simple_part
SS = 19	CP = 612	                          Predict Failed in CONDITION
SS = 21	CP = 612	                          Deduce terminal_symbol
SS = 22	CP = 612	                            Match  slit
SS = 22	CP = 612	                            Accept slit
SS = 21	CP = 613	                          Accept terminal_symbol
SS = 19	CP = 613	                        Accept simple_part
SS = 17	CP = 613	                      Accept part
SS = 18	CP = 613	                      Match  ,
SS = 18	CP = 613	                      Reject ,
SS = 17	CP = 613	                      Predict Failed: part
SS = 16	CP = 613	                    Accept term
SS = 16	CP = 613	                    Match  |
SS = 16	CP = 613	                    Accept |
SS = 17	CP = 614	                    Deduce term
SS = 18	CP = 614	                      Deduce part
SS = 18	CP = 614	                        Predict Failed in CONDITION
SS = 18	CP = 614	                        Predict Failed in CONDITION
SS = 18	CP = 614	                        Predict Failed in CONDITION
SS = 20	CP = 614	                        Deduce simple_part
SS = 20	CP = 614	                          Predict Failed in CONDITION
SS = 22	CP = 614	                          Deduce terminal_symbol
SS = 23	CP = 614	                            Match  slit
SS = 23	CP = 614	                            Accept slit
SS = 22	CP = 615	                          Accept terminal_symbol
SS = 20	CP = 615	                        Accept simple_part
SS = 18	CP = 615	                      Accept part
SS = 19	CP = 615	                      Match  ,
SS = 19	CP = 615	                      Reject ,
SS = 18	CP = 615	                      Predict Failed: part
SS = 17	CP = 615	                    Accept term
SS = 16	CP = 615	                    Match  |
SS = 16	CP = 615	                    Accept |
SS = 17	CP = 616	                    Deduce term
SS = 18	CP = 616	                      Deduce part
SS = 18	CP = 616	                        Predict Failed in CONDITION
SS = 18	CP = 616	                        Predict Failed in CONDITION
SS = 18	CP = 616	                        Predict Failed in CONDITION
SS = 20	CP = 616	                        Deduce simple_part
SS = 20	CP = 616	                          Predict Failed in CONDITION
SS = 22	CP = 616	                          Deduce terminal_symbol
SS = 23	CP = 616	                            Match  slit
SS = 23	CP = 616	                            Accept slit
SS = 22	CP = 617	                          Accept terminal_symbol
SS = 20	CP = 617	                        Accept simple_part
SS = 18	CP = 617	                      Accept part
SS = 19	CP = 617	                      Match  ,
SS = 19	CP = 617	                      Reject ,
SS = 18	CP = 617	                      Predict Failed: part
SS = 17	CP = 617	                    Accept term
SS = 16	CP = 617	                    Match  |
SS = 16	CP = 617	                    Accept |
SS = 17	CP = 618	                    Deduce term
SS = 18	CP = 618	                      Deduce part
SS = 18	CP = 618	                        Predict Failed in CONDITION
SS = 18	CP = 618	                        Predict Failed in CONDITION
SS = 18	CP = 618	                        Predict Failed in CONDITION
SS = 20	CP = 618	                        Deduce simple_part
SS = 20	CP = 618	                          Predict Failed in CONDITION
SS = 22	CP = 618	                          Deduce terminal_symbol
SS = 23	CP = 618	                            Match  slit
SS = 23	CP = 618	                            Accept slit
SS = 22	CP = 619	                          Accept terminal_symbol
SS = 20	CP = 619	                        Accept simple_part
SS = 18	CP = 619	                      Accept part
SS = 19	CP = 619	                      Match  ,
SS = 19	CP = 619	                      Reject ,
SS = 18	CP = 619	                      Predict Failed: part
SS = 17	CP = 619	                    Accept term
SS = 16	CP = 619	                    Match  |
SS = 16	CP = 619	                    Reject |
SS = 15	CP = 619	                  Accept declaration
SS = 14	CP = 619	                  Match  )
SS = 14	CP = 619	                  Accept )
SS = 14	CP = 620	                Accept declaration_part
SS = 12	CP = 620	              Accept part
SS = 13	CP = 620	              Match  ,
SS = 13	CP = 620	              Reject ,
SS = 13	CP = 620	              Deduce part
SS = 13	CP = 620	                Predict Failed in CONDITION
SS = 13	CP = 620	                Predict Failed in CONDITION
SS = 13	CP = 620	                Predict Failed in CONDITION
SS = 15	CP = 620	                Deduce simple_part
SS = 17	CP = 620	                  Deduce right_non_terminal_symbol
SS = 18	CP = 620	                    Deduce non_terminal_symbol
SS = 18	CP = 620	                      Match  id
SS = 18	CP = 620	                      Accept id
SS = 18	CP = 621	                    Accept non_terminal_symbol
SS = 17	CP = 621	                  Accept right_non_terminal_symbol
SS = 15	CP = 621	                Accept simple_part
SS = 13	CP = 621	              Accept part
SS = 13	CP = 621	              Match  ,
SS = 13	CP = 621	              Reject ,
SS = 12	CP = 621	              Predict Failed: part
SS = 11	CP = 621	            Accept term
SS = 11	CP = 621	            Match  |
SS = 11	CP = 621	            Reject |
SS = 10	CP = 621	          Accept declaration
SS = 9	CP = 621	          Match  ]
SS = 9	CP = 621	          Accept ]
SS = 9	CP = 622	        Accept alternative_part
SS = 7	CP = 622	      Accept part
SS = 7	CP = 622	      Match  ,
SS = 7	CP = 622	      Reject ,
SS = 6	CP = 622	      Predict Failed: part
SS = 5	CP = 622	    Accept term
SS = 5	CP = 622	    Match  |
SS = 5	CP = 622	    Reject |
SS = 4	CP = 622	  Accept declaration
SS = 4	CP = 622	  Deduce end_op
SS = 5	CP = 622	    Match  ;
SS = 5	CP = 622	    Accept ;
SS = 4	CP = 623	  Accept end_op
SS = 3	CP = 623	Accept statement
SS = 3	CP = 623	Deduce statement
SS = 4	CP = 623	  Deduce non_terminal_symbol
SS = 4	CP = 623	    Match  id
SS = 4	CP = 623	    Accept id
SS = 4	CP = 624	  Accept non_terminal_symbol
SS = 4	CP = 624	  Deduce assign_op
SS = 5	CP = 624	    Match  ::=
SS = 5	CP = 624	    Accept ::=
SS = 4	CP = 625	  Accept assign_op
SS = 4	CP = 625	  Deduce declaration
SS = 5	CP = 625	    Deduce term
SS = 6	CP = 625	      Deduce part
SS = 6	CP = 625	        Predict Failed in CONDITION
SS = 6	CP = 625	        Predict Failed in CONDITION
SS = 6	CP = 625	        Predict Failed in CONDITION
SS = 8	CP = 625	        Deduce simple_part
SS = 10	CP = 625	          Deduce right_non_terminal_symbol
SS = 11	CP = 625	            Deduce non_terminal_symbol
SS = 11	CP = 625	              Match  id
SS = 11	CP = 625	              Accept id
SS = 11	CP = 626	            Accept non_terminal_symbol
SS = 10	CP = 626	          Accept right_non_terminal_symbol
SS = 8	CP = 626	        Accept simple_part
SS = 6	CP = 626	      Accept part
SS = 7	CP = 626	      Match  ,
SS = 7	CP = 626	      Reject ,
SS = 7	CP = 626	      Deduce part
SS = 7	CP = 626	        Predict Failed in CONDITION
SS = 7	CP = 626	        Predict Failed in CONDITION
SS = 9	CP = 626	        Deduce alternative_part
SS = 9	CP = 626	          Match  [
SS = 9	CP = 626	          Accept [
SS = 10	CP = 627	          Deduce declaration
SS = 11	CP = 627	            Deduce term
SS = 12	CP = 627	              Deduce part
SS = 12	CP = 627	                Predict Failed in CONDITION
SS = 14	CP = 627	                Deduce declaration_part
SS = 14	CP = 627	                  Match  (
SS = 14	CP = 627	                  Accept (
SS = 15	CP = 628	                  Deduce declaration
SS = 16	CP = 628	                    Deduce term
SS = 17	CP = 628	                      Deduce part
SS = 17	CP = 628	                        Predict Failed in CONDITION
SS = 17	CP = 628	                        Predict Failed in CONDITION
SS = 17	CP = 628	                        Predict Failed in CONDITION
SS = 19	CP = 628	                        Deduce simple_part
SS = 19	CP = 628	                          Predict Failed in CONDITION
SS = 21	CP = 628	                          Deduce terminal_symbol
SS = 22	CP = 628	                            Match  slit
SS = 22	CP = 628	                            Accept slit
SS = 21	CP = 629	                          Accept terminal_symbol
SS = 19	CP = 629	                        Accept simple_part
SS = 17	CP = 629	                      Accept part
SS = 18	CP = 629	                      Match  ,
SS = 18	CP = 629	                      Reject ,
SS = 17	CP = 629	                      Predict Failed: part
SS = 16	CP = 629	                    Accept term
SS = 16	CP = 629	                    Match  |
SS = 16	CP = 629	                    Accept |
SS = 17	CP = 630	                    Deduce term
SS = 18	CP = 630	                      Deduce part
SS = 18	CP = 630	                        Predict Failed in CONDITION
SS = 18	CP = 630	                        Predict Failed in CONDITION
SS = 18	CP = 630	                        Predict Failed in CONDITION
SS = 20	CP = 630	                        Deduce simple_part
SS = 20	CP = 630	                          Predict Failed in CONDITION
SS = 22	CP = 630	                          Deduce terminal_symbol
SS = 23	CP = 630	                            Match  slit
SS = 23	CP = 630	                            Accept slit
SS = 22	CP = 631	                          Accept terminal_symbol
SS = 20	CP = 631	                        Accept simple_part
SS = 18	CP = 631	                      Accept part
SS = 19	CP = 631	                      Match  ,
SS = 19	CP = 631	                      Reject ,
SS = 18	CP = 631	                      Predict Failed: part
SS = 17	CP = 631	                    Accept term
SS = 16	CP = 631	                    Match  |
SS = 16	CP = 631	                    Reject |
SS = 15	CP = 631	                  Accept declaration
SS = 14	CP = 631	                  Match  )
SS = 14	CP = 631	                  Accept )
SS = 14	CP = 632	                Accept declaration_part
SS = 12	CP = 632	              Accept part
SS = 13	CP = 632	              Match  ,
SS = 13	CP = 632	              Reject ,
SS = 13	CP = 632	              Deduce part
SS = 13	CP = 632	                Predict Failed in CONDITION
SS = 13	CP = 632	                Predict Failed in CONDITION
SS = 13	CP = 632	                Predict Failed in CONDITION
SS = 15	CP = 632	                Deduce simple_part
SS = 17	CP = 632	                  Deduce right_non_terminal_symbol
SS = 18	CP = 632	                    Deduce non_terminal_symbol
SS = 18	CP = 632	                      Match  id
SS = 18	CP = 632	                      Accept id
SS = 18	CP = 633	                    Accept non_terminal_symbol
SS = 17	CP = 633	                  Accept right_non_terminal_symbol
SS = 15	CP = 633	                Accept simple_part
SS = 13	CP = 633	              Accept part
SS = 13	CP = 633	              Match  ,
SS = 13	CP = 633	              Reject ,
SS = 12	CP = 633	              Predict Failed: part
SS = 11	CP = 633	            Accept term
SS = 11	CP = 633	            Match  |
SS = 11	CP = 633	            Reject |
SS = 10	CP = 633	          Accept declaration
SS = 9	CP = 633	          Match  ]
SS = 9	CP = 633	          Accept ]
SS = 9	CP = 634	        Accept alternative_part
SS = 7	CP = 634	      Accept part
SS = 7	CP = 634	      Match  ,
SS = 7	CP = 634	      Reject ,
SS = 6	CP = 634	      Predict Failed: part
SS = 5	CP = 634	    Accept term
SS = 5	CP = 634	    Match  |
SS = 5	CP = 634	    Reject |
SS = 4	CP = 634	  Accept declaration
SS = 4	CP = 634	  Deduce end_op
SS = 5	CP = 634	    Match  ;
SS = 5	CP = 634	    Accept ;
SS = 4	CP = 635	  Accept end_op
SS = 3	CP = 635	Accept statement
SS = 3	CP = 635	Deduce statement
SS = 4	CP = 635	  Deduce non_terminal_symbol
SS = 4	CP = 635	    Match  id
SS = 4	CP = 635	    Accept id
SS = 4	CP = 636	  Accept non_terminal_symbol
SS = 4	CP = 636	  Deduce assign_op
SS = 5	CP = 636	    Match  ::=
SS = 5	CP = 636	    Accept ::=
SS = 4	CP = 637	  Accept assign_op
SS = 4	CP = 637	  Deduce declaration
SS = 5	CP = 637	    Deduce term
SS = 6	CP = 637	      Deduce part
SS = 6	CP = 637	        Predict Failed in CONDITION
SS = 6	CP = 637	        Predict Failed in CONDITION
SS = 6	CP = 637	        Predict Failed in CONDITION
SS = 8	CP = 637	        Deduce simple_part
SS = 10	CP = 637	          Deduce right_non_terminal_symbol
SS = 11	CP = 637	            Deduce non_terminal_symbol
SS = 11	CP = 637	              Match  id
SS = 11	CP = 637	              Accept id
SS = 11	CP = 638	            Accept non_terminal_symbol
SS = 10	CP = 638	          Accept right_non_terminal_symbol
SS = 8	CP = 638	        Accept simple_part
SS = 6	CP = 638	      Accept part
SS = 7	CP = 638	      Match  ,
SS = 7	CP = 638	      Reject ,
SS = 7	CP = 638	      Deduce part
SS = 7	CP = 638	        Predict Failed in CONDITION
SS = 7	CP = 638	        Predict Failed in CONDITION
SS = 9	CP = 638	        Deduce alternative_part
SS = 9	CP = 638	          Match  [
SS = 9	CP = 638	          Accept [
SS = 10	CP = 639	          Deduce declaration
SS = 11	CP = 639	            Deduce term
SS = 12	CP = 639	              Deduce part
SS = 12	CP = 639	                Predict Failed in CONDITION
SS = 14	CP = 639	                Deduce declaration_part
SS = 14	CP = 639	                  Match  (
SS = 14	CP = 639	                  Accept (
SS = 15	CP = 640	                  Deduce declaration
SS = 16	CP = 640	                    Deduce term
SS = 17	CP = 640	                      Deduce part
SS = 17	CP = 640	                        Predict Failed in CONDITION
SS = 17	CP = 640	                        Predict Failed in CONDITION
SS = 17	CP = 640	                        Predict Failed in CONDITION
SS = 19	CP = 640	                        Deduce simple_part
SS = 19	CP = 640	                          Predict Failed in CONDITION
SS = 21	CP = 640	                          Deduce terminal_symbol
SS = 22	CP = 640	                            Match  slit
SS = 22	CP = 640	                            Accept slit
SS = 21	CP = 641	                          Accept terminal_symbol
SS = 19	CP = 641	                        Accept simple_part
SS = 17	CP = 641	                      Accept part
SS = 18	CP = 641	                      Match  ,
SS = 18	CP = 641	                      Reject ,
SS = 17	CP = 641	                      Predict Failed: part
SS = 16	CP = 641	                    Accept term
SS = 16	CP = 641	                    Match  |
SS = 16	CP = 641	                    Accept |
SS = 17	CP = 642	                    Deduce term
SS = 18	CP = 642	                      Deduce part
SS = 18	CP = 642	                        Predict Failed in CONDITION
SS = 18	CP = 642	                        Predict Failed in CONDITION
SS = 18	CP = 642	                        Predict Failed in CONDITION
SS = 20	CP = 642	                        Deduce simple_part
SS = 20	CP = 642	                          Predict Failed in CONDITION
SS = 22	CP = 642	                          Deduce terminal_symbol
SS = 23	CP = 642	                            Match  slit
SS = 23	CP = 642	                            Accept slit
SS = 22	CP = 643	                          Accept terminal_symbol
SS = 20	CP = 643	                        Accept simple_part
SS = 18	CP = 643	                      Accept part
SS = 19	CP = 643	                      Match  ,
SS = 19	CP = 643	                      Reject ,
SS = 18	CP = 643	                      Predict Failed: part
SS = 17	CP = 643	                    Accept term
SS = 16	CP = 643	                    Match  |
SS = 16	CP = 643	                    Accept |
SS = 17	CP = 644	                    Deduce term
SS = 18	CP = 644	                      Deduce part
SS = 18	CP = 644	                        Predict Failed in CONDITION
SS = 18	CP = 644	                        Predict Failed in CONDITION
SS = 18	CP = 644	                        Predict Failed in CONDITION
SS = 20	CP = 644	                        Deduce simple_part
SS = 20	CP = 644	                          Predict Failed in CONDITION
SS = 22	CP = 644	                          Deduce terminal_symbol
SS = 23	CP = 644	                            Match  slit
SS = 23	CP = 644	                            Accept slit
SS = 22	CP = 645	                          Accept terminal_symbol
SS = 20	CP = 645	                        Accept simple_part
SS = 18	CP = 645	                      Accept part
SS = 19	CP = 645	                      Match  ,
SS = 19	CP = 645	                      Reject ,
SS = 18	CP = 645	                      Predict Failed: part
SS = 17	CP = 645	                    Accept term
SS = 16	CP = 645	                    Match  |
SS = 16	CP = 645	                    Accept |
SS = 17	CP = 646	                    Deduce term
SS = 18	CP = 646	                      Deduce part
SS = 18	CP = 646	                        Predict Failed in CONDITION
SS = 18	CP = 646	                        Predict Failed in CONDITION
SS = 18	CP = 646	                        Predict Failed in CONDITION
SS = 20	CP = 646	                        Deduce simple_part
SS = 20	CP = 646	                          Predict Failed in CONDITION
SS = 22	CP = 646	                          Deduce terminal_symbol
SS = 23	CP = 646	                            Match  slit
SS = 23	CP = 646	                            Accept slit
SS = 22	CP = 647	                          Accept terminal_symbol
SS = 20	CP = 647	                        Accept simple_part
SS = 18	CP = 647	                      Accept part
SS = 19	CP = 647	                      Match  ,
SS = 19	CP = 647	                      Reject ,
SS = 18	CP = 647	                      Predict Failed: part
SS = 17	CP = 647	                    Accept term
SS = 16	CP = 647	                    Match  |
SS = 16	CP = 647	                    Reject |
SS = 15	CP = 647	                  Accept declaration
SS = 14	CP = 647	                  Match  )
SS = 14	CP = 647	                  Accept )
SS = 14	CP = 648	                Accept declaration_part
SS = 12	CP = 648	              Accept part
SS = 13	CP = 648	              Match  ,
SS = 13	CP = 648	              Reject ,
SS = 13	CP = 648	              Deduce part
SS = 13	CP = 648	                Predict Failed in CONDITION
SS = 13	CP = 648	                Predict Failed in CONDITION
SS = 13	CP = 648	                Predict Failed in CONDITION
SS = 15	CP = 648	                Deduce simple_part
SS = 17	CP = 648	                  Deduce right_non_terminal_symbol
SS = 18	CP = 648	                    Deduce non_terminal_symbol
SS = 18	CP = 648	                      Match  id
SS = 18	CP = 648	                      Accept id
SS = 18	CP = 649	                    Accept non_terminal_symbol
SS = 17	CP = 649	                  Accept right_non_terminal_symbol
SS = 15	CP = 649	                Accept simple_part
SS = 13	CP = 649	              Accept part
SS = 13	CP = 649	              Match  ,
SS = 13	CP = 649	              Reject ,
SS = 12	CP = 649	              Predict Failed: part
SS = 11	CP = 649	            Accept term
SS = 11	CP = 649	            Match  |
SS = 11	CP = 649	            Reject |
SS = 10	CP = 649	          Accept declaration
SS = 9	CP = 649	          Match  ]
SS = 9	CP = 649	          Accept ]
SS = 9	CP = 650	        Accept alternative_part
SS = 7	CP = 650	      Accept part
SS = 7	CP = 650	      Match  ,
SS = 7	CP = 650	      Reject ,
SS = 6	CP = 650	      Predict Failed: part
SS = 5	CP = 650	    Accept term
SS = 5	CP = 650	    Match  |
SS = 5	CP = 650	    Reject |
SS = 4	CP = 650	  Accept declaration
SS = 4	CP = 650	  Deduce end_op
SS = 5	CP = 650	    Match  ;
SS = 5	CP = 650	    Accept ;
SS = 4	CP = 651	  Accept end_op
SS = 3	CP = 651	Accept statement
SS = 3	CP = 651	Deduce statement
SS = 4	CP = 651	  Deduce non_terminal_symbol
SS = 4	CP = 651	    Match  id
SS = 4	CP = 651	    Accept id
SS = 4	CP = 652	  Accept non_terminal_symbol
SS = 4	CP = 652	  Deduce assign_op
SS = 5	CP = 652	    Match  ::=
SS = 5	CP = 652	    Accept ::=
SS = 4	CP = 653	  Accept assign_op
SS = 4	CP = 653	  Deduce declaration
SS = 5	CP = 653	    Deduce term
SS = 6	CP = 653	      Deduce part
SS = 6	CP = 653	        Predict Failed in CONDITION
SS = 6	CP = 653	        Predict Failed in CONDITION
SS = 6	CP = 653	        Predict Failed in CONDITION
SS = 8	CP = 653	        Deduce simple_part
SS = 10	CP = 653	          Deduce right_non_terminal_symbol
SS = 11	CP = 653	            Deduce non_terminal_symbol
SS = 11	CP = 653	              Match  id
SS = 11	CP = 653	              Accept id
SS = 11	CP = 654	            Accept non_terminal_symbol
SS = 10	CP = 654	          Accept right_non_terminal_symbol
SS = 8	CP = 654	        Accept simple_part
SS = 6	CP = 654	      Accept part
SS = 7	CP = 654	      Match  ,
SS = 7	CP = 654	      Reject ,
SS = 7	CP = 654	      Deduce part
SS = 7	CP = 654	        Predict Failed in CONDITION
SS = 7	CP = 654	        Predict Failed in CONDITION
SS = 7	CP = 654	        Predict Failed in CONDITION
SS = 9	CP = 654	        Deduce simple_part
SS = 11	CP = 654	          Deduce right_non_terminal_symbol
SS = 12	CP = 654	            Deduce non_terminal_symbol
SS = 12	CP = 654	              Match  id
SS = 12	CP = 654	              Accept id
SS = 12	CP = 655	            Accept non_terminal_symbol
SS = 11	CP = 655	          Accept right_non_terminal_symbol
SS = 9	CP = 655	        Accept simple_part
SS = 7	CP = 655	      Accept part
SS = 7	CP = 655	      Match  ,
SS = 7	CP = 655	      Reject ,
SS = 6	CP = 655	      Predict Failed: part
SS = 5	CP = 655	    Accept term
SS = 5	CP = 655	    Match  |
SS = 5	CP = 655	    Accept |
SS = 6	CP = 656	    Deduce term
SS = 7	CP = 656	      Deduce part
SS = 7	CP = 656	        Predict Failed in CONDITION
SS = 9	CP = 656	        Deduce declaration_part
SS = 9	CP = 656	          Match  (
SS = 9	CP = 656	          Accept (
SS = 10	CP = 657	          Deduce declaration
SS = 11	CP = 657	            Deduce term
SS = 12	CP = 657	              Deduce part
SS = 12	CP = 657	                Predict Failed in CONDITION
SS = 12	CP = 657	                Predict Failed in CONDITION
SS = 12	CP = 657	                Predict Failed in CONDITION
SS = 14	CP = 657	                Deduce simple_part
SS = 14	CP = 657	                  Predict Failed in CONDITION
SS = 16	CP = 657	                  Deduce terminal_symbol
SS = 17	CP = 657	                    Match  slit
SS = 17	CP = 657	                    Accept slit
SS = 16	CP = 658	                  Accept terminal_symbol
SS = 14	CP = 658	                Accept simple_part
SS = 12	CP = 658	              Accept part
SS = 13	CP = 658	              Match  ,
SS = 13	CP = 658	              Reject ,
SS = 12	CP = 658	              Predict Failed: part
SS = 11	CP = 658	            Accept term
SS = 11	CP = 658	            Match  |
SS = 11	CP = 658	            Accept |
SS = 12	CP = 659	            Deduce term
SS = 13	CP = 659	              Deduce part
SS = 13	CP = 659	                Predict Failed in CONDITION
SS = 13	CP = 659	                Predict Failed in CONDITION
SS = 13	CP = 659	                Predict Failed in CONDITION
SS = 15	CP = 659	                Deduce simple_part
SS = 15	CP = 659	                  Predict Failed in CONDITION
SS = 17	CP = 659	                  Deduce terminal_symbol
SS = 18	CP = 659	                    Match  slit
SS = 18	CP = 659	                    Accept slit
SS = 17	CP = 660	                  Accept terminal_symbol
SS = 15	CP = 660	                Accept simple_part
SS = 13	CP = 660	              Accept part
SS = 14	CP = 660	              Match  ,
SS = 14	CP = 660	              Reject ,
SS = 13	CP = 660	              Predict Failed: part
SS = 12	CP = 660	            Accept term
SS = 11	CP = 660	            Match  |
SS = 11	CP = 660	            Reject |
SS = 10	CP = 660	          Accept declaration
SS = 9	CP = 660	          Match  )
SS = 9	CP = 660	          Accept )
SS = 9	CP = 661	        Accept declaration_part
SS = 7	CP = 661	      Accept part
SS = 8	CP = 661	      Match  ,
SS = 8	CP = 661	      Reject ,
SS = 8	CP = 661	      Deduce part
SS = 8	CP = 661	        Predict Failed in CONDITION
SS = 8	CP = 661	        Predict Failed in CONDITION
SS = 8	CP = 661	        Predict Failed in CONDITION
SS = 10	CP = 661	        Deduce simple_part
SS = 12	CP = 661	          Deduce right_non_terminal_symbol
SS = 13	CP = 661	            Deduce non_terminal_symbol
SS = 13	CP = 661	              Match  id
SS = 13	CP = 661	              Accept id
SS = 13	CP = 662	            Accept non_terminal_symbol
SS = 12	CP = 662	          Accept right_non_terminal_symbol
SS = 10	CP = 662	        Accept simple_part
SS = 8	CP = 662	      Accept part
SS = 8	CP = 662	      Match  ,
SS = 8	CP = 662	      Reject ,
SS = 8	CP = 662	      Deduce part
SS = 8	CP = 662	        Predict Failed in CONDITION
SS = 8	CP = 662	        Predict Failed in CONDITION
SS = 10	CP = 662	        Deduce alternative_part
SS = 10	CP = 662	          Match  [
SS = 10	CP = 662	          Accept [
SS = 11	CP = 663	          Deduce declaration
SS = 12	CP = 663	            Deduce term
SS = 13	CP = 663	              Deduce part
SS = 13	CP = 663	                Predict Failed in CONDITION
SS = 13	CP = 663	                Predict Failed in CONDITION
SS = 13	CP = 663	                Predict Failed in CONDITION
SS = 15	CP = 663	                Deduce simple_part
SS = 17	CP = 663	                  Deduce right_non_terminal_symbol
SS = 18	CP = 663	                    Deduce non_terminal_symbol
SS = 18	CP = 663	                      Match  id
SS = 18	CP = 663	                      Accept id
SS = 18	CP = 664	                    Accept non_terminal_symbol
SS = 17	CP = 664	                  Accept right_non_terminal_symbol
SS = 15	CP = 664	                Accept simple_part
SS = 13	CP = 664	              Accept part
SS = 14	CP = 664	              Match  ,
SS = 14	CP = 664	              Reject ,
SS = 13	CP = 664	              Predict Failed: part
SS = 12	CP = 664	            Accept term
SS = 12	CP = 664	            Match  |
SS = 12	CP = 664	            Reject |
SS = 11	CP = 664	          Accept declaration
SS = 10	CP = 664	          Match  ]
SS = 10	CP = 664	          Accept ]
SS = 10	CP = 665	        Accept alternative_part
SS = 8	CP = 665	      Accept part
SS = 8	CP = 665	      Match  ,
SS = 8	CP = 665	      Reject ,
SS = 7	CP = 665	      Predict Failed: part
SS = 6	CP = 665	    Accept term
SS = 5	CP = 665	    Match  |
SS = 5	CP = 665	    Accept |
SS = 6	CP = 666	    Deduce term
SS = 7	CP = 666	      Deduce part
SS = 7	CP = 666	        Predict Failed in CONDITION
SS = 7	CP = 666	        Predict Failed in CONDITION
SS = 7	CP = 666	        Predict Failed in CONDITION
SS = 9	CP = 666	        Deduce simple_part
SS = 11	CP = 666	          Deduce right_non_terminal_symbol
SS = 12	CP = 666	            Deduce non_terminal_symbol
SS = 12	CP = 666	              Match  id
SS = 12	CP = 666	              Accept id
SS = 12	CP = 667	            Accept non_terminal_symbol
SS = 11	CP = 667	          Accept right_non_terminal_symbol
SS = 9	CP = 667	        Accept simple_part
SS = 7	CP = 667	      Accept part
SS = 8	CP = 667	      Match  ,
SS = 8	CP = 667	      Reject ,
SS = 8	CP = 667	      Deduce part
SS = 8	CP = 667	        Predict Failed in CONDITION
SS = 8	CP = 667	        Predict Failed in CONDITION
SS = 10	CP = 667	        Deduce alternative_part
SS = 10	CP = 667	          Match  [
SS = 10	CP = 667	          Accept [
SS = 11	CP = 668	          Deduce declaration
SS = 12	CP = 668	            Deduce term
SS = 13	CP = 668	              Deduce part
SS = 13	CP = 668	                Predict Failed in CONDITION
SS = 13	CP = 668	                Predict Failed in CONDITION
SS = 13	CP = 668	                Predict Failed in CONDITION
SS = 15	CP = 668	                Deduce simple_part
SS = 17	CP = 668	                  Deduce right_non_terminal_symbol
SS = 18	CP = 668	                    Deduce non_terminal_symbol
SS = 18	CP = 668	                      Match  id
SS = 18	CP = 668	                      Accept id
SS = 18	CP = 669	                    Accept non_terminal_symbol
SS = 17	CP = 669	                  Accept right_non_terminal_symbol
SS = 15	CP = 669	                Accept simple_part
SS = 13	CP = 669	              Accept part
SS = 14	CP = 669	              Match  ,
SS = 14	CP = 669	              Reject ,
SS = 13	CP = 669	              Predict Failed: part
SS = 12	CP = 669	            Accept term
SS = 12	CP = 669	            Match  |
SS = 12	CP = 669	            Reject |
SS = 11	CP = 669	          Accept declaration
SS = 10	CP = 669	          Match  ]
SS = 10	CP = 669	          Accept ]
SS = 10	CP = 670	        Accept alternative_part
SS = 8	CP = 670	      Accept part
SS = 8	CP = 670	      Match  ,
SS = 8	CP = 670	      Reject ,
SS = 7	CP = 670	      Predict Failed: part
SS = 6	CP = 670	    Accept term
SS = 5	CP = 670	    Match  |
SS = 5	CP = 670	    Reject |
SS = 4	CP = 670	  Accept declaration
SS = 4	CP = 670	  Deduce end_op
SS = 5	CP = 670	    Match  ;
SS = 5	CP = 670	    Accept ;
SS = 4	CP = 671	  Accept end_op
SS = 3	CP = 671	Accept statement
SS = 3	CP = 671	Deduce statement
SS = 4	CP = 671	  Deduce non_terminal_symbol
SS = 4	CP = 671	    Match  id
SS = 4	CP = 671	    Accept id
SS = 4	CP = 672	  Accept non_terminal_symbol
SS = 4	CP = 672	  Deduce assign_op
SS = 5	CP = 672	    Match  ::=
SS = 5	CP = 672	    Accept ::=
SS = 4	CP = 673	  Accept assign_op
SS = 4	CP = 673	  Deduce declaration
SS = 5	CP = 673	    Deduce term
SS = 6	CP = 673	      Deduce part
SS = 6	CP = 673	        Predict Failed in CONDITION
SS = 6	CP = 673	        Predict Failed in CONDITION
SS = 6	CP = 673	        Predict Failed in CONDITION
SS = 8	CP = 673	        Deduce simple_part
SS = 8	CP = 673	          Predict Failed in CONDITION
SS = 10	CP = 673	          Deduce terminal_symbol
SS = 11	CP = 673	            Match  slit
SS = 11	CP = 673	            Accept slit
SS = 10	CP = 674	          Accept terminal_symbol
SS = 8	CP = 674	        Accept simple_part
SS = 6	CP = 674	      Accept part
SS = 7	CP = 674	      Match  ,
SS = 7	CP = 674	      Reject ,
SS = 6	CP = 674	      Predict Failed: part
SS = 5	CP = 674	    Accept term
SS = 5	CP = 674	    Match  |
SS = 5	CP = 674	    Accept |
SS = 6	CP = 675	    Deduce term
SS = 7	CP = 675	      Deduce part
SS = 7	CP = 675	        Predict Failed in CONDITION
SS = 7	CP = 675	        Predict Failed in CONDITION
SS = 7	CP = 675	        Predict Failed in CONDITION
SS = 9	CP = 675	        Deduce simple_part
SS = 9	CP = 675	          Predict Failed in CONDITION
SS = 11	CP = 675	          Deduce terminal_symbol
SS = 12	CP = 675	            Match  slit
SS = 12	CP = 675	            Accept slit
SS = 11	CP = 676	          Accept terminal_symbol
SS = 9	CP = 676	        Accept simple_part
SS = 7	CP = 676	      Accept part
SS = 8	CP = 676	      Match  ,
SS = 8	CP = 676	      Reject ,
SS = 7	CP = 676	      Predict Failed: part
SS = 6	CP = 676	    Accept term
SS = 5	CP = 676	    Match  |
SS = 5	CP = 676	    Accept |
SS = 6	CP = 677	    Deduce term
SS = 7	CP = 677	      Deduce part
SS = 7	CP = 677	        Predict Failed in CONDITION
SS = 7	CP = 677	        Predict Failed in CONDITION
SS = 7	CP = 677	        Predict Failed in CONDITION
SS = 9	CP = 677	        Deduce simple_part
SS = 9	CP = 677	          Predict Failed in CONDITION
SS = 11	CP = 677	          Deduce terminal_symbol
SS = 12	CP = 677	            Match  slit
SS = 12	CP = 677	            Accept slit
SS = 11	CP = 678	          Accept terminal_symbol
SS = 9	CP = 678	        Accept simple_part
SS = 7	CP = 678	      Accept part
SS = 8	CP = 678	      Match  ,
SS = 8	CP = 678	      Reject ,
SS = 7	CP = 678	      Predict Failed: part
SS = 6	CP = 678	    Accept term
SS = 5	CP = 678	    Match  |
SS = 5	CP = 678	    Accept |
SS = 6	CP = 679	    Deduce term
SS = 7	CP = 679	      Deduce part
SS = 7	CP = 679	        Predict Failed in CONDITION
SS = 7	CP = 679	        Predict Failed in CONDITION
SS = 7	CP = 679	        Predict Failed in CONDITION
SS = 9	CP = 679	        Deduce simple_part
SS = 9	CP = 679	          Predict Failed in CONDITION
SS = 11	CP = 679	          Deduce terminal_symbol
SS = 12	CP = 679	            Match  slit
SS = 12	CP = 679	            Accept slit
SS = 11	CP = 680	          Accept terminal_symbol
SS = 9	CP = 680	        Accept simple_part
SS = 7	CP = 680	      Accept part
SS = 8	CP = 680	      Match  ,
SS = 8	CP = 680	      Reject ,
SS = 7	CP = 680	      Predict Failed: part
SS = 6	CP = 680	    Accept term
SS = 5	CP = 680	    Match  |
SS = 5	CP = 680	    Accept |
SS = 6	CP = 681	    Deduce term
SS = 7	CP = 681	      Deduce part
SS = 7	CP = 681	        Predict Failed in CONDITION
SS = 7	CP = 681	        Predict Failed in CONDITION
SS = 7	CP = 681	        Predict Failed in CONDITION
SS = 9	CP = 681	        Deduce simple_part
SS = 9	CP = 681	          Predict Failed in CONDITION
SS = 11	CP = 681	          Deduce terminal_symbol
SS = 12	CP = 681	            Match  slit
SS = 12	CP = 681	            Accept slit
SS = 11	CP = 682	          Accept terminal_symbol
SS = 9	CP = 682	        Accept simple_part
SS = 7	CP = 682	      Accept part
SS = 8	CP = 682	      Match  ,
SS = 8	CP = 682	      Reject ,
SS = 7	CP = 682	      Predict Failed: part
SS = 6	CP = 682	    Accept term
SS = 5	CP = 682	    Match  |
SS = 5	CP = 682	    Accept |
SS = 6	CP = 683	    Deduce term
SS = 7	CP = 683	      Deduce part
SS = 7	CP = 683	        Predict Failed in CONDITION
SS = 7	CP = 683	        Predict Failed in CONDITION
SS = 7	CP = 683	        Predict Failed in CONDITION
SS = 9	CP = 683	        Deduce simple_part
SS = 9	CP = 683	          Predict Failed in CONDITION
SS = 11	CP = 683	          Deduce terminal_symbol
SS = 12	CP = 683	            Match  slit
SS = 12	CP = 683	            Accept slit
SS = 11	CP = 684	          Accept terminal_symbol
SS = 9	CP = 684	        Accept simple_part
SS = 7	CP = 684	      Accept part
SS = 8	CP = 684	      Match  ,
SS = 8	CP = 684	      Reject ,
SS = 7	CP = 684	      Predict Failed: part
SS = 6	CP = 684	    Accept term
SS = 5	CP = 684	    Match  |
SS = 5	CP = 684	    Accept |
SS = 6	CP = 685	    Deduce term
SS = 7	CP = 685	      Deduce part
SS = 7	CP = 685	        Predict Failed in CONDITION
SS = 7	CP = 685	        Predict Failed in CONDITION
SS = 7	CP = 685	        Predict Failed in CONDITION
SS = 9	CP = 685	        Deduce simple_part
SS = 9	CP = 685	          Predict Failed in CONDITION
SS = 11	CP = 685	          Deduce terminal_symbol
SS = 12	CP = 685	            Match  slit
SS = 12	CP = 685	            Accept slit
SS = 11	CP = 686	          Accept terminal_symbol
SS = 9	CP = 686	        Accept simple_part
SS = 7	CP = 686	      Accept part
SS = 8	CP = 686	      Match  ,
SS = 8	CP = 686	      Reject ,
SS = 7	CP = 686	      Predict Failed: part
SS = 6	CP = 686	    Accept term
SS = 5	CP = 686	    Match  |
SS = 5	CP = 686	    Reject |
SS = 4	CP = 686	  Accept declaration
SS = 4	CP = 686	  Deduce end_op
SS = 5	CP = 686	    Match  ;
SS = 5	CP = 686	    Accept ;
SS = 4	CP = 687	  Accept end_op
SS = 3	CP = 687	Accept statement
SS = 3	CP = 687	Deduce statement
SS = 4	CP = 687	  Deduce non_terminal_symbol
SS = 4	CP = 687	    Match  id
SS = 4	CP = 687	    Accept id
SS = 4	CP = 688	  Accept non_terminal_symbol
SS = 4	CP = 688	  Deduce assign_op
SS = 5	CP = 688	    Match  ::=
SS = 5	CP = 688	    Accept ::=
SS = 4	CP = 689	  Accept assign_op
SS = 4	CP = 689	  Deduce declaration
SS = 5	CP = 689	    Deduce term
SS = 6	CP = 689	      Deduce part
SS = 6	CP = 689	        Predict Failed in CONDITION
SS = 8	CP = 689	        Deduce declaration_part
SS = 8	CP = 689	          Match  (
SS = 8	CP = 689	          Accept (
SS = 9	CP = 690	          Deduce declaration
SS = 10	CP = 690	            Deduce term
SS = 11	CP = 690	              Deduce part
SS = 11	CP = 690	                Predict Failed in CONDITION
SS = 11	CP = 690	                Predict Failed in CONDITION
SS = 11	CP = 690	                Predict Failed in CONDITION
SS = 13	CP = 690	                Deduce simple_part
SS = 13	CP = 690	                  Predict Failed in CONDITION
SS = 15	CP = 690	                  Deduce terminal_symbol
SS = 16	CP = 690	                    Match  slit
SS = 16	CP = 690	                    Accept slit
SS = 15	CP = 691	                  Accept terminal_symbol
SS = 13	CP = 691	                Accept simple_part
SS = 11	CP = 691	              Accept part
SS = 12	CP = 691	              Match  ,
SS = 12	CP = 691	              Reject ,
SS = 11	CP = 691	              Predict Failed: part
SS = 10	CP = 691	            Accept term
SS = 10	CP = 691	            Match  |
SS = 10	CP = 691	            Accept |
SS = 11	CP = 692	            Deduce term
SS = 12	CP = 692	              Deduce part
SS = 12	CP = 692	                Predict Failed in CONDITION
SS = 12	CP = 692	                Predict Failed in CONDITION
SS = 12	CP = 692	                Predict Failed in CONDITION
SS = 14	CP = 692	                Deduce simple_part
SS = 14	CP = 692	                  Predict Failed in CONDITION
SS = 16	CP = 692	                  Deduce terminal_symbol
SS = 17	CP = 692	                    Match  slit
SS = 17	CP = 692	                    Accept slit
SS = 16	CP = 693	                  Accept terminal_symbol
SS = 14	CP = 693	                Accept simple_part
SS = 12	CP = 693	              Accept part
SS = 13	CP = 693	              Match  ,
SS = 13	CP = 693	              Reject ,
SS = 12	CP = 693	              Predict Failed: part
SS = 11	CP = 693	            Accept term
SS = 10	CP = 693	            Match  |
SS = 10	CP = 693	            Accept |
SS = 11	CP = 694	            Deduce term
SS = 12	CP = 694	              Deduce part
SS = 12	CP = 694	                Predict Failed in CONDITION
SS = 12	CP = 694	                Predict Failed in CONDITION
SS = 12	CP = 694	                Predict Failed in CONDITION
SS = 14	CP = 694	                Deduce simple_part
SS = 14	CP = 694	                  Predict Failed in CONDITION
SS = 16	CP = 694	                  Deduce terminal_symbol
SS = 17	CP = 694	                    Match  slit
SS = 17	CP = 694	                    Accept slit
SS = 16	CP = 695	                  Accept terminal_symbol
SS = 14	CP = 695	                Accept simple_part
SS = 12	CP = 695	              Accept part
SS = 13	CP = 695	              Match  ,
SS = 13	CP = 695	              Reject ,
SS = 12	CP = 695	              Predict Failed: part
SS = 11	CP = 695	            Accept term
SS = 10	CP = 695	            Match  |
SS = 10	CP = 695	            Reject |
SS = 9	CP = 695	          Accept declaration
SS = 8	CP = 695	          Match  )
SS = 8	CP = 695	          Accept )
SS = 8	CP = 696	        Accept declaration_part
SS = 6	CP = 696	      Accept part
SS = 7	CP = 696	      Match  ,
SS = 7	CP = 696	      Reject ,
SS = 7	CP = 696	      Deduce part
SS = 7	CP = 696	        Predict Failed in CONDITION
SS = 7	CP = 696	        Predict Failed in CONDITION
SS = 9	CP = 696	        Deduce alternative_part
SS = 9	CP = 696	          Match  [
SS = 9	CP = 696	          Accept [
SS = 10	CP = 697	          Deduce declaration
SS = 11	CP = 697	            Deduce term
SS = 12	CP = 697	              Deduce part
SS = 12	CP = 697	                Predict Failed in CONDITION
SS = 12	CP = 697	                Predict Failed in CONDITION
SS = 12	CP = 697	                Predict Failed in CONDITION
SS = 14	CP = 697	                Deduce simple_part
SS = 16	CP = 697	                  Deduce right_non_terminal_symbol
SS = 17	CP = 697	                    Deduce non_terminal_symbol
SS = 17	CP = 697	                      Match  id
SS = 17	CP = 697	                      Accept id
SS = 17	CP = 698	                    Accept non_terminal_symbol
SS = 16	CP = 698	                  Accept right_non_terminal_symbol
SS = 14	CP = 698	                Accept simple_part
SS = 12	CP = 698	              Accept part
SS = 13	CP = 698	              Match  ,
SS = 13	CP = 698	              Reject ,
SS = 12	CP = 698	              Predict Failed: part
SS = 11	CP = 698	            Accept term
SS = 11	CP = 698	            Match  |
SS = 11	CP = 698	            Reject |
SS = 10	CP = 698	          Accept declaration
SS = 9	CP = 698	          Match  ]
SS = 9	CP = 698	          Accept ]
SS = 9	CP = 699	        Accept alternative_part
SS = 7	CP = 699	      Accept part
SS = 7	CP = 699	      Match  ,
SS = 7	CP = 699	      Reject ,
SS = 6	CP = 699	      Predict Failed: part
SS = 5	CP = 699	    Accept term
SS = 5	CP = 699	    Match  |
SS = 5	CP = 699	    Reject |
SS = 4	CP = 699	  Accept declaration
SS = 4	CP = 699	  Deduce end_op
SS = 5	CP = 699	    Match  ;
SS = 5	CP = 699	    Accept ;
SS = 4	CP = 700	  Accept end_op
SS = 3	CP = 700	Accept statement
SS = 3	CP = 700	Deduce statement
SS = 4	CP = 700	  Deduce non_terminal_symbol
SS = 4	CP = 700	    Match  id
SS = 4	CP = 700	    Accept id
SS = 4	CP = 701	  Accept non_terminal_symbol
SS = 4	CP = 701	  Deduce assign_op
SS = 5	CP = 701	    Match  ::=
SS = 5	CP = 701	    Accept ::=
SS = 4	CP = 702	  Accept assign_op
SS = 4	CP = 702	  Deduce declaration
SS = 5	CP = 702	    Deduce term
SS = 6	CP = 702	      Deduce part
SS = 6	CP = 702	        Predict Failed in CONDITION
SS = 6	CP = 702	        Predict Failed in CONDITION
SS = 6	CP = 702	        Predict Failed in CONDITION
SS = 8	CP = 702	        Deduce simple_part
SS = 10	CP = 702	          Deduce right_non_terminal_symbol
SS = 11	CP = 702	            Deduce non_terminal_symbol
SS = 11	CP = 702	              Match  id
SS = 11	CP = 702	              Accept id
SS = 11	CP = 703	            Accept non_terminal_symbol
SS = 10	CP = 703	          Accept right_non_terminal_symbol
SS = 8	CP = 703	        Accept simple_part
SS = 6	CP = 703	      Accept part
SS = 7	CP = 703	      Match  ,
SS = 7	CP = 703	      Reject ,
SS = 6	CP = 703	      Predict Failed: part
SS = 5	CP = 703	    Accept term
SS = 5	CP = 703	    Match  |
SS = 5	CP = 703	    Accept |
SS = 6	CP = 704	    Deduce term
SS = 7	CP = 704	      Deduce part
SS = 7	CP = 704	        Predict Failed in CONDITION
SS = 7	CP = 704	        Predict Failed in CONDITION
SS = 7	CP = 704	        Predict Failed in CONDITION
SS = 9	CP = 704	        Deduce simple_part
SS = 11	CP = 704	          Deduce right_non_terminal_symbol
SS = 12	CP = 704	            Deduce non_terminal_symbol
SS = 12	CP = 704	              Match  id
SS = 12	CP = 704	              Accept id
SS = 12	CP = 705	            Accept non_terminal_symbol
SS = 11	CP = 705	          Accept right_non_terminal_symbol
SS = 9	CP = 705	        Accept simple_part
SS = 7	CP = 705	      Accept part
SS = 8	CP = 705	      Match  ,
SS = 8	CP = 705	      Reject ,
SS = 7	CP = 705	      Predict Failed: part
SS = 6	CP = 705	    Accept term
SS = 5	CP = 705	    Match  |
SS = 5	CP = 705	    Reject |
SS = 4	CP = 705	  Accept declaration
SS = 4	CP = 705	  Deduce end_op
SS = 5	CP = 705	    Match  ;
SS = 5	CP = 705	    Accept ;
SS = 4	CP = 706	  Accept end_op
SS = 3	CP = 706	Accept statement
SS = 3	CP = 706	Deduce statement
SS = 4	CP = 706	  Deduce non_terminal_symbol
SS = 4	CP = 706	    Match  id
SS = 4	CP = 706	    Accept id
SS = 4	CP = 707	  Accept non_terminal_symbol
SS = 4	CP = 707	  Deduce assign_op
SS = 5	CP = 707	    Match  ::=
SS = 5	CP = 707	    Accept ::=
SS = 4	CP = 708	  Accept assign_op
SS = 4	CP = 708	  Deduce declaration
SS = 5	CP = 708	    Deduce term
SS = 6	CP = 708	      Deduce part
SS = 6	CP = 708	        Predict Failed in CONDITION
SS = 6	CP = 708	        Predict Failed in CONDITION
SS = 6	CP = 708	        Predict Failed in CONDITION
SS = 8	CP = 708	        Deduce simple_part
SS = 10	CP = 708	          Deduce right_non_terminal_symbol
SS = 11	CP = 708	            Deduce non_terminal_symbol
SS = 11	CP = 708	              Match  id
SS = 11	CP = 708	              Accept id
SS = 11	CP = 709	            Accept non_terminal_symbol
SS = 10	CP = 709	          Accept right_non_terminal_symbol
SS = 8	CP = 709	        Accept simple_part
SS = 6	CP = 709	      Accept part
SS = 7	CP = 709	      Match  ,
SS = 7	CP = 709	      Reject ,
SS = 7	CP = 709	      Deduce part
SS = 7	CP = 709	        Predict Failed in CONDITION
SS = 7	CP = 709	        Predict Failed in CONDITION
SS = 9	CP = 709	        Deduce alternative_part
SS = 9	CP = 709	          Match  [
SS = 9	CP = 709	          Accept [
SS = 10	CP = 710	          Deduce declaration
SS = 11	CP = 710	            Deduce term
SS = 12	CP = 710	              Deduce part
SS = 12	CP = 710	                Predict Failed in CONDITION
SS = 14	CP = 710	                Deduce declaration_part
SS = 14	CP = 710	                  Match  (
SS = 14	CP = 710	                  Accept (
SS = 15	CP = 711	                  Deduce declaration
SS = 16	CP = 711	                    Deduce term
SS = 17	CP = 711	                      Deduce part
SS = 17	CP = 711	                        Predict Failed in CONDITION
SS = 17	CP = 711	                        Predict Failed in CONDITION
SS = 17	CP = 711	                        Predict Failed in CONDITION
SS = 19	CP = 711	                        Deduce simple_part
SS = 19	CP = 711	                          Predict Failed in CONDITION
SS = 21	CP = 711	                          Deduce terminal_symbol
SS = 22	CP = 711	                            Match  slit
SS = 22	CP = 711	                            Accept slit
SS = 21	CP = 712	                          Accept terminal_symbol
SS = 19	CP = 712	                        Accept simple_part
SS = 17	CP = 712	                      Accept part
SS = 18	CP = 712	                      Match  ,
SS = 18	CP = 712	                      Reject ,
SS = 17	CP = 712	                      Predict Failed: part
SS = 16	CP = 712	                    Accept term
SS = 16	CP = 712	                    Match  |
SS = 16	CP = 712	                    Accept |
SS = 17	CP = 713	                    Deduce term
SS = 18	CP = 713	                      Deduce part
SS = 18	CP = 713	                        Predict Failed in CONDITION
SS = 18	CP = 713	                        Predict Failed in CONDITION
SS = 18	CP = 713	                        Predict Failed in CONDITION
SS = 20	CP = 713	                        Deduce simple_part
SS = 20	CP = 713	                          Predict Failed in CONDITION
SS = 22	CP = 713	                          Deduce terminal_symbol
SS = 23	CP = 713	                            Match  slit
SS = 23	CP = 713	                            Accept slit
SS = 22	CP = 714	                          Accept terminal_symbol
SS = 20	CP = 714	                        Accept simple_part
SS = 18	CP = 714	                      Accept part
SS = 19	CP = 714	                      Match  ,
SS = 19	CP = 714	                      Reject ,
SS = 18	CP = 714	                      Predict Failed: part
SS = 17	CP = 714	                    Accept term
SS = 16	CP = 714	                    Match  |
SS = 16	CP = 714	                    Reject |
SS = 15	CP = 714	                  Accept declaration
SS = 14	CP = 714	                  Match  )
SS = 14	CP = 714	                  Accept )
SS = 14	CP = 715	                Accept declaration_part
SS = 12	CP = 715	              Accept part
SS = 13	CP = 715	              Match  ,
SS = 13	CP = 715	              Reject ,
SS = 13	CP = 715	              Deduce part
SS = 13	CP = 715	                Predict Failed in CONDITION
SS = 13	CP = 715	                Predict Failed in CONDITION
SS = 13	CP = 715	                Predict Failed in CONDITION
SS = 15	CP = 715	                Deduce simple_part
SS = 17	CP = 715	                  Deduce right_non_terminal_symbol
SS = 18	CP = 715	                    Deduce non_terminal_symbol
SS = 18	CP = 715	                      Match  id
SS = 18	CP = 715	                      Accept id
SS = 18	CP = 716	                    Accept non_terminal_symbol
SS = 17	CP = 716	                  Accept right_non_terminal_symbol
SS = 15	CP = 716	                Accept simple_part
SS = 13	CP = 716	              Accept part
SS = 13	CP = 716	              Match  ,
SS = 13	CP = 716	              Reject ,
SS = 12	CP = 716	              Predict Failed: part
SS = 11	CP = 716	            Accept term
SS = 11	CP = 716	            Match  |
SS = 11	CP = 716	            Reject |
SS = 10	CP = 716	          Accept declaration
SS = 9	CP = 716	          Match  ]
SS = 9	CP = 716	          Accept ]
SS = 9	CP = 717	        Accept alternative_part
SS = 7	CP = 717	      Accept part
SS = 7	CP = 717	      Match  ,
SS = 7	CP = 717	      Reject ,
SS = 6	CP = 717	      Predict Failed: part
SS = 5	CP = 717	    Accept term
SS = 5	CP = 717	    Match  |
SS = 5	CP = 717	    Reject |
SS = 4	CP = 717	  Accept declaration
SS = 4	CP = 717	  Deduce end_op
SS = 5	CP = 717	    Match  ;
SS = 5	CP = 717	    Accept ;
SS = 4	CP = 718	  Accept end_op
SS = 3	CP = 718	Accept statement
SS = 3	CP = 718	Deduce statement
SS = 4	CP = 718	  Deduce non_terminal_symbol
SS = 4	CP = 718	    Match  id
SS = 4	CP = 718	    Accept id
SS = 4	CP = 719	  Accept non_terminal_symbol
SS = 4	CP = 719	  Deduce assign_op
SS = 5	CP = 719	    Match  ::=
SS = 5	CP = 719	    Accept ::=
SS = 4	CP = 720	  Accept assign_op
SS = 4	CP = 720	  Deduce declaration
SS = 5	CP = 720	    Deduce term
SS = 6	CP = 720	      Deduce part
SS = 6	CP = 720	        Predict Failed in CONDITION
SS = 6	CP = 720	        Predict Failed in CONDITION
SS = 6	CP = 720	        Predict Failed in CONDITION
SS = 8	CP = 720	        Deduce simple_part
SS = 10	CP = 720	          Deduce right_non_terminal_symbol
SS = 11	CP = 720	            Deduce non_terminal_symbol
SS = 11	CP = 720	              Match  id
SS = 11	CP = 720	              Accept id
SS = 11	CP = 721	            Accept non_terminal_symbol
SS = 10	CP = 721	          Accept right_non_terminal_symbol
SS = 8	CP = 721	        Accept simple_part
SS = 6	CP = 721	      Accept part
SS = 7	CP = 721	      Match  ,
SS = 7	CP = 721	      Reject ,
SS = 7	CP = 721	      Deduce part
SS = 7	CP = 721	        Predict Failed in CONDITION
SS = 7	CP = 721	        Predict Failed in CONDITION
SS = 9	CP = 721	        Deduce alternative_part
SS = 9	CP = 721	          Match  [
SS = 9	CP = 721	          Accept [
SS = 10	CP = 722	          Deduce declaration
SS = 11	CP = 722	            Deduce term
SS = 12	CP = 722	              Deduce part
SS = 12	CP = 722	                Predict Failed in CONDITION
SS = 12	CP = 722	                Predict Failed in CONDITION
SS = 12	CP = 722	                Predict Failed in CONDITION
SS = 14	CP = 722	                Deduce simple_part
SS = 16	CP = 722	                  Deduce right_non_terminal_symbol
SS = 17	CP = 722	                    Deduce non_terminal_symbol
SS = 17	CP = 722	                      Match  id
SS = 17	CP = 722	                      Accept id
SS = 17	CP = 723	                    Accept non_terminal_symbol
SS = 16	CP = 723	                  Accept right_non_terminal_symbol
SS = 14	CP = 723	                Accept simple_part
SS = 12	CP = 723	              Accept part
SS = 13	CP = 723	              Match  ,
SS = 13	CP = 723	              Reject ,
SS = 12	CP = 723	              Predict Failed: part
SS = 11	CP = 723	            Accept term
SS = 11	CP = 723	            Match  |
SS = 11	CP = 723	            Reject |
SS = 10	CP = 723	          Accept declaration
SS = 9	CP = 723	          Match  ]
SS = 9	CP = 723	          Accept ]
SS = 9	CP = 724	        Accept alternative_part
SS = 7	CP = 724	      Accept part
SS = 7	CP = 724	      Match  ,
SS = 7	CP = 724	      Reject ,
SS = 6	CP = 724	      Predict Failed: part
SS = 5	CP = 724	    Accept term
SS = 5	CP = 724	    Match  |
SS = 5	CP = 724	    Accept |
SS = 6	CP = 725	    Deduce term
SS = 7	CP = 725	      Deduce part
SS = 7	CP = 725	        Predict Failed in CONDITION
SS = 7	CP = 725	        Predict Failed in CONDITION
SS = 7	CP = 725	        Predict Failed in CONDITION
SS = 9	CP = 725	        Deduce simple_part
SS = 9	CP = 725	          Predict Failed in CONDITION
SS = 11	CP = 725	          Deduce terminal_symbol
SS = 11	CP = 725	            Predict Failed in CONDITION
SS = 11	CP = 725	            Predict Failed in CONDITION
SS = 12	CP = 725	            Match  token
SS = 12	CP = 725	            Accept token
SS = 11	CP = 726	          Accept terminal_symbol
SS = 9	CP = 726	        Accept simple_part
SS = 7	CP = 726	      Accept part
SS = 8	CP = 726	      Match  ,
SS = 8	CP = 726	      Reject ,
SS = 8	CP = 726	      Deduce part
SS = 8	CP = 726	        Predict Failed in CONDITION
SS = 8	CP = 726	        Predict Failed in CONDITION
SS = 10	CP = 726	        Deduce alternative_part
SS = 10	CP = 726	          Match  [
SS = 10	CP = 726	          Accept [
SS = 11	CP = 727	          Deduce declaration
SS = 12	CP = 727	            Deduce term
SS = 13	CP = 727	              Deduce part
SS = 13	CP = 727	                Predict Failed in CONDITION
SS = 13	CP = 727	                Predict Failed in CONDITION
SS = 13	CP = 727	                Predict Failed in CONDITION
SS = 15	CP = 727	                Deduce simple_part
SS = 17	CP = 727	                  Deduce right_non_terminal_symbol
SS = 18	CP = 727	                    Deduce non_terminal_symbol
SS = 18	CP = 727	                      Match  id
SS = 18	CP = 727	                      Accept id
SS = 18	CP = 728	                    Accept non_terminal_symbol
SS = 17	CP = 728	                  Accept right_non_terminal_symbol
SS = 15	CP = 728	                Accept simple_part
SS = 13	CP = 728	              Accept part
SS = 14	CP = 728	              Match  ,
SS = 14	CP = 728	              Reject ,
SS = 13	CP = 728	              Predict Failed: part
SS = 12	CP = 728	            Accept term
SS = 12	CP = 728	            Match  |
SS = 12	CP = 728	            Reject |
SS = 11	CP = 728	          Accept declaration
SS = 10	CP = 728	          Match  ]
SS = 10	CP = 728	          Accept ]
SS = 10	CP = 729	        Accept alternative_part
SS = 8	CP = 729	      Accept part
SS = 8	CP = 729	      Match  ,
SS = 8	CP = 729	      Reject ,
SS = 7	CP = 729	      Predict Failed: part
SS = 6	CP = 729	    Accept term
SS = 5	CP = 729	    Match  |
SS = 5	CP = 729	    Accept |
SS = 6	CP = 730	    Deduce term
SS = 7	CP = 730	      Deduce part
SS = 7	CP = 730	        Predict Failed in CONDITION
SS = 7	CP = 730	        Predict Failed in CONDITION
SS = 7	CP = 730	        Predict Failed in CONDITION
SS = 9	CP = 730	        Deduce simple_part
SS = 9	CP = 730	          Predict Failed in CONDITION
SS = 11	CP = 730	          Deduce terminal_symbol
SS = 12	CP = 730	            Match  slit
SS = 12	CP = 730	            Accept slit
SS = 11	CP = 731	          Accept terminal_symbol
SS = 9	CP = 731	        Accept simple_part
SS = 7	CP = 731	      Accept part
SS = 8	CP = 731	      Match  ,
SS = 8	CP = 731	      Reject ,
SS = 7	CP = 731	      Predict Failed: part
SS = 6	CP = 731	    Accept term
SS = 5	CP = 731	    Match  |
SS = 5	CP = 731	    Accept |
SS = 6	CP = 732	    Deduce term
SS = 7	CP = 732	      Deduce part
SS = 7	CP = 732	        Predict Failed in CONDITION
SS = 7	CP = 732	        Predict Failed in CONDITION
SS = 7	CP = 732	        Predict Failed in CONDITION
SS = 9	CP = 732	        Deduce simple_part
SS = 9	CP = 732	          Predict Failed in CONDITION
SS = 11	CP = 732	          Deduce terminal_symbol
SS = 12	CP = 732	            Match  slit
SS = 12	CP = 732	            Accept slit
SS = 11	CP = 733	          Accept terminal_symbol
SS = 9	CP = 733	        Accept simple_part
SS = 7	CP = 733	      Accept part
SS = 8	CP = 733	      Match  ,
SS = 8	CP = 733	      Reject ,
SS = 7	CP = 733	      Predict Failed: part
SS = 6	CP = 733	    Accept term
SS = 5	CP = 733	    Match  |
SS = 5	CP = 733	    Accept |
SS = 6	CP = 734	    Deduce term
SS = 7	CP = 734	      Deduce part
SS = 7	CP = 734	        Predict Failed in CONDITION
SS = 7	CP = 734	        Predict Failed in CONDITION
SS = 7	CP = 734	        Predict Failed in CONDITION
SS = 9	CP = 734	        Deduce simple_part
SS = 11	CP = 734	          Deduce right_non_terminal_symbol
SS = 12	CP = 734	            Deduce non_terminal_symbol
SS = 12	CP = 734	              Match  id
SS = 12	CP = 734	              Accept id
SS = 12	CP = 735	            Accept non_terminal_symbol
SS = 11	CP = 735	          Accept right_non_terminal_symbol
SS = 9	CP = 735	        Accept simple_part
SS = 7	CP = 735	      Accept part
SS = 8	CP = 735	      Match  ,
SS = 8	CP = 735	      Reject ,
SS = 7	CP = 735	      Predict Failed: part
SS = 6	CP = 735	    Accept term
SS = 5	CP = 735	    Match  |
SS = 5	CP = 735	    Accept |
SS = 6	CP = 736	    Deduce term
SS = 7	CP = 736	      Deduce part
SS = 7	CP = 736	        Predict Failed in CONDITION
SS = 7	CP = 736	        Predict Failed in CONDITION
SS = 7	CP = 736	        Predict Failed in CONDITION
SS = 9	CP = 736	        Deduce simple_part
SS = 9	CP = 736	          Predict Failed in CONDITION
SS = 11	CP = 736	          Deduce terminal_symbol
SS = 11	CP = 736	            Predict Failed in CONDITION
SS = 11	CP = 736	            Predict Failed in CONDITION
SS = 12	CP = 736	            Match  token
SS = 12	CP = 736	            Accept token
SS = 11	CP = 737	          Accept terminal_symbol
SS = 9	CP = 737	        Accept simple_part
SS = 7	CP = 737	      Accept part
SS = 8	CP = 737	      Match  ,
SS = 8	CP = 737	      Reject ,
SS = 7	CP = 737	      Predict Failed: part
SS = 6	CP = 737	    Accept term
SS = 5	CP = 737	    Match  |
SS = 5	CP = 737	    Reject |
SS = 4	CP = 737	  Accept declaration
SS = 4	CP = 737	  Deduce end_op
SS = 5	CP = 737	    Match  ;
SS = 5	CP = 737	    Accept ;
SS = 4	CP = 738	  Accept end_op
SS = 3	CP = 738	Accept statement
SS = 3	CP = 738	Deduce statement
SS = 4	CP = 738	  Deduce non_terminal_symbol
SS = 4	CP = 738	    Match  id
SS = 4	CP = 738	    Accept id
SS = 4	CP = 739	  Accept non_terminal_symbol
SS = 4	CP = 739	  Deduce assign_op
SS = 5	CP = 739	    Match  ::=
SS = 5	CP = 739	    Accept ::=
SS = 4	CP = 740	  Accept assign_op
SS = 4	CP = 740	  Deduce declaration
SS = 5	CP = 740	    Deduce term
SS = 6	CP = 740	      Deduce part
SS = 6	CP = 740	        Predict Failed in CONDITION
SS = 8	CP = 740	        Deduce declaration_part
SS = 8	CP = 740	          Match  (
SS = 8	CP = 740	          Accept (
SS = 9	CP = 741	          Deduce declaration
SS = 10	CP = 741	            Deduce term
SS = 11	CP = 741	              Deduce part
SS = 11	CP = 741	                Predict Failed in CONDITION
SS = 11	CP = 741	                Predict Failed in CONDITION
SS = 11	CP = 741	                Predict Failed in CONDITION
SS = 13	CP = 741	                Deduce simple_part
SS = 13	CP = 741	                  Predict Failed in CONDITION
SS = 15	CP = 741	                  Deduce terminal_symbol
SS = 15	CP = 741	                    Predict Failed in CONDITION
SS = 15	CP = 741	                    Predict Failed in CONDITION
SS = 16	CP = 741	                    Match  token
SS = 16	CP = 741	                    Accept token
SS = 15	CP = 742	                  Accept terminal_symbol
SS = 13	CP = 742	                Accept simple_part
SS = 11	CP = 742	              Accept part
SS = 12	CP = 742	              Match  ,
SS = 12	CP = 742	              Reject ,
SS = 11	CP = 742	              Predict Failed: part
SS = 10	CP = 742	            Accept term
SS = 10	CP = 742	            Match  |
SS = 10	CP = 742	            Accept |
SS = 11	CP = 743	            Deduce term
SS = 12	CP = 743	              Deduce part
SS = 12	CP = 743	                Predict Failed in CONDITION
SS = 12	CP = 743	                Predict Failed in CONDITION
SS = 12	CP = 743	                Predict Failed in CONDITION
SS = 14	CP = 743	                Deduce simple_part
SS = 14	CP = 743	                  Predict Failed in CONDITION
SS = 16	CP = 743	                  Deduce terminal_symbol
SS = 17	CP = 743	                    Match  slit
SS = 17	CP = 743	                    Accept slit
SS = 16	CP = 744	                  Accept terminal_symbol
SS = 14	CP = 744	                Accept simple_part
SS = 12	CP = 744	              Accept part
SS = 13	CP = 744	              Match  ,
SS = 13	CP = 744	              Reject ,
SS = 13	CP = 744	              Deduce part
SS = 13	CP = 744	                Predict Failed in CONDITION
SS = 13	CP = 744	                Predict Failed in CONDITION
SS = 13	CP = 744	                Predict Failed in CONDITION
SS = 15	CP = 744	                Deduce simple_part
SS = 17	CP = 744	                  Deduce right_non_terminal_symbol
SS = 18	CP = 744	                    Deduce non_terminal_symbol
SS = 18	CP = 744	                      Match  id
SS = 18	CP = 744	                      Accept id
SS = 18	CP = 745	                    Accept non_terminal_symbol
SS = 17	CP = 745	                  Accept right_non_terminal_symbol
SS = 15	CP = 745	                Accept simple_part
SS = 13	CP = 745	              Accept part
SS = 13	CP = 745	              Match  ,
SS = 13	CP = 745	              Reject ,
SS = 13	CP = 745	              Deduce part
SS = 13	CP = 745	                Predict Failed in CONDITION
SS = 13	CP = 745	                Predict Failed in CONDITION
SS = 13	CP = 745	                Predict Failed in CONDITION
SS = 15	CP = 745	                Deduce simple_part
SS = 15	CP = 745	                  Predict Failed in CONDITION
SS = 17	CP = 745	                  Deduce terminal_symbol
SS = 18	CP = 745	                    Match  slit
SS = 18	CP = 745	                    Accept slit
SS = 17	CP = 746	                  Accept terminal_symbol
SS = 15	CP = 746	                Accept simple_part
SS = 13	CP = 746	              Accept part
SS = 13	CP = 746	              Match  ,
SS = 13	CP = 746	              Reject ,
SS = 12	CP = 746	              Predict Failed: part
SS = 11	CP = 746	            Accept term
SS = 10	CP = 746	            Match  |
SS = 10	CP = 746	            Reject |
SS = 9	CP = 746	          Accept declaration
SS = 8	CP = 746	          Match  )
SS = 8	CP = 746	          Accept )
SS = 8	CP = 747	        Accept declaration_part
SS = 6	CP = 747	      Accept part
SS = 7	CP = 747	      Match  ,
SS = 7	CP = 747	      Reject ,
SS = 7	CP = 747	      Deduce part
SS = 9	CP = 747	        Deduce repeat_part
SS = 9	CP = 747	          Match  {
SS = 9	CP = 747	          Accept {
SS = 10	CP = 748	          Deduce declaration
SS = 11	CP = 748	            Deduce term
SS = 12	CP = 748	              Deduce part
SS = 12	CP = 748	                Predict Failed in CONDITION
SS = 12	CP = 748	                Predict Failed in CONDITION
SS = 12	CP = 748	                Predict Failed in CONDITION
SS = 14	CP = 748	                Deduce simple_part
SS = 16	CP = 748	                  Deduce right_non_terminal_symbol
SS = 17	CP = 748	                    Deduce non_terminal_symbol
SS = 17	CP = 748	                      Match  id
SS = 17	CP = 748	                      Accept id
SS = 17	CP = 749	                    Accept non_terminal_symbol
SS = 16	CP = 749	                  Accept right_non_terminal_symbol
SS = 14	CP = 749	                Accept simple_part
SS = 12	CP = 749	              Accept part
SS = 13	CP = 749	              Match  ,
SS = 13	CP = 749	              Reject ,
SS = 12	CP = 749	              Predict Failed: part
SS = 11	CP = 749	            Accept term
SS = 11	CP = 749	            Match  |
SS = 11	CP = 749	            Accept |
SS = 12	CP = 750	            Deduce term
SS = 13	CP = 750	              Deduce part
SS = 13	CP = 750	                Predict Failed in CONDITION
SS = 13	CP = 750	                Predict Failed in CONDITION
SS = 13	CP = 750	                Predict Failed in CONDITION
SS = 15	CP = 750	                Deduce simple_part
SS = 17	CP = 750	                  Deduce right_non_terminal_symbol
SS = 18	CP = 750	                    Deduce non_terminal_symbol
SS = 18	CP = 750	                      Match  id
SS = 18	CP = 750	                      Accept id
SS = 18	CP = 751	                    Accept non_terminal_symbol
SS = 17	CP = 751	                  Accept right_non_terminal_symbol
SS = 15	CP = 751	                Accept simple_part
SS = 13	CP = 751	              Accept part
SS = 14	CP = 751	              Match  ,
SS = 14	CP = 751	              Reject ,
SS = 13	CP = 751	              Predict Failed: part
SS = 12	CP = 751	            Accept term
SS = 11	CP = 751	            Match  |
SS = 11	CP = 751	            Reject |
SS = 10	CP = 751	          Accept declaration
SS = 9	CP = 751	          Match  }
SS = 9	CP = 751	          Accept }
SS = 9	CP = 752	        Accept repeat_part
SS = 7	CP = 752	      Accept part
SS = 7	CP = 752	      Match  ,
SS = 7	CP = 752	      Reject ,
SS = 6	CP = 752	      Predict Failed: part
SS = 5	CP = 752	    Accept term
SS = 5	CP = 752	    Match  |
SS = 5	CP = 752	    Reject |
SS = 4	CP = 752	  Accept declaration
SS = 4	CP = 752	  Deduce end_op
SS = 5	CP = 752	    Match  ;
SS = 5	CP = 752	    Accept ;
SS = 4	CP = 753	  Accept end_op
SS = 3	CP = 753	Accept statement
SS = 3	CP = 753	Deduce statement
SS = 4	CP = 753	  Deduce non_terminal_symbol
SS = 4	CP = 753	    Match  id
SS = 4	CP = 753	    Accept id
SS = 4	CP = 754	  Accept non_terminal_symbol
SS = 4	CP = 754	  Deduce assign_op
SS = 5	CP = 754	    Match  ::=
SS = 5	CP = 754	    Accept ::=
SS = 4	CP = 755	  Accept assign_op
SS = 4	CP = 755	  Deduce declaration
SS = 5	CP = 755	    Deduce term
SS = 6	CP = 755	      Deduce part
SS = 6	CP = 755	        Predict Failed in CONDITION
SS = 6	CP = 755	        Predict Failed in CONDITION
SS = 6	CP = 755	        Predict Failed in CONDITION
SS = 8	CP = 755	        Deduce simple_part
SS = 8	CP = 755	          Predict Failed in CONDITION
SS = 10	CP = 755	          Deduce terminal_symbol
SS = 10	CP = 755	            Predict Failed in CONDITION
SS = 10	CP = 755	            Predict Failed in CONDITION
SS = 11	CP = 755	            Match  token
SS = 11	CP = 755	            Accept token
SS = 10	CP = 756	          Accept terminal_symbol
SS = 8	CP = 756	        Accept simple_part
SS = 6	CP = 756	      Accept part
SS = 7	CP = 756	      Match  ,
SS = 7	CP = 756	      Reject ,
SS = 6	CP = 756	      Predict Failed: part
SS = 5	CP = 756	    Accept term
SS = 5	CP = 756	    Match  |
SS = 5	CP = 756	    Accept |
SS = 6	CP = 757	    Deduce term
SS = 7	CP = 757	      Deduce part
SS = 7	CP = 757	        Predict Failed in CONDITION
SS = 7	CP = 757	        Predict Failed in CONDITION
SS = 7	CP = 757	        Predict Failed in CONDITION
SS = 9	CP = 757	        Deduce simple_part
SS = 9	CP = 757	          Predict Failed in CONDITION
SS = 11	CP = 757	          Deduce terminal_symbol
SS = 12	CP = 757	            Match  slit
SS = 12	CP = 757	            Accept slit
SS = 11	CP = 758	          Accept terminal_symbol
SS = 9	CP = 758	        Accept simple_part
SS = 7	CP = 758	      Accept part
SS = 8	CP = 758	      Match  ,
SS = 8	CP = 758	      Reject ,
SS = 7	CP = 758	      Predict Failed: part
SS = 6	CP = 758	    Accept term
SS = 5	CP = 758	    Match  |
SS = 5	CP = 758	    Accept |
SS = 6	CP = 759	    Deduce term
SS = 7	CP = 759	      Deduce part
SS = 7	CP = 759	        Predict Failed in CONDITION
SS = 7	CP = 759	        Predict Failed in CONDITION
SS = 7	CP = 759	        Predict Failed in CONDITION
SS = 9	CP = 759	        Deduce simple_part
SS = 9	CP = 759	          Predict Failed in CONDITION
SS = 11	CP = 759	          Deduce terminal_symbol
SS = 12	CP = 759	            Match  slit
SS = 12	CP = 759	            Accept slit
SS = 11	CP = 760	          Accept terminal_symbol
SS = 9	CP = 760	        Accept simple_part
SS = 7	CP = 760	      Accept part
SS = 8	CP = 760	      Match  ,
SS = 8	CP = 760	      Reject ,
SS = 7	CP = 760	      Predict Failed: part
SS = 6	CP = 760	    Accept term
SS = 5	CP = 760	    Match  |
SS = 5	CP = 760	    Accept |
SS = 6	CP = 761	    Deduce term
SS = 7	CP = 761	      Deduce part
SS = 7	CP = 761	        Predict Failed in CONDITION
SS = 7	CP = 761	        Predict Failed in CONDITION
SS = 7	CP = 761	        Predict Failed in CONDITION
SS = 9	CP = 761	        Deduce simple_part
SS = 9	CP = 761	          Predict Failed in CONDITION
SS = 11	CP = 761	          Deduce terminal_symbol
SS = 12	CP = 761	            Match  slit
SS = 12	CP = 761	            Accept slit
SS = 11	CP = 762	          Accept terminal_symbol
SS = 9	CP = 762	        Accept simple_part
SS = 7	CP = 762	      Accept part
SS = 8	CP = 762	      Match  ,
SS = 8	CP = 762	      Reject ,
SS = 7	CP = 762	      Predict Failed: part
SS = 6	CP = 762	    Accept term
SS = 5	CP = 762	    Match  |
SS = 5	CP = 762	    Reject |
SS = 4	CP = 762	  Accept declaration
SS = 4	CP = 762	  Deduce end_op
SS = 5	CP = 762	    Match  ;
SS = 5	CP = 762	    Accept ;
SS = 4	CP = 763	  Accept end_op
SS = 3	CP = 763	Accept statement
SS = 3	CP = 763	Deduce statement
SS = 4	CP = 763	  Deduce non_terminal_symbol
SS = 4	CP = 763	    Match  id
SS = 4	CP = 763	    Accept id
SS = 4	CP = 764	  Accept non_terminal_symbol
SS = 4	CP = 764	  Deduce assign_op
SS = 5	CP = 764	    Match  ::=
SS = 5	CP = 764	    Accept ::=
SS = 4	CP = 765	  Accept assign_op
SS = 4	CP = 765	  Deduce declaration
SS = 5	CP = 765	    Deduce term
SS = 6	CP = 765	      Deduce part
SS = 6	CP = 765	        Predict Failed in CONDITION
SS = 6	CP = 765	        Predict Failed in CONDITION
SS = 6	CP = 765	        Predict Failed in CONDITION
SS = 8	CP = 765	        Deduce simple_part
SS = 8	CP = 765	          Predict Failed in CONDITION
SS = 10	CP = 765	          Deduce terminal_symbol
SS = 11	CP = 765	            Match  slit
SS = 11	CP = 765	            Accept slit
SS = 10	CP = 766	          Accept terminal_symbol
SS = 8	CP = 766	        Accept simple_part
SS = 6	CP = 766	      Accept part
SS = 7	CP = 766	      Match  ,
SS = 7	CP = 766	      Reject ,
SS = 7	CP = 766	      Deduce part
SS = 7	CP = 766	        Predict Failed in CONDITION
SS = 7	CP = 766	        Predict Failed in CONDITION
SS = 9	CP = 766	        Deduce alternative_part
SS = 9	CP = 766	          Match  [
SS = 9	CP = 766	          Accept [
SS = 10	CP = 767	          Deduce declaration
SS = 11	CP = 767	            Deduce term
SS = 12	CP = 767	              Deduce part
SS = 12	CP = 767	                Predict Failed in CONDITION
SS = 12	CP = 767	                Predict Failed in CONDITION
SS = 12	CP = 767	                Predict Failed in CONDITION
SS = 14	CP = 767	                Deduce simple_part
SS = 16	CP = 767	                  Deduce right_non_terminal_symbol
SS = 17	CP = 767	                    Deduce non_terminal_symbol
SS = 17	CP = 767	                      Match  id
SS = 17	CP = 767	                      Accept id
SS = 17	CP = 768	                    Accept non_terminal_symbol
SS = 16	CP = 768	                  Accept right_non_terminal_symbol
SS = 14	CP = 768	                Accept simple_part
SS = 12	CP = 768	              Accept part
SS = 13	CP = 768	              Match  ,
SS = 13	CP = 768	              Reject ,
SS = 12	CP = 768	              Predict Failed: part
SS = 11	CP = 768	            Accept term
SS = 11	CP = 768	            Match  |
SS = 11	CP = 768	            Reject |
SS = 10	CP = 768	          Accept declaration
SS = 9	CP = 768	          Match  ]
SS = 9	CP = 768	          Accept ]
SS = 9	CP = 769	        Accept alternative_part
SS = 7	CP = 769	      Accept part
SS = 7	CP = 769	      Match  ,
SS = 7	CP = 769	      Reject ,
SS = 7	CP = 769	      Deduce part
SS = 7	CP = 769	        Predict Failed in CONDITION
SS = 7	CP = 769	        Predict Failed in CONDITION
SS = 7	CP = 769	        Predict Failed in CONDITION
SS = 9	CP = 769	        Deduce simple_part
SS = 9	CP = 769	          Predict Failed in CONDITION
SS = 11	CP = 769	          Deduce terminal_symbol
SS = 12	CP = 769	            Match  slit
SS = 12	CP = 769	            Accept slit
SS = 11	CP = 770	          Accept terminal_symbol
SS = 9	CP = 770	        Accept simple_part
SS = 7	CP = 770	      Accept part
SS = 7	CP = 770	      Match  ,
SS = 7	CP = 770	      Reject ,
SS = 6	CP = 770	      Predict Failed: part
SS = 5	CP = 770	    Accept term
SS = 5	CP = 770	    Match  |
SS = 5	CP = 770	    Reject |
SS = 4	CP = 770	  Accept declaration
SS = 4	CP = 770	  Deduce end_op
SS = 5	CP = 770	    Match  ;
SS = 5	CP = 770	    Accept ;
SS = 4	CP = 771	  Accept end_op
SS = 3	CP = 771	Accept statement
SS = 3	CP = 771	Deduce statement
SS = 4	CP = 771	  Deduce non_terminal_symbol
SS = 4	CP = 771	    Match  id
SS = 4	CP = 771	    Accept id
SS = 4	CP = 772	  Accept non_terminal_symbol
SS = 4	CP = 772	  Deduce assign_op
SS = 5	CP = 772	    Match  ::=
SS = 5	CP = 772	    Accept ::=
SS = 4	CP = 773	  Accept assign_op
SS = 4	CP = 773	  Deduce declaration
SS = 5	CP = 773	    Deduce term
SS = 6	CP = 773	      Deduce part
SS = 6	CP = 773	        Predict Failed in CONDITION
SS = 6	CP = 773	        Predict Failed in CONDITION
SS = 6	CP = 773	        Predict Failed in CONDITION
SS = 8	CP = 773	        Deduce simple_part
SS = 8	CP = 773	          Predict Failed in CONDITION
SS = 10	CP = 773	          Deduce terminal_symbol
SS = 11	CP = 773	            Match  slit
SS = 11	CP = 773	            Accept slit
SS = 10	CP = 774	          Accept terminal_symbol
SS = 8	CP = 774	        Accept simple_part
SS = 6	CP = 774	      Accept part
SS = 7	CP = 774	      Match  ,
SS = 7	CP = 774	      Reject ,
SS = 7	CP = 774	      Deduce part
SS = 7	CP = 774	        Predict Failed in CONDITION
SS = 7	CP = 774	        Predict Failed in CONDITION
SS = 9	CP = 774	        Deduce alternative_part
SS = 9	CP = 774	          Match  [
SS = 9	CP = 774	          Accept [
SS = 10	CP = 775	          Deduce declaration
SS = 11	CP = 775	            Deduce term
SS = 12	CP = 775	              Deduce part
SS = 12	CP = 775	                Predict Failed in CONDITION
SS = 12	CP = 775	                Predict Failed in CONDITION
SS = 12	CP = 775	                Predict Failed in CONDITION
SS = 14	CP = 775	                Deduce simple_part
SS = 16	CP = 775	                  Deduce right_non_terminal_symbol
SS = 17	CP = 775	                    Deduce non_terminal_symbol
SS = 17	CP = 775	                      Match  id
SS = 17	CP = 775	                      Accept id
SS = 17	CP = 776	                    Accept non_terminal_symbol
SS = 16	CP = 776	                  Accept right_non_terminal_symbol
SS = 14	CP = 776	                Accept simple_part
SS = 12	CP = 776	              Accept part
SS = 13	CP = 776	              Match  ,
SS = 13	CP = 776	              Reject ,
SS = 12	CP = 776	              Predict Failed: part
SS = 11	CP = 776	            Accept term
SS = 11	CP = 776	            Match  |
SS = 11	CP = 776	            Reject |
SS = 10	CP = 776	          Accept declaration
SS = 9	CP = 776	          Match  ]
SS = 9	CP = 776	          Accept ]
SS = 9	CP = 777	        Accept alternative_part
SS = 7	CP = 777	      Accept part
SS = 7	CP = 777	      Match  ,
SS = 7	CP = 777	      Reject ,
SS = 7	CP = 777	      Deduce part
SS = 7	CP = 777	        Predict Failed in CONDITION
SS = 7	CP = 777	        Predict Failed in CONDITION
SS = 7	CP = 777	        Predict Failed in CONDITION
SS = 9	CP = 777	        Deduce simple_part
SS = 9	CP = 777	          Predict Failed in CONDITION
SS = 11	CP = 777	          Deduce terminal_symbol
SS = 12	CP = 777	            Match  slit
SS = 12	CP = 777	            Accept slit
SS = 11	CP = 778	          Accept terminal_symbol
SS = 9	CP = 778	        Accept simple_part
SS = 7	CP = 778	      Accept part
SS = 7	CP = 778	      Match  ,
SS = 7	CP = 778	      Reject ,
SS = 6	CP = 778	      Predict Failed: part
SS = 5	CP = 778	    Accept term
SS = 5	CP = 778	    Match  |
SS = 5	CP = 778	    Reject |
SS = 4	CP = 778	  Accept declaration
SS = 4	CP = 778	  Deduce end_op
SS = 5	CP = 778	    Match  ;
SS = 5	CP = 778	    Accept ;
SS = 4	CP = 779	  Accept end_op
SS = 3	CP = 779	Accept statement
SS = 3	CP = 779	Deduce statement
SS = 4	CP = 779	  Deduce non_terminal_symbol
SS = 4	CP = 779	    Match  id
SS = 4	CP = 779	    Accept id
SS = 4	CP = 780	  Accept non_terminal_symbol
SS = 4	CP = 780	  Deduce assign_op
SS = 5	CP = 780	    Match  ::=
SS = 5	CP = 780	    Accept ::=
SS = 4	CP = 781	  Accept assign_op
SS = 4	CP = 781	  Deduce declaration
SS = 5	CP = 781	    Deduce term
SS = 6	CP = 781	      Deduce part
SS = 6	CP = 781	        Predict Failed in CONDITION
SS = 6	CP = 781	        Predict Failed in CONDITION
SS = 6	CP = 781	        Predict Failed in CONDITION
SS = 8	CP = 781	        Deduce simple_part
SS = 8	CP = 781	          Predict Failed in CONDITION
SS = 10	CP = 781	          Deduce terminal_symbol
SS = 11	CP = 781	            Match  slit
SS = 11	CP = 781	            Accept slit
SS = 10	CP = 782	          Accept terminal_symbol
SS = 8	CP = 782	        Accept simple_part
SS = 6	CP = 782	      Accept part
SS = 7	CP = 782	      Match  ,
SS = 7	CP = 782	      Reject ,
SS = 7	CP = 782	      Deduce part
SS = 7	CP = 782	        Predict Failed in CONDITION
SS = 7	CP = 782	        Predict Failed in CONDITION
SS = 7	CP = 782	        Predict Failed in CONDITION
SS = 9	CP = 782	        Deduce simple_part
SS = 11	CP = 782	          Deduce right_non_terminal_symbol
SS = 12	CP = 782	            Deduce non_terminal_symbol
SS = 12	CP = 782	              Match  id
SS = 12	CP = 782	              Accept id
SS = 12	CP = 783	            Accept non_terminal_symbol
SS = 11	CP = 783	          Accept right_non_terminal_symbol
SS = 9	CP = 783	        Accept simple_part
SS = 7	CP = 783	      Accept part
SS = 7	CP = 783	      Match  ,
SS = 7	CP = 783	      Reject ,
SS = 7	CP = 783	      Deduce part
SS = 7	CP = 783	        Predict Failed in CONDITION
SS = 7	CP = 783	        Predict Failed in CONDITION
SS = 7	CP = 783	        Predict Failed in CONDITION
SS = 9	CP = 783	        Deduce simple_part
SS = 9	CP = 783	          Predict Failed in CONDITION
SS = 11	CP = 783	          Deduce terminal_symbol
SS = 12	CP = 783	            Match  slit
SS = 12	CP = 783	            Accept slit
SS = 11	CP = 784	          Accept terminal_symbol
SS = 9	CP = 784	        Accept simple_part
SS = 7	CP = 784	      Accept part
SS = 7	CP = 784	      Match  ,
SS = 7	CP = 784	      Reject ,
SS = 6	CP = 784	      Predict Failed: part
SS = 5	CP = 784	    Accept term
SS = 5	CP = 784	    Match  |
SS = 5	CP = 784	    Reject |
SS = 4	CP = 784	  Accept declaration
SS = 4	CP = 784	  Deduce end_op
SS = 5	CP = 784	    Match  ;
SS = 5	CP = 784	    Accept ;
SS = 4	CP = 785	  Accept end_op
SS = 3	CP = 785	Accept statement
SS = 2	CP = 785	End Of File
show ast
begin
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "begin_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "ignore_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "endline_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "';'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "stmts_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement_"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "decl_stmts_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "declaration_"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "endblock_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "end_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "else_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "until_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "catch_stmt_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "statement_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prep_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "package_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "import_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "block_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "namespace_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "if_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "switch_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "while_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "loop_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "foreach_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "control_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "return_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "try_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "throw_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "class_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expr_stmt_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "declaration_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prep_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "namespace_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_stmt_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "class_stmt_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "prep_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "PREP"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "package_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'package'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "import_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'import'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "import_list_"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "module_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'.'"
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'*'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> right_non_terminal_symbol
                              right_non_terminal_symbol -> non_terminal_symbol
                                non_terminal_symbol -> "module_list_"
                    declaration_part -> ")"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "import_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "module_list_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'as'"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ID"
            alternative_part -> "]"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "import_list_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_def_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'='"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_list_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'var'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'link'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'constant'"
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_def_"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_bind_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind_list_"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_bind_list_"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_bind_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'...'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "var_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'='"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "single_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_list_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "block_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'block'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "namespace_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'namespace'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "decl_stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "using_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'using'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "using_list_"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "using_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "module_list_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "using_list_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "if_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'if'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "else_stmt_"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts_"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'end'"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "else_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'else'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'if'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'switch'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "switch_stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_stmts_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "switch_case_"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "switch_default_"
            repeat_part -> "}"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_case_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'case'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "switch_default_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'default'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "while_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'while'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "loop_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'loop'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "until_stmt_"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'end'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "until_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'until'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "for_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'for'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "var_def_"
            alternative_part -> "]"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "';'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr_"
            alternative_part -> "]"
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "';'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_body_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "foreach_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'foreach'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'in'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "for_body_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "for_body_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'do'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "basic_expr_"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "endline_"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts_"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'end'"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'function'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'override'"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "function_body_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "function_body_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'{'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts_"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'}'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts_"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'end'"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ENDL"
            declaration_part -> ")"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "return_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'return'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "try_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'try'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "stmts_"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "catch_stmt_"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "stmts_"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "catch_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'catch'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "':'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "throw_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'throw'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "class_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'class'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'struct'"
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'extends'"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "decl_stmts_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "control_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'break'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'continue'"
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expr_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "expr_"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "endline_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "end_stmt_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'end'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ENDL"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "single_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "single_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "lambda_expr_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "basic_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "var_bind_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'='"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "asi_op_"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "single_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "asi_op_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "':='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'+='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'-='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'*='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'/='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'%='"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'^='"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "lambda_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'['"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "capture_list_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "']'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "lambda_body_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "capture_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'='"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "capture_list_"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "argument_list_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'...'"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'='"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "ID"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "':'"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr_"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "','"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "argument_list_"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "lambda_body_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'{'"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "statement_"
                term -> part
                  part -> repeat_part
                    repeat_part -> "{"
                    repeat_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "ENDL"
                    repeat_part -> "}"
            repeat_part -> "}"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'}'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'->'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "cond_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "cond_postfix_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "cond_postfix_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'?'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "':'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "cond_expr_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "':'"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_or_expr_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "logic_or_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "logic_and_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'||'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'or'"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "logic_or_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "logic_and_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "equal_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'&&'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'and'"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "logic_and_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "equal_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "relat_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'=='"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'!='"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "equal_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "relat_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "add_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'>'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'<'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'>='"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'<='"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "relat_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "add_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "mul_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'+'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'-'"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "add_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "mul_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'*'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'/'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'%'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'^'"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "mul_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_op_"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expr_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'new'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'gcnew'"
            declaration_part -> ")"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "unary_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "array_"
            alternative_part -> "]"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "prim_expr_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "postfix_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "unary_op_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'typeid'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'++'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'--'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'*'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'&'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'-'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'!'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "postfix_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'++'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'--'"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'...'"
            declaration_part -> ")"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "postfix_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "prim_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "visit_expr_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "constant_"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "visit_expr_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "object_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> declaration_part
                    declaration_part -> "("
                    declaration_part -> declaration
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'->'"
                      declaration -> "|"
                      declaration -> term
                        term -> part
                          part -> simple_part
                            simple_part -> terminal_symbol
                              terminal_symbol -> "'.'"
                    declaration_part -> ")"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "visit_expr_"
            alternative_part -> "]"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "object_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "array_"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "index_"
            alternative_part -> "]"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "STR"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "index_"
            alternative_part -> "]"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'local'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'global'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "element_"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "CHAR"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "element_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> declaration_part
            declaration_part -> "("
            declaration_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "ID"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "'('"
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "single_expr_"
                term -> part
                  part -> simple_part
                    simple_part -> terminal_symbol
                      terminal_symbol -> "')'"
            declaration_part -> ")"
        term -> part
          part -> repeat_part
            repeat_part -> "{"
            repeat_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "fcall_"
              declaration -> "|"
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "index_"
            repeat_part -> "}"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "constant_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "NUM"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'null'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'true'"
      declaration -> "|"
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'false'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "array_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'{'"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'}'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "fcall_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'('"
        term -> part
          part -> alternative_part
            alternative_part -> "["
            alternative_part -> declaration
              declaration -> term
                term -> part
                  part -> simple_part
                    simple_part -> right_non_terminal_symbol
                      right_non_terminal_symbol -> non_terminal_symbol
                        non_terminal_symbol -> "expr_"
            alternative_part -> "]"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "')'"
    statement -> end_op
      end_op -> ";"
  begin -> statement
    statement -> non_terminal_symbol
      non_terminal_symbol -> "index_"
    statement -> assign_op
      assign_op -> "::="
    statement -> declaration
      declaration -> term
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "'['"
        term -> part
          part -> simple_part
            simple_part -> right_non_terminal_symbol
              right_non_terminal_symbol -> non_terminal_symbol
                non_terminal_symbol -> "basic_expr_"
        term -> part
          part -> simple_part
            simple_part -> terminal_symbol
              terminal_symbol -> "']'"
    statement -> end_op
      end_op -> ";"
build successfully
parse ebnf end
print ebnf: 
begin_
	stmts_
ignore_
	ignore_@0_rep_1
ignore_@0_rep_1
	NULL
ignore_@0_rep_1
	ENDL
	ignore_@0_rep_1
endline_
	;
endline_
	ENDL
stmts_
	stmts_@0_rep_1
stmts_@0_rep_1
	NULL
stmts_@0_rep_1
	statement_
	stmts_@0_rep_1@0_rep_2
	stmts_@0_rep_1
stmts_@0_rep_1@0_rep_2
	NULL
stmts_@0_rep_1@0_rep_2
	ENDL
	stmts_@0_rep_1@0_rep_2
decl_stmts_
	decl_stmts_@0_rep_1
decl_stmts_@0_rep_1
	NULL
decl_stmts_@0_rep_1
	declaration_
	decl_stmts_@0_rep_1@0_rep_2
	decl_stmts_@0_rep_1
decl_stmts_@0_rep_1@0_rep_2
	NULL
decl_stmts_@0_rep_1@0_rep_2
	ENDL
	decl_stmts_@0_rep_1@0_rep_2
endblock_
	catch_stmt_
endblock_
	until_stmt_
endblock_
	else_stmt_
endblock_
	end_stmt_
statement_
	expr_stmt_
statement_
	class_stmt_
statement_
	throw_stmt_
statement_
	try_stmt_
statement_
	return_stmt_
statement_
	function_stmt_
statement_
	control_stmt_
statement_
	foreach_stmt_
statement_
	for_stmt_
statement_
	loop_stmt_
statement_
	while_stmt_
statement_
	switch_stmt_
statement_
	if_stmt_
statement_
	using_stmt_
statement_
	namespace_stmt_
statement_
	block_stmt_
statement_
	var_stmt_
statement_
	import_stmt_
statement_
	package_stmt_
statement_
	prep_stmt_
declaration_
	class_stmt_
declaration_
	function_stmt_
declaration_
	using_stmt_
declaration_
	var_stmt_
declaration_
	namespace_stmt_
declaration_
	prep_stmt_
prep_stmt_
	PREP
	ENDL
package_stmt_
	package
	ID
	endline_
import_stmt_
	import
	import_list_
	endline_
module_list_
	ID
	module_list_@0_opt_2
module_list_@0_opt_2
	NULL
module_list_@0_opt_2
	.
	module_list_@0_opt_2@0_decl_2
module_list_@0_opt_2@0_decl_2
	module_list_
module_list_@0_opt_2@0_decl_2
	*
import_list_
	module_list_
	import_list_@0_opt_2
	import_list_@0_opt_3
import_list_@0_opt_3
	NULL
import_list_@0_opt_3
	,
	import_list_
import_list_@0_opt_2
	NULL
import_list_@0_opt_2
	as
	ID
var_def_
	var_list_
var_def_
	var_bind_
	=
	basic_expr_
var_stmt_
	var_stmt_@0_decl_1
	var_def_
	endline_
var_stmt_@0_decl_1
	constant
var_stmt_@0_decl_1
	link
var_stmt_@0_decl_1
	var
var_bind_
	(
	var_bind_list_
	var_bind_@0_rep_3
	)
var_bind_@0_rep_3
	NULL
var_bind_@0_rep_3
	,
	var_bind_list_
	var_bind_@0_rep_3
var_bind_list_
	var_bind_
var_bind_list_
	...
var_bind_list_
	ID
var_list_
	ID
	=
	single_expr_
	var_list_@0_opt_4
var_list_@0_opt_4
	NULL
var_list_@0_opt_4
	,
	var_list_
block_stmt_
	block
	ENDL
	stmts_
	end
	ENDL
namespace_stmt_
	namespace
	ID
	ENDL
	decl_stmts_
	end
	ENDL
using_stmt_
	using
	using_list_
	endline
using_list_
	module_list_
	using_list_@0_opt_2
using_list_@0_opt_2
	NULL
using_list_@0_opt_2
	,
	using_list_
if_stmt_
	if
	basic_expr_
	ENDL
	stmts_
	if_stmt_@0_rep_5
if_stmt_@0_rep_5
	NULL
if_stmt_@0_rep_5
	else_stmt_
	stmts_
	end
	ENDL
	if_stmt_@0_rep_5
else_stmt_
	else
	else_stmt_@0_opt_2
	ENDL
else_stmt_@0_opt_2
	NULL
else_stmt_@0_opt_2
	if
	basic_expr_
switch_stmt_
	switch
	basic_expr_
	ENDL
	switch_stmts_
	end
	ENDL
switch_stmts_
	switch_stmts_@0_rep_1
	switch_stmts_@0_rep_2
switch_stmts_@0_rep_2
	NULL
switch_stmts_@0_rep_2
	ENDL
	switch_stmts_@0_rep_2
switch_stmts_@0_rep_1
	NULL
switch_stmts_@0_rep_1
	switch_default_
	switch_stmts_@0_rep_1
switch_stmts_@0_rep_1
	switch_case_
	switch_stmts_@0_rep_1
switch_case_
	case
	logic_or_expr_
	ENDL
	stmts_
	end
	ENDL
switch_default_
	default
	ENDL
	stmts_
	end
	ENDL
while_stmt_
	while
	basic_expr_
	ENDL
	stmts_
	end
	ENDL
loop_stmt_
	loop
	ENDL
	stmts_
	loop_stmt_@0_decl_4
loop_stmt_@0_decl_4
	ENDL
loop_stmt_@0_decl_4
	end
loop_stmt_@0_decl_4
	until_stmt_
until_stmt_
	until
	basic_expr_
	ENDL
for_stmt_
	for
	for_stmt_@0_opt_2
	for_stmt_@0_decl_3
	for_stmt_@0_opt_4
	for_stmt_@0_decl_5
	for_stmt_@0_opt_6
	for_body_
for_stmt_@0_opt_6
	NULL
for_stmt_@0_opt_6
	basic_expr_
for_stmt_@0_decl_5
	,
for_stmt_@0_decl_5
	;
for_stmt_@0_opt_4
	NULL
for_stmt_@0_opt_4
	basic_expr_
for_stmt_@0_decl_3
	,
for_stmt_@0_decl_3
	;
for_stmt_@0_opt_2
	NULL
for_stmt_@0_opt_2
	var_def_
foreach_stmt_
	foreach
	ID
	in
	basic_expr_
	for_body_
for_body_
	for_body_@0_decl_1
for_body_@0_decl_1
	ENDL
	stmts_
	end
	ENDL
for_body_@0_decl_1
	do
	basic_expr_
	endline_
function_stmt_
	function
	ID
	(
	function_stmt_@0_opt_4
	)
	function_stmt_@0_opt_6
	function_body_
function_stmt_@0_opt_6
	NULL
function_stmt_@0_opt_6
	override
function_stmt_@0_opt_4
	NULL
function_stmt_@0_opt_4
	argument_list_
function_body_
	function_body_@0_decl_1
function_body_@0_decl_1
	ENDL
	stmts_
	end
	ENDL
function_body_@0_decl_1
	{
	stmts_
	}
return_stmt_
	return
	return_stmt_@0_opt_2
	endline_
return_stmt_@0_opt_2
	NULL
return_stmt_@0_opt_2
	expr_
try_stmt_
	try
	ENDL
	stmts_
	try_stmt_@0_rep_4
	end
	ENDL
try_stmt_@0_rep_4
	NULL
try_stmt_@0_rep_4
	catch_stmt_
	stmts_
	try_stmt_@0_rep_4
catch_stmt_
	catch
	ID
	catch_stmt_@0_opt_3
	ENDL
catch_stmt_@0_opt_3
	NULL
catch_stmt_@0_opt_3
	:
	visit_expr_
throw_stmt_
	throw
	throw_stmt_@0_opt_2
	endline_
throw_stmt_@0_opt_2
	NULL
throw_stmt_@0_opt_2
	expr_
class_stmt_
	class_stmt_@0_decl_1
	ID
	class_stmt_@0_opt_3
	ENDL
	decl_stmts_
	end
	ENDL
class_stmt_@0_opt_3
	NULL
class_stmt_@0_opt_3
	extends
	visit_expr_
class_stmt_@0_decl_1
	struct
class_stmt_@0_decl_1
	class
control_stmt_
	control_stmt_@0_decl_1
	endline_
control_stmt_@0_decl_1
	continue
control_stmt_@0_decl_1
	break
expr_stmt_
	expr_
	endline_
end_stmt_
	end
	ENDL
expr_
	single_expr_
	expr_@0_opt_2
expr_@0_opt_2
	NULL
expr_@0_opt_2
	,
	expr_
single_expr_
	basic_expr_
single_expr_
	lambda_expr_
basic_expr_
	cond_expr_
	basic_expr_@1_opt_2
basic_expr_
	var_bind_
	=
	cond_expr_
basic_expr_@1_opt_2
	NULL
basic_expr_@1_opt_2
	asi_op_
	single_expr_
asi_op_
	^=
asi_op_
	%=
asi_op_
	/=
asi_op_
	*=
asi_op_
	-=
asi_op_
	+=
asi_op_
	:=
asi_op_
	=
lambda_expr_
	[
	lambda_expr_@0_opt_2
	]
	(
	lambda_expr_@0_opt_5
	)
	lambda_body_
lambda_expr_@0_opt_5
	NULL
lambda_expr_@0_opt_5
	argument_list_
lambda_expr_@0_opt_2
	NULL
lambda_expr_@0_opt_2
	capture_list_
capture_list_
	capture_list_@0_opt_1
	ID
	capture_list_@0_rep_3
capture_list_@0_rep_3
	NULL
capture_list_@0_rep_3
	,
	capture_list_
	capture_list_@0_rep_3
capture_list_@0_opt_1
	NULL
capture_list_@0_opt_1
	=
argument_list_
	argument_list_@1_opt_1
	ID
	argument_list_@1_opt_3
	visit_expr_
	argument_list_@1_rep_5
argument_list_
	...
	ID
argument_list_@1_rep_5
	NULL
argument_list_@1_rep_5
	,
	argument_list_
	argument_list_@1_rep_5
argument_list_@1_opt_3
	NULL
argument_list_@1_opt_3
	:
argument_list_@1_opt_1
	NULL
argument_list_@1_opt_1
	=
lambda_body_
	->
	cond_expr_
lambda_body_
	{
	lambda_body_@0_rep_2
	}
lambda_body_@0_rep_2
	NULL
lambda_body_@0_rep_2
	statement_
	lambda_body_@0_rep_2@0_rep_2
	lambda_body_@0_rep_2
lambda_body_@0_rep_2@0_rep_2
	NULL
lambda_body_@0_rep_2@0_rep_2
	ENDL
	lambda_body_@0_rep_2@0_rep_2
cond_expr_
	logic_or_expr_
	cond_expr_@0_opt_2
cond_expr_@0_opt_2
	NULL
cond_expr_@0_opt_2
	cond_postfix_
cond_postfix_
	:
	logic_or_expr_
cond_postfix_
	?
	logic_or_expr_
	:
	cond_expr_
logic_or_expr_
	logic_and_expr_
	logic_or_expr_@0_opt_2
logic_or_expr_@0_opt_2
	NULL
logic_or_expr_@0_opt_2
	logic_or_expr_@0_opt_2@0_decl_1
	logic_or_expr_
logic_or_expr_@0_opt_2@0_decl_1
	or
logic_or_expr_@0_opt_2@0_decl_1
	||
logic_and_expr_
	equal_expr_
	logic_and_expr_@0_opt_2
logic_and_expr_@0_opt_2
	NULL
logic_and_expr_@0_opt_2
	logic_and_expr_@0_opt_2@0_decl_1
	logic_and_expr_
logic_and_expr_@0_opt_2@0_decl_1
	and
logic_and_expr_@0_opt_2@0_decl_1
	&&
equal_expr_
	relat_expr_
	equal_expr_@0_opt_2
equal_expr_@0_opt_2
	NULL
equal_expr_@0_opt_2
	equal_expr_@0_opt_2@0_decl_1
	equal_expr_
equal_expr_@0_opt_2@0_decl_1
	!=
equal_expr_@0_opt_2@0_decl_1
	==
relat_expr_
	add_expr_
	relat_expr_@0_opt_2
relat_expr_@0_opt_2
	NULL
relat_expr_@0_opt_2
	relat_expr_@0_opt_2@0_decl_1
	relat_expr_
relat_expr_@0_opt_2@0_decl_1
	<=
relat_expr_@0_opt_2@0_decl_1
	>=
relat_expr_@0_opt_2@0_decl_1
	<
relat_expr_@0_opt_2@0_decl_1
	>
add_expr_
	mul_expr_
	add_expr_@0_opt_2
add_expr_@0_opt_2
	NULL
add_expr_@0_opt_2
	add_expr_@0_opt_2@0_decl_1
	add_expr_
add_expr_@0_opt_2@0_decl_1
	-
add_expr_@0_opt_2@0_decl_1
	+
mul_expr_
	unary_expr_
	mul_expr_@0_opt_2
mul_expr_@0_opt_2
	NULL
mul_expr_@0_opt_2
	mul_expr_@0_opt_2@0_decl_1
	mul_expr_
mul_expr_@0_opt_2@0_decl_1
	^
mul_expr_@0_opt_2@0_decl_1
	%
mul_expr_@0_opt_2@0_decl_1
	/
mul_expr_@0_opt_2@0_decl_1
	*
unary_expr_
	prim_expr_
	unary_expr_@2_opt_2
unary_expr_
	unary_expr_@1_decl_1
	unary_expr_
	unary_expr_@1_opt_3
unary_expr_
	unary_op_
	unary_expr_
unary_expr_@2_opt_2
	NULL
unary_expr_@2_opt_2
	postfix_expr_
unary_expr_@1_opt_3
	NULL
unary_expr_@1_opt_3
	array_
unary_expr_@1_decl_1
	gcnew
unary_expr_@1_decl_1
	new
unary_op_
	!
unary_op_
	-
unary_op_
	&
unary_op_
	*
unary_op_
	--
unary_op_
	++
unary_op_
	typeid
postfix_expr_
	postfix_expr_@0_decl_1
	postfix_expr_@0_opt_2
postfix_expr_@0_opt_2
	NULL
postfix_expr_@0_opt_2
	postfix_expr_
postfix_expr_@0_decl_1
	...
postfix_expr_@0_decl_1
	--
postfix_expr_@0_decl_1
	++
prim_expr_
	constant_
prim_expr_
	visit_expr_
visit_expr_
	object_
	visit_expr_@0_opt_2
visit_expr_@0_opt_2
	NULL
visit_expr_@0_opt_2
	visit_expr_@0_opt_2@0_decl_1
	visit_expr_
visit_expr_@0_opt_2@0_decl_1
	.
visit_expr_@0_opt_2@0_decl_1
	->
object_
	CHAR
object_
	element_
object_
	global
object_
	local
object_
	STR
	object_@1_opt_2
object_
	array_
	object_@0_opt_2
object_@1_opt_2
	NULL
object_@1_opt_2
	index_
object_@0_opt_2
	NULL
object_@0_opt_2
	index_
element_
	element_@0_decl_1
	element_@0_rep_2
element_@0_rep_2
	NULL
element_@0_rep_2
	index_
	element_@0_rep_2
element_@0_rep_2
	fcall_
	element_@0_rep_2
element_@0_decl_1
	(
	single_expr_
	)
element_@0_decl_1
	ID
constant_
	false
constant_
	true
constant_
	null
constant_
	NUM
array_
	{
	array_@0_opt_2
	}
array_@0_opt_2
	NULL
array_@0_opt_2
	expr_
fcall_
	(
	fcall_@0_opt_2
	)
fcall_@0_opt_2
	NULL
fcall_@0_opt_2
	expr_
index_
	[
	basic_expr_
	]
print ebnf end



######################
show origin terms info
######################
begin_ ::= stmts_ 
ignore_ ::= ignore_@0_rep_1 
ignore_@0_rep_1 ::= NULL 
ignore_@0_rep_1 ::= ENDL ignore_@0_rep_1 
endline_ ::= ; 
endline_ ::= ENDL 
stmts_ ::= stmts_@0_rep_1 
stmts_@0_rep_1 ::= NULL 
stmts_@0_rep_1 ::= statement_ stmts_@0_rep_1@0_rep_2 stmts_@0_rep_1 
stmts_@0_rep_1@0_rep_2 ::= NULL 
stmts_@0_rep_1@0_rep_2 ::= ENDL stmts_@0_rep_1@0_rep_2 
decl_stmts_ ::= decl_stmts_@0_rep_1 
decl_stmts_@0_rep_1 ::= NULL 
decl_stmts_@0_rep_1 ::= declaration_ decl_stmts_@0_rep_1@0_rep_2 decl_stmts_@0_rep_1 
decl_stmts_@0_rep_1@0_rep_2 ::= NULL 
decl_stmts_@0_rep_1@0_rep_2 ::= ENDL decl_stmts_@0_rep_1@0_rep_2 
endblock_ ::= catch_stmt_ 
endblock_ ::= until_stmt_ 
endblock_ ::= else_stmt_ 
endblock_ ::= end_stmt_ 
statement_ ::= expr_stmt_ 
statement_ ::= class_stmt_ 
statement_ ::= throw_stmt_ 
statement_ ::= try_stmt_ 
statement_ ::= return_stmt_ 
statement_ ::= function_stmt_ 
statement_ ::= control_stmt_ 
statement_ ::= foreach_stmt_ 
statement_ ::= for_stmt_ 
statement_ ::= loop_stmt_ 
statement_ ::= while_stmt_ 
statement_ ::= switch_stmt_ 
statement_ ::= if_stmt_ 
statement_ ::= using_stmt_ 
statement_ ::= namespace_stmt_ 
statement_ ::= block_stmt_ 
statement_ ::= var_stmt_ 
statement_ ::= import_stmt_ 
statement_ ::= package_stmt_ 
statement_ ::= prep_stmt_ 
declaration_ ::= class_stmt_ 
declaration_ ::= function_stmt_ 
declaration_ ::= using_stmt_ 
declaration_ ::= var_stmt_ 
declaration_ ::= namespace_stmt_ 
declaration_ ::= prep_stmt_ 
prep_stmt_ ::= PREP ENDL 
package_stmt_ ::= package ID endline_ 
import_stmt_ ::= import import_list_ endline_ 
module_list_ ::= ID module_list_@0_opt_2 
module_list_@0_opt_2 ::= NULL 
module_list_@0_opt_2 ::= . module_list_@0_opt_2@0_decl_2 
module_list_@0_opt_2@0_decl_2 ::= module_list_ 
module_list_@0_opt_2@0_decl_2 ::= * 
import_list_ ::= module_list_ import_list_@0_opt_2 import_list_@0_opt_3 
import_list_@0_opt_3 ::= NULL 
import_list_@0_opt_3 ::= , import_list_ 
import_list_@0_opt_2 ::= NULL 
import_list_@0_opt_2 ::= as ID 
var_def_ ::= var_list_ 
var_def_ ::= var_bind_ = basic_expr_ 
var_stmt_ ::= var_stmt_@0_decl_1 var_def_ endline_ 
var_stmt_@0_decl_1 ::= constant 
var_stmt_@0_decl_1 ::= link 
var_stmt_@0_decl_1 ::= var 
var_bind_ ::= ( var_bind_list_ var_bind_@0_rep_3 ) 
var_bind_@0_rep_3 ::= NULL 
var_bind_@0_rep_3 ::= , var_bind_list_ var_bind_@0_rep_3 
var_bind_list_ ::= var_bind_ 
var_bind_list_ ::= ... 
var_bind_list_ ::= ID 
var_list_ ::= ID = single_expr_ var_list_@0_opt_4 
var_list_@0_opt_4 ::= NULL 
var_list_@0_opt_4 ::= , var_list_ 
block_stmt_ ::= block ENDL stmts_ end ENDL 
namespace_stmt_ ::= namespace ID ENDL decl_stmts_ end ENDL 
using_stmt_ ::= using using_list_ endline 
using_list_ ::= module_list_ using_list_@0_opt_2 
using_list_@0_opt_2 ::= NULL 
using_list_@0_opt_2 ::= , using_list_ 
if_stmt_ ::= if basic_expr_ ENDL stmts_ if_stmt_@0_rep_5 
if_stmt_@0_rep_5 ::= NULL 
if_stmt_@0_rep_5 ::= else_stmt_ stmts_ end ENDL if_stmt_@0_rep_5 
else_stmt_ ::= else else_stmt_@0_opt_2 ENDL 
else_stmt_@0_opt_2 ::= NULL 
else_stmt_@0_opt_2 ::= if basic_expr_ 
switch_stmt_ ::= switch basic_expr_ ENDL switch_stmts_ end ENDL 
switch_stmts_ ::= switch_stmts_@0_rep_1 switch_stmts_@0_rep_2 
switch_stmts_@0_rep_2 ::= NULL 
switch_stmts_@0_rep_2 ::= ENDL switch_stmts_@0_rep_2 
switch_stmts_@0_rep_1 ::= NULL 
switch_stmts_@0_rep_1 ::= switch_default_ switch_stmts_@0_rep_1 
switch_stmts_@0_rep_1 ::= switch_case_ switch_stmts_@0_rep_1 
switch_case_ ::= case logic_or_expr_ ENDL stmts_ end ENDL 
switch_default_ ::= default ENDL stmts_ end ENDL 
while_stmt_ ::= while basic_expr_ ENDL stmts_ end ENDL 
loop_stmt_ ::= loop ENDL stmts_ loop_stmt_@0_decl_4 
loop_stmt_@0_decl_4 ::= ENDL 
loop_stmt_@0_decl_4 ::= end 
loop_stmt_@0_decl_4 ::= until_stmt_ 
until_stmt_ ::= until basic_expr_ ENDL 
for_stmt_ ::= for for_stmt_@0_opt_2 for_stmt_@0_decl_3 for_stmt_@0_opt_4 for_stmt_@0_decl_5 for_stmt_@0_opt_6 for_body_ 
for_stmt_@0_opt_6 ::= NULL 
for_stmt_@0_opt_6 ::= basic_expr_ 
for_stmt_@0_decl_5 ::= , 
for_stmt_@0_decl_5 ::= ; 
for_stmt_@0_opt_4 ::= NULL 
for_stmt_@0_opt_4 ::= basic_expr_ 
for_stmt_@0_decl_3 ::= , 
for_stmt_@0_decl_3 ::= ; 
for_stmt_@0_opt_2 ::= NULL 
for_stmt_@0_opt_2 ::= var_def_ 
foreach_stmt_ ::= foreach ID in basic_expr_ for_body_ 
for_body_ ::= for_body_@0_decl_1 
for_body_@0_decl_1 ::= ENDL stmts_ end ENDL 
for_body_@0_decl_1 ::= do basic_expr_ endline_ 
function_stmt_ ::= function ID ( function_stmt_@0_opt_4 ) function_stmt_@0_opt_6 function_body_ 
function_stmt_@0_opt_6 ::= NULL 
function_stmt_@0_opt_6 ::= override 
function_stmt_@0_opt_4 ::= NULL 
function_stmt_@0_opt_4 ::= argument_list_ 
function_body_ ::= function_body_@0_decl_1 
function_body_@0_decl_1 ::= ENDL stmts_ end ENDL 
function_body_@0_decl_1 ::= { stmts_ } 
return_stmt_ ::= return return_stmt_@0_opt_2 endline_ 
return_stmt_@0_opt_2 ::= NULL 
return_stmt_@0_opt_2 ::= expr_ 
try_stmt_ ::= try ENDL stmts_ try_stmt_@0_rep_4 end ENDL 
try_stmt_@0_rep_4 ::= NULL 
try_stmt_@0_rep_4 ::= catch_stmt_ stmts_ try_stmt_@0_rep_4 
catch_stmt_ ::= catch ID catch_stmt_@0_opt_3 ENDL 
catch_stmt_@0_opt_3 ::= NULL 
catch_stmt_@0_opt_3 ::= : visit_expr_ 
throw_stmt_ ::= throw throw_stmt_@0_opt_2 endline_ 
throw_stmt_@0_opt_2 ::= NULL 
throw_stmt_@0_opt_2 ::= expr_ 
class_stmt_ ::= class_stmt_@0_decl_1 ID class_stmt_@0_opt_3 ENDL decl_stmts_ end ENDL 
class_stmt_@0_opt_3 ::= NULL 
class_stmt_@0_opt_3 ::= extends visit_expr_ 
class_stmt_@0_decl_1 ::= struct 
class_stmt_@0_decl_1 ::= class 
control_stmt_ ::= control_stmt_@0_decl_1 endline_ 
control_stmt_@0_decl_1 ::= continue 
control_stmt_@0_decl_1 ::= break 
expr_stmt_ ::= expr_ endline_ 
end_stmt_ ::= end ENDL 
expr_ ::= single_expr_ expr_@0_opt_2 
expr_@0_opt_2 ::= NULL 
expr_@0_opt_2 ::= , expr_ 
single_expr_ ::= basic_expr_ 
single_expr_ ::= lambda_expr_ 
basic_expr_ ::= cond_expr_ basic_expr_@1_opt_2 
basic_expr_ ::= var_bind_ = cond_expr_ 
basic_expr_@1_opt_2 ::= NULL 
basic_expr_@1_opt_2 ::= asi_op_ single_expr_ 
asi_op_ ::= ^= 
asi_op_ ::= %= 
asi_op_ ::= /= 
asi_op_ ::= *= 
asi_op_ ::= -= 
asi_op_ ::= += 
asi_op_ ::= := 
asi_op_ ::= = 
lambda_expr_ ::= [ lambda_expr_@0_opt_2 ] ( lambda_expr_@0_opt_5 ) lambda_body_ 
lambda_expr_@0_opt_5 ::= NULL 
lambda_expr_@0_opt_5 ::= argument_list_ 
lambda_expr_@0_opt_2 ::= NULL 
lambda_expr_@0_opt_2 ::= capture_list_ 
capture_list_ ::= capture_list_@0_opt_1 ID capture_list_@0_rep_3 
capture_list_@0_rep_3 ::= NULL 
capture_list_@0_rep_3 ::= , capture_list_ capture_list_@0_rep_3 
capture_list_@0_opt_1 ::= NULL 
capture_list_@0_opt_1 ::= = 
argument_list_ ::= argument_list_@1_opt_1 ID argument_list_@1_opt_3 visit_expr_ argument_list_@1_rep_5 
argument_list_ ::= ... ID 
argument_list_@1_rep_5 ::= NULL 
argument_list_@1_rep_5 ::= , argument_list_ argument_list_@1_rep_5 
argument_list_@1_opt_3 ::= NULL 
argument_list_@1_opt_3 ::= : 
argument_list_@1_opt_1 ::= NULL 
argument_list_@1_opt_1 ::= = 
lambda_body_ ::= -> cond_expr_ 
lambda_body_ ::= { lambda_body_@0_rep_2 } 
lambda_body_@0_rep_2 ::= NULL 
lambda_body_@0_rep_2 ::= statement_ lambda_body_@0_rep_2@0_rep_2 lambda_body_@0_rep_2 
lambda_body_@0_rep_2@0_rep_2 ::= NULL 
lambda_body_@0_rep_2@0_rep_2 ::= ENDL lambda_body_@0_rep_2@0_rep_2 
cond_expr_ ::= logic_or_expr_ cond_expr_@0_opt_2 
cond_expr_@0_opt_2 ::= NULL 
cond_expr_@0_opt_2 ::= cond_postfix_ 
cond_postfix_ ::= : logic_or_expr_ 
cond_postfix_ ::= ? logic_or_expr_ : cond_expr_ 
logic_or_expr_ ::= logic_and_expr_ logic_or_expr_@0_opt_2 
logic_or_expr_@0_opt_2 ::= NULL 
logic_or_expr_@0_opt_2 ::= logic_or_expr_@0_opt_2@0_decl_1 logic_or_expr_ 
logic_or_expr_@0_opt_2@0_decl_1 ::= or 
logic_or_expr_@0_opt_2@0_decl_1 ::= || 
logic_and_expr_ ::= equal_expr_ logic_and_expr_@0_opt_2 
logic_and_expr_@0_opt_2 ::= NULL 
logic_and_expr_@0_opt_2 ::= logic_and_expr_@0_opt_2@0_decl_1 logic_and_expr_ 
logic_and_expr_@0_opt_2@0_decl_1 ::= and 
logic_and_expr_@0_opt_2@0_decl_1 ::= && 
equal_expr_ ::= relat_expr_ equal_expr_@0_opt_2 
equal_expr_@0_opt_2 ::= NULL 
equal_expr_@0_opt_2 ::= equal_expr_@0_opt_2@0_decl_1 equal_expr_ 
equal_expr_@0_opt_2@0_decl_1 ::= != 
equal_expr_@0_opt_2@0_decl_1 ::= == 
relat_expr_ ::= add_expr_ relat_expr_@0_opt_2 
relat_expr_@0_opt_2 ::= NULL 
relat_expr_@0_opt_2 ::= relat_expr_@0_opt_2@0_decl_1 relat_expr_ 
relat_expr_@0_opt_2@0_decl_1 ::= <= 
relat_expr_@0_opt_2@0_decl_1 ::= >= 
relat_expr_@0_opt_2@0_decl_1 ::= < 
relat_expr_@0_opt_2@0_decl_1 ::= > 
add_expr_ ::= mul_expr_ add_expr_@0_opt_2 
add_expr_@0_opt_2 ::= NULL 
add_expr_@0_opt_2 ::= add_expr_@0_opt_2@0_decl_1 add_expr_ 
add_expr_@0_opt_2@0_decl_1 ::= - 
add_expr_@0_opt_2@0_decl_1 ::= + 
mul_expr_ ::= unary_expr_ mul_expr_@0_opt_2 
mul_expr_@0_opt_2 ::= NULL 
mul_expr_@0_opt_2 ::= mul_expr_@0_opt_2@0_decl_1 mul_expr_ 
mul_expr_@0_opt_2@0_decl_1 ::= ^ 
mul_expr_@0_opt_2@0_decl_1 ::= % 
mul_expr_@0_opt_2@0_decl_1 ::= / 
mul_expr_@0_opt_2@0_decl_1 ::= * 
unary_expr_ ::= prim_expr_ unary_expr_@2_opt_2 
unary_expr_ ::= unary_expr_@1_decl_1 unary_expr_ unary_expr_@1_opt_3 
unary_expr_ ::= unary_op_ unary_expr_ 
unary_expr_@2_opt_2 ::= NULL 
unary_expr_@2_opt_2 ::= postfix_expr_ 
unary_expr_@1_opt_3 ::= NULL 
unary_expr_@1_opt_3 ::= array_ 
unary_expr_@1_decl_1 ::= gcnew 
unary_expr_@1_decl_1 ::= new 
unary_op_ ::= ! 
unary_op_ ::= - 
unary_op_ ::= & 
unary_op_ ::= * 
unary_op_ ::= -- 
unary_op_ ::= ++ 
unary_op_ ::= typeid 
postfix_expr_ ::= postfix_expr_@0_decl_1 postfix_expr_@0_opt_2 
postfix_expr_@0_opt_2 ::= NULL 
postfix_expr_@0_opt_2 ::= postfix_expr_ 
postfix_expr_@0_decl_1 ::= ... 
postfix_expr_@0_decl_1 ::= -- 
postfix_expr_@0_decl_1 ::= ++ 
prim_expr_ ::= constant_ 
prim_expr_ ::= visit_expr_ 
visit_expr_ ::= object_ visit_expr_@0_opt_2 
visit_expr_@0_opt_2 ::= NULL 
visit_expr_@0_opt_2 ::= visit_expr_@0_opt_2@0_decl_1 visit_expr_ 
visit_expr_@0_opt_2@0_decl_1 ::= . 
visit_expr_@0_opt_2@0_decl_1 ::= -> 
object_ ::= CHAR 
object_ ::= element_ 
object_ ::= global 
object_ ::= local 
object_ ::= STR object_@1_opt_2 
object_ ::= array_ object_@0_opt_2 
object_@1_opt_2 ::= NULL 
object_@1_opt_2 ::= index_ 
object_@0_opt_2 ::= NULL 
object_@0_opt_2 ::= index_ 
element_ ::= element_@0_decl_1 element_@0_rep_2 
element_@0_rep_2 ::= NULL 
element_@0_rep_2 ::= index_ element_@0_rep_2 
element_@0_rep_2 ::= fcall_ element_@0_rep_2 
element_@0_decl_1 ::= ( single_expr_ ) 
element_@0_decl_1 ::= ID 
constant_ ::= false 
constant_ ::= true 
constant_ ::= null 
constant_ ::= NUM 
array_ ::= { array_@0_opt_2 } 
array_@0_opt_2 ::= NULL 
array_@0_opt_2 ::= expr_ 
fcall_ ::= ( fcall_@0_opt_2 ) 
fcall_@0_opt_2 ::= NULL 
fcall_@0_opt_2 ::= expr_ 
index_ ::= [ basic_expr_ ] 



##############################
show info after add start node
##############################
%start% ::= begin_ ;
begin_ ::= stmts_ ;
ignore_ ::= ignore_@0_rep_1 ;
ignore_@0_rep_1 ::= NULL ;
ignore_@0_rep_1 ::= ENDL ignore_@0_rep_1 ;
endline_ ::= ; ;
endline_ ::= ENDL ;
stmts_ ::= stmts_@0_rep_1 ;
stmts_@0_rep_1 ::= NULL ;
stmts_@0_rep_1 ::= statement_ stmts_@0_rep_1@0_rep_2 stmts_@0_rep_1 ;
stmts_@0_rep_1@0_rep_2 ::= NULL ;
stmts_@0_rep_1@0_rep_2 ::= ENDL stmts_@0_rep_1@0_rep_2 ;
decl_stmts_ ::= decl_stmts_@0_rep_1 ;
decl_stmts_@0_rep_1 ::= NULL ;
decl_stmts_@0_rep_1 ::= declaration_ decl_stmts_@0_rep_1@0_rep_2 decl_stmts_@0_rep_1 ;
decl_stmts_@0_rep_1@0_rep_2 ::= NULL ;
decl_stmts_@0_rep_1@0_rep_2 ::= ENDL decl_stmts_@0_rep_1@0_rep_2 ;
endblock_ ::= catch_stmt_ ;
endblock_ ::= until_stmt_ ;
endblock_ ::= else_stmt_ ;
endblock_ ::= end_stmt_ ;
statement_ ::= expr_stmt_ ;
statement_ ::= class_stmt_ ;
statement_ ::= throw_stmt_ ;
statement_ ::= try_stmt_ ;
statement_ ::= return_stmt_ ;
statement_ ::= function_stmt_ ;
statement_ ::= control_stmt_ ;
statement_ ::= foreach_stmt_ ;
statement_ ::= for_stmt_ ;
statement_ ::= loop_stmt_ ;
statement_ ::= while_stmt_ ;
statement_ ::= switch_stmt_ ;
statement_ ::= if_stmt_ ;
statement_ ::= using_stmt_ ;
statement_ ::= namespace_stmt_ ;
statement_ ::= block_stmt_ ;
statement_ ::= var_stmt_ ;
statement_ ::= import_stmt_ ;
statement_ ::= package_stmt_ ;
statement_ ::= prep_stmt_ ;
declaration_ ::= class_stmt_ ;
declaration_ ::= function_stmt_ ;
declaration_ ::= using_stmt_ ;
declaration_ ::= var_stmt_ ;
declaration_ ::= namespace_stmt_ ;
declaration_ ::= prep_stmt_ ;
prep_stmt_ ::= PREP ENDL ;
package_stmt_ ::= package ID endline_ ;
import_stmt_ ::= import import_list_ endline_ ;
module_list_ ::= ID module_list_@0_opt_2 ;
module_list_@0_opt_2 ::= NULL ;
module_list_@0_opt_2 ::= . module_list_@0_opt_2@0_decl_2 ;
module_list_@0_opt_2@0_decl_2 ::= module_list_ ;
module_list_@0_opt_2@0_decl_2 ::= * ;
import_list_ ::= module_list_ import_list_@0_opt_2 import_list_@0_opt_3 ;
import_list_@0_opt_3 ::= NULL ;
import_list_@0_opt_3 ::= , import_list_ ;
import_list_@0_opt_2 ::= NULL ;
import_list_@0_opt_2 ::= as ID ;
var_def_ ::= var_list_ ;
var_def_ ::= var_bind_ = basic_expr_ ;
var_stmt_ ::= var_stmt_@0_decl_1 var_def_ endline_ ;
var_stmt_@0_decl_1 ::= constant ;
var_stmt_@0_decl_1 ::= link ;
var_stmt_@0_decl_1 ::= var ;
var_bind_ ::= ( var_bind_list_ var_bind_@0_rep_3 ) ;
var_bind_@0_rep_3 ::= NULL ;
var_bind_@0_rep_3 ::= , var_bind_list_ var_bind_@0_rep_3 ;
var_bind_list_ ::= var_bind_ ;
var_bind_list_ ::= ... ;
var_bind_list_ ::= ID ;
var_list_ ::= ID = single_expr_ var_list_@0_opt_4 ;
var_list_@0_opt_4 ::= NULL ;
var_list_@0_opt_4 ::= , var_list_ ;
block_stmt_ ::= block ENDL stmts_ end ENDL ;
namespace_stmt_ ::= namespace ID ENDL decl_stmts_ end ENDL ;
using_stmt_ ::= using using_list_ endline ;
using_list_ ::= module_list_ using_list_@0_opt_2 ;
using_list_@0_opt_2 ::= NULL ;
using_list_@0_opt_2 ::= , using_list_ ;
if_stmt_ ::= if basic_expr_ ENDL stmts_ if_stmt_@0_rep_5 ;
if_stmt_@0_rep_5 ::= NULL ;
if_stmt_@0_rep_5 ::= else_stmt_ stmts_ end ENDL if_stmt_@0_rep_5 ;
else_stmt_ ::= else else_stmt_@0_opt_2 ENDL ;
else_stmt_@0_opt_2 ::= NULL ;
else_stmt_@0_opt_2 ::= if basic_expr_ ;
switch_stmt_ ::= switch basic_expr_ ENDL switch_stmts_ end ENDL ;
switch_stmts_ ::= switch_stmts_@0_rep_1 switch_stmts_@0_rep_2 ;
switch_stmts_@0_rep_2 ::= NULL ;
switch_stmts_@0_rep_2 ::= ENDL switch_stmts_@0_rep_2 ;
switch_stmts_@0_rep_1 ::= NULL ;
switch_stmts_@0_rep_1 ::= switch_default_ switch_stmts_@0_rep_1 ;
switch_stmts_@0_rep_1 ::= switch_case_ switch_stmts_@0_rep_1 ;
switch_case_ ::= case logic_or_expr_ ENDL stmts_ end ENDL ;
switch_default_ ::= default ENDL stmts_ end ENDL ;
while_stmt_ ::= while basic_expr_ ENDL stmts_ end ENDL ;
loop_stmt_ ::= loop ENDL stmts_ loop_stmt_@0_decl_4 ;
loop_stmt_@0_decl_4 ::= ENDL ;
loop_stmt_@0_decl_4 ::= end ;
loop_stmt_@0_decl_4 ::= until_stmt_ ;
until_stmt_ ::= until basic_expr_ ENDL ;
for_stmt_ ::= for for_stmt_@0_opt_2 for_stmt_@0_decl_3 for_stmt_@0_opt_4 for_stmt_@0_decl_5 for_stmt_@0_opt_6 for_body_ ;
for_stmt_@0_opt_6 ::= NULL ;
for_stmt_@0_opt_6 ::= basic_expr_ ;
for_stmt_@0_decl_5 ::= , ;
for_stmt_@0_decl_5 ::= ; ;
for_stmt_@0_opt_4 ::= NULL ;
for_stmt_@0_opt_4 ::= basic_expr_ ;
for_stmt_@0_decl_3 ::= , ;
for_stmt_@0_decl_3 ::= ; ;
for_stmt_@0_opt_2 ::= NULL ;
for_stmt_@0_opt_2 ::= var_def_ ;
foreach_stmt_ ::= foreach ID in basic_expr_ for_body_ ;
for_body_ ::= for_body_@0_decl_1 ;
for_body_@0_decl_1 ::= ENDL stmts_ end ENDL ;
for_body_@0_decl_1 ::= do basic_expr_ endline_ ;
function_stmt_ ::= function ID ( function_stmt_@0_opt_4 ) function_stmt_@0_opt_6 function_body_ ;
function_stmt_@0_opt_6 ::= NULL ;
function_stmt_@0_opt_6 ::= override ;
function_stmt_@0_opt_4 ::= NULL ;
function_stmt_@0_opt_4 ::= argument_list_ ;
function_body_ ::= function_body_@0_decl_1 ;
function_body_@0_decl_1 ::= ENDL stmts_ end ENDL ;
function_body_@0_decl_1 ::= { stmts_ } ;
return_stmt_ ::= return return_stmt_@0_opt_2 endline_ ;
return_stmt_@0_opt_2 ::= NULL ;
return_stmt_@0_opt_2 ::= expr_ ;
try_stmt_ ::= try ENDL stmts_ try_stmt_@0_rep_4 end ENDL ;
try_stmt_@0_rep_4 ::= NULL ;
try_stmt_@0_rep_4 ::= catch_stmt_ stmts_ try_stmt_@0_rep_4 ;
catch_stmt_ ::= catch ID catch_stmt_@0_opt_3 ENDL ;
catch_stmt_@0_opt_3 ::= NULL ;
catch_stmt_@0_opt_3 ::= : visit_expr_ ;
throw_stmt_ ::= throw throw_stmt_@0_opt_2 endline_ ;
throw_stmt_@0_opt_2 ::= NULL ;
throw_stmt_@0_opt_2 ::= expr_ ;
class_stmt_ ::= class_stmt_@0_decl_1 ID class_stmt_@0_opt_3 ENDL decl_stmts_ end ENDL ;
class_stmt_@0_opt_3 ::= NULL ;
class_stmt_@0_opt_3 ::= extends visit_expr_ ;
class_stmt_@0_decl_1 ::= struct ;
class_stmt_@0_decl_1 ::= class ;
control_stmt_ ::= control_stmt_@0_decl_1 endline_ ;
control_stmt_@0_decl_1 ::= continue ;
control_stmt_@0_decl_1 ::= break ;
expr_stmt_ ::= expr_ endline_ ;
end_stmt_ ::= end ENDL ;
expr_ ::= single_expr_ expr_@0_opt_2 ;
expr_@0_opt_2 ::= NULL ;
expr_@0_opt_2 ::= , expr_ ;
single_expr_ ::= basic_expr_ ;
single_expr_ ::= lambda_expr_ ;
basic_expr_ ::= cond_expr_ basic_expr_@1_opt_2 ;
basic_expr_ ::= var_bind_ = cond_expr_ ;
basic_expr_@1_opt_2 ::= NULL ;
basic_expr_@1_opt_2 ::= asi_op_ single_expr_ ;
asi_op_ ::= ^= ;
asi_op_ ::= %= ;
asi_op_ ::= /= ;
asi_op_ ::= *= ;
asi_op_ ::= -= ;
asi_op_ ::= += ;
asi_op_ ::= := ;
asi_op_ ::= = ;
lambda_expr_ ::= [ lambda_expr_@0_opt_2 ] ( lambda_expr_@0_opt_5 ) lambda_body_ ;
lambda_expr_@0_opt_5 ::= NULL ;
lambda_expr_@0_opt_5 ::= argument_list_ ;
lambda_expr_@0_opt_2 ::= NULL ;
lambda_expr_@0_opt_2 ::= capture_list_ ;
capture_list_ ::= capture_list_@0_opt_1 ID capture_list_@0_rep_3 ;
capture_list_@0_rep_3 ::= NULL ;
capture_list_@0_rep_3 ::= , capture_list_ capture_list_@0_rep_3 ;
capture_list_@0_opt_1 ::= NULL ;
capture_list_@0_opt_1 ::= = ;
argument_list_ ::= argument_list_@1_opt_1 ID argument_list_@1_opt_3 visit_expr_ argument_list_@1_rep_5 ;
argument_list_ ::= ... ID ;
argument_list_@1_rep_5 ::= NULL ;
argument_list_@1_rep_5 ::= , argument_list_ argument_list_@1_rep_5 ;
argument_list_@1_opt_3 ::= NULL ;
argument_list_@1_opt_3 ::= : ;
argument_list_@1_opt_1 ::= NULL ;
argument_list_@1_opt_1 ::= = ;
lambda_body_ ::= -> cond_expr_ ;
lambda_body_ ::= { lambda_body_@0_rep_2 } ;
lambda_body_@0_rep_2 ::= NULL ;
lambda_body_@0_rep_2 ::= statement_ lambda_body_@0_rep_2@0_rep_2 lambda_body_@0_rep_2 ;
lambda_body_@0_rep_2@0_rep_2 ::= NULL ;
lambda_body_@0_rep_2@0_rep_2 ::= ENDL lambda_body_@0_rep_2@0_rep_2 ;
cond_expr_ ::= logic_or_expr_ cond_expr_@0_opt_2 ;
cond_expr_@0_opt_2 ::= NULL ;
cond_expr_@0_opt_2 ::= cond_postfix_ ;
cond_postfix_ ::= : logic_or_expr_ ;
cond_postfix_ ::= ? logic_or_expr_ : cond_expr_ ;
logic_or_expr_ ::= logic_and_expr_ logic_or_expr_@0_opt_2 ;
logic_or_expr_@0_opt_2 ::= NULL ;
logic_or_expr_@0_opt_2 ::= logic_or_expr_@0_opt_2@0_decl_1 logic_or_expr_ ;
logic_or_expr_@0_opt_2@0_decl_1 ::= or ;
logic_or_expr_@0_opt_2@0_decl_1 ::= || ;
logic_and_expr_ ::= equal_expr_ logic_and_expr_@0_opt_2 ;
logic_and_expr_@0_opt_2 ::= NULL ;
logic_and_expr_@0_opt_2 ::= logic_and_expr_@0_opt_2@0_decl_1 logic_and_expr_ ;
logic_and_expr_@0_opt_2@0_decl_1 ::= and ;
logic_and_expr_@0_opt_2@0_decl_1 ::= && ;
equal_expr_ ::= relat_expr_ equal_expr_@0_opt_2 ;
equal_expr_@0_opt_2 ::= NULL ;
equal_expr_@0_opt_2 ::= equal_expr_@0_opt_2@0_decl_1 equal_expr_ ;
equal_expr_@0_opt_2@0_decl_1 ::= != ;
equal_expr_@0_opt_2@0_decl_1 ::= == ;
relat_expr_ ::= add_expr_ relat_expr_@0_opt_2 ;
relat_expr_@0_opt_2 ::= NULL ;
relat_expr_@0_opt_2 ::= relat_expr_@0_opt_2@0_decl_1 relat_expr_ ;
relat_expr_@0_opt_2@0_decl_1 ::= <= ;
relat_expr_@0_opt_2@0_decl_1 ::= >= ;
relat_expr_@0_opt_2@0_decl_1 ::= < ;
relat_expr_@0_opt_2@0_decl_1 ::= > ;
add_expr_ ::= mul_expr_ add_expr_@0_opt_2 ;
add_expr_@0_opt_2 ::= NULL ;
add_expr_@0_opt_2 ::= add_expr_@0_opt_2@0_decl_1 add_expr_ ;
add_expr_@0_opt_2@0_decl_1 ::= - ;
add_expr_@0_opt_2@0_decl_1 ::= + ;
mul_expr_ ::= unary_expr_ mul_expr_@0_opt_2 ;
mul_expr_@0_opt_2 ::= NULL ;
mul_expr_@0_opt_2 ::= mul_expr_@0_opt_2@0_decl_1 mul_expr_ ;
mul_expr_@0_opt_2@0_decl_1 ::= ^ ;
mul_expr_@0_opt_2@0_decl_1 ::= % ;
mul_expr_@0_opt_2@0_decl_1 ::= / ;
mul_expr_@0_opt_2@0_decl_1 ::= * ;
unary_expr_ ::= prim_expr_ unary_expr_@2_opt_2 ;
unary_expr_ ::= unary_expr_@1_decl_1 unary_expr_ unary_expr_@1_opt_3 ;
unary_expr_ ::= unary_op_ unary_expr_ ;
unary_expr_@2_opt_2 ::= NULL ;
unary_expr_@2_opt_2 ::= postfix_expr_ ;
unary_expr_@1_opt_3 ::= NULL ;
unary_expr_@1_opt_3 ::= array_ ;
unary_expr_@1_decl_1 ::= gcnew ;
unary_expr_@1_decl_1 ::= new ;
unary_op_ ::= ! ;
unary_op_ ::= - ;
unary_op_ ::= & ;
unary_op_ ::= * ;
unary_op_ ::= -- ;
unary_op_ ::= ++ ;
unary_op_ ::= typeid ;
postfix_expr_ ::= postfix_expr_@0_decl_1 postfix_expr_@0_opt_2 ;
postfix_expr_@0_opt_2 ::= NULL ;
postfix_expr_@0_opt_2 ::= postfix_expr_ ;
postfix_expr_@0_decl_1 ::= ... ;
postfix_expr_@0_decl_1 ::= -- ;
postfix_expr_@0_decl_1 ::= ++ ;
prim_expr_ ::= constant_ ;
prim_expr_ ::= visit_expr_ ;
visit_expr_ ::= object_ visit_expr_@0_opt_2 ;
visit_expr_@0_opt_2 ::= NULL ;
visit_expr_@0_opt_2 ::= visit_expr_@0_opt_2@0_decl_1 visit_expr_ ;
visit_expr_@0_opt_2@0_decl_1 ::= . ;
visit_expr_@0_opt_2@0_decl_1 ::= -> ;
object_ ::= CHAR ;
object_ ::= element_ ;
object_ ::= global ;
object_ ::= local ;
object_ ::= STR object_@1_opt_2 ;
object_ ::= array_ object_@0_opt_2 ;
object_@1_opt_2 ::= NULL ;
object_@1_opt_2 ::= index_ ;
object_@0_opt_2 ::= NULL ;
object_@0_opt_2 ::= index_ ;
element_ ::= element_@0_decl_1 element_@0_rep_2 ;
element_@0_rep_2 ::= NULL ;
element_@0_rep_2 ::= index_ element_@0_rep_2 ;
element_@0_rep_2 ::= fcall_ element_@0_rep_2 ;
element_@0_decl_1 ::= ( single_expr_ ) ;
element_@0_decl_1 ::= ID ;
constant_ ::= false ;
constant_ ::= true ;
constant_ ::= null ;
constant_ ::= NUM ;
array_ ::= { array_@0_opt_2 } ;
array_@0_opt_2 ::= NULL ;
array_@0_opt_2 ::= expr_ ;
fcall_ ::= ( fcall_@0_opt_2 ) ;
fcall_@0_opt_2 ::= NULL ;
fcall_@0_opt_2 ::= expr_ ;
index_ ::= [ basic_expr_ ] ;
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
NULL is terminal2
ENDL is terminal2
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
package is terminal5
import is terminal5
ID is terminal2
NULL is terminal2
. is terminal1
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
NULL is terminal2
as is terminal5
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
NULL is terminal2
, is terminal1
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
NULL is terminal2
, is terminal1
block is terminal5
namespace is terminal5
using is terminal5
module_list_ is nonterminal3
NULL is terminal2
, is terminal1
if is terminal5
NULL is terminal2
else_stmt_ is nonterminal3
else is terminal5
NULL is terminal2
if is terminal5
switch is terminal5
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
NULL is terminal2
switch_default_ is nonterminal3
switch_case_ is nonterminal3
case is terminal5
default is terminal5
while is terminal5
loop is terminal5
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
for is terminal5
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
do is terminal5
function is terminal5
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
{ is terminal1
return is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
NULL is terminal2
catch_stmt_ is nonterminal3
catch is terminal5
NULL is terminal2
: is terminal1
throw is terminal5
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
NULL is terminal2
extends is terminal5
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
continue is terminal5
break is terminal5
expr_ is nonterminal3
end is terminal5
single_expr_ is nonterminal3
NULL is terminal2
, is terminal1
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
var_bind_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
NULL is terminal2
, is terminal1
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
... is terminal1
NULL is terminal2
, is terminal1
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
{ is terminal1
NULL is terminal2
statement_ is nonterminal3
NULL is terminal2
ENDL is terminal2
logic_or_expr_ is nonterminal3
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
? is terminal1
logic_and_expr_ is nonterminal3
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@1_decl_1 is nonterminal4
unary_op_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
array_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
NULL is terminal2
index_ is nonterminal3
fcall_ is nonterminal3
( is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
show   first_map
cond_expr_@0_opt_2:
NULL : ? 
asi_op_:
*= ^= := %= -= += = /= 
import_list_:
ID 
lambda_body_@0_rep_2:
CHAR null struct try class while * local NUM block NULL gcnew constant link new typeid function STR loop namespace import switch package & ++ break false throw PREP global { -- true for foreach return using if ID var continue - ( [ ! 
add_expr_@0_opt_2@0_decl_1:
- + 
lambda_expr_:
[ 
equal_expr_@0_opt_2@0_decl_1:
!= == 
capture_list_@0_opt_1:
= NULL 
throw_stmt_:
throw 
var_bind_@0_rep_3:
, NULL 
fcall_@0_opt_2:
CHAR null false ++ global * local NUM { -- NULL gcnew new true typeid STR ID [ - & ! ( 
stmts_:
null CHAR struct class try * block NULL NUM local while gcnew new link constant function typeid loop STR namespace import package switch & ++ PREP break throw false global { -- for true foreach return using if ID var continue ( - [ ! 
import_list_@0_opt_3:
, NULL 
function_body_@0_decl_1:
ENDL { 
var_stmt_@0_decl_1:
var constant link 
capture_list_@0_rep_3:
, NULL 
function_body_:
ENDL { 
equal_expr_:
++ null false CHAR global * NUM local { -- true gcnew new typeid STR ID ! - & ( 
catch_stmt_@0_opt_3:
NULL : 
for_stmt_@0_opt_6:
CHAR null false ++ global * local NUM { -- NULL gcnew new true typeid STR ID - & ! ( 
argument_list_@1_opt_3:
NULL : 
element_@0_decl_1:
ID ( 
control_stmt_:
break continue 
decl_stmts_:
PREP function using link namespace NULL var constant struct class 
element_:
( ID 
switch_stmt_:
switch 
control_stmt_@0_decl_1:
break continue 
using_list_:
ID 
statement_:
null CHAR struct class try while block * NUM local gcnew new link constant function typeid loop STR namespace import package switch & ++ PREP break throw false global { -- for true foreach return using if ID var [ ! ( continue - 
function_stmt_@0_opt_6:
override NULL 
function_stmt_@0_opt_4:
NULL = ID ... 
switch_case_:
case 
lambda_expr_@0_opt_2:
= ID NULL 
constant_:
NUM null false true 
index_:
[ 
ignore_:
NULL ENDL 
loop_stmt_:
loop 
expr_:
++ null false CHAR global * NUM local { -- true gcnew new typeid STR ID [ ( ! - & 
prim_expr_:
CHAR null STR false global ID local NUM { ( true 
relat_expr_@0_opt_2@0_decl_1:
>= < <= > 
return_stmt_@0_opt_2:
CHAR null false ++ global * local NUM { -- NULL gcnew new true typeid STR ID [ - & ! ( 
using_stmt_:
using 
switch_stmts_@0_rep_2:
ENDL NULL 
mul_expr_@0_opt_2:
% ^ NULL * / 
add_expr_:
++ null false CHAR global * NUM local { -- true gcnew new typeid STR ID ! - & ( 
class_stmt_@0_opt_3:
extends NULL 
import_stmt_:
import 
declaration_:
PREP function using link namespace var constant class struct 
until_stmt_:
until 
for_body_:
ENDL do 
object_@0_opt_2:
NULL [ 
lambda_expr_@0_opt_5:
NULL = ID ... 
postfix_expr_@0_opt_2:
++ NULL -- ... 
class_stmt_:
struct class 
logic_or_expr_@0_opt_2@0_decl_1:
|| or 
else_stmt_@0_opt_2:
if NULL 
endblock_:
until catch end else 
unary_expr_:
++ null false CHAR global * NUM local { -- true gcnew new typeid STR ID ! - & ( 
array_:
{ 
for_body_@0_decl_1:
do ENDL 
for_stmt_:
for 
single_expr_:
CHAR null false ++ global * local NUM { -- true gcnew new typeid STR ID [ - & ! ( 
lambda_body_@0_rep_2@0_rep_2:
ENDL NULL 
if_stmt_@0_rep_5:
NULL else 
postfix_expr_:
... ++ -- 
var_bind_list_:
ID ... ( 
argument_list_@1_opt_1:
= NULL 
visit_expr_@0_opt_2@0_decl_1:
-> . 
element_@0_rep_2:
( NULL [ 
try_stmt_@0_rep_4:
NULL catch 
cond_expr_:
CHAR null false ++ global * local NUM { -- true gcnew new typeid STR ID ( - & ! 
module_list_@0_opt_2@0_decl_2:
ID * 
decl_stmts_@0_rep_1@0_rep_2:
ENDL NULL 
expr_stmt_:
CHAR null false ++ global * local NUM { -- true gcnew new typeid STR ID [ - & ! ( 
namespace_stmt_:
namespace 
relat_expr_:
CHAR null false ++ global * local NUM { -- true gcnew new typeid STR ID ( - & ! 
lambda_body_:
-> { 
logic_or_expr_@0_opt_2:
|| or NULL 
unary_expr_@1_decl_1:
gcnew new 
for_stmt_@0_opt_4:
CHAR null false ++ global * local NUM { -- NULL gcnew new true typeid STR ID - & ! ( 
mul_expr_@0_opt_2@0_decl_1:
% ^ * / 
%start%:
null CHAR struct class try * while NULL NUM local block gcnew new link constant function typeid loop STR namespace import package switch & ++ PREP break throw false global { -- for true foreach return using if ID var continue ( ! [ - 
logic_or_expr_:
++ null false CHAR global * NUM local { -- true gcnew new typeid STR ID ! - & ( 
return_stmt_:
return 
loop_stmt_@0_decl_4:
end ENDL until 
try_stmt_:
try 
while_stmt_:
while 
var_stmt_:
constant var link 
using_list_@0_opt_2:
, NULL 
decl_stmts_@0_rep_1:
function PREP using link namespace NULL var struct class constant 
unary_expr_@2_opt_2:
++ NULL -- ... 
var_list_:
ID 
basic_expr_:
++ null false CHAR global * NUM local { -- true gcnew new typeid STR ID ( ! - & 
var_bind_:
( 
for_stmt_@0_opt_2:
ID ( NULL 
argument_list_:
... ID = 
for_stmt_@0_decl_5:
, ; 
array_@0_opt_2:
CHAR null false ++ global * local NUM { -- NULL gcnew new true typeid STR ID [ - & ! ( 
logic_and_expr_@0_opt_2:
and && NULL 
import_list_@0_opt_2:
as NULL 
endline_:
ENDL ; 
var_list_@0_opt_4:
, NULL 
foreach_stmt_:
foreach 
visit_expr_:
CHAR local STR ( ID global { 
begin_:
CHAR null struct try class block while NULL local NUM * gcnew constant link new typeid function STR loop namespace import switch package & ++ break false throw PREP global { -- true for foreach return using if ID var continue ( - [ ! 
visit_expr_@0_opt_2:
-> . NULL 
package_stmt_:
package 
basic_expr_@1_opt_2:
*= ^= %= := -= NULL += /= = 
capture_list_:
ID = 
stmts_@0_rep_1@0_rep_2:
ENDL NULL 
logic_and_expr_:
CHAR null false ++ global * local NUM { -- true gcnew new typeid STR ID ( - & ! 
module_list_:
ID 
if_stmt_:
if 
prep_stmt_:
PREP 
throw_stmt_@0_opt_2:
CHAR null false ++ global * local NUM { -- NULL gcnew new true typeid STR ID [ - & ! ( 
add_expr_@0_opt_2:
- NULL + 
for_stmt_@0_decl_3:
, ; 
equal_expr_@0_opt_2:
!= NULL == 
object_:
local { CHAR STR ( global ID 
class_stmt_@0_decl_1:
struct class 
ignore_@0_rep_1:
ENDL NULL 
argument_list_@1_rep_5:
, NULL 
var_def_:
( ID 
mul_expr_:
CHAR null false ++ global * local NUM { -- true gcnew new typeid STR ID ( - & ! 
stmts_@0_rep_1:
CHAR null struct try class block while local NUM * NULL gcnew constant link new typeid function STR loop namespace import switch package & ++ break false throw PREP global { -- true for foreach return using if ID var [ ( - continue ! 
unary_expr_@1_opt_3:
NULL { 
postfix_expr_@0_decl_1:
++ ... -- 
cond_postfix_:
? : 
block_stmt_:
block 
fcall_:
( 
function_stmt_:
function 
relat_expr_@0_opt_2:
>= <= < NULL > 
switch_stmts_@0_rep_1:
NULL case default 
catch_stmt_:
catch 
end_stmt_:
end 
switch_default_:
default 
switch_stmts_:
NULL ENDL default case 
module_list_@0_opt_2:
NULL . 
unary_op_:
typeid ++ -- - & * ! 
object_@1_opt_2:
NULL [ 
expr_@0_opt_2:
, NULL 
else_stmt_:
else 
logic_and_expr_@0_opt_2@0_decl_1:
and && 
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
ignore_@0_rep_1 is nonterminal4
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
ENDL is terminal2
package is terminal5
ID is terminal2
endline_ is nonterminal3
import is terminal5
import_list_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
ID is terminal2
module_list_@0_opt_2 is nonterminal4
NULL is terminal2
. is terminal1
module_list_@0_opt_2@0_decl_2 is nonterminal4
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_3 is nonterminal4
NULL is terminal2
, is terminal1
import_list_ is nonterminal3
NULL is terminal2
as is terminal5
ID is terminal2
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
= is terminal1
= is terminal1
basic_expr_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
var_def_ is nonterminal3
var_def_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
) is terminal1
var_bind_@0_rep_3 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
, is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
var_bind_@0_rep_3 is nonterminal4
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
= is terminal1
single_expr_ is nonterminal3
var_list_@0_opt_4 is nonterminal4
var_list_@0_opt_4 is nonterminal4
NULL is terminal2
, is terminal1
var_list_ is nonterminal3
block is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
namespace is terminal5
ID is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
using is terminal5
using_list_ is nonterminal3
endline is terminal5
endline is terminal5
module_list_ is nonterminal3
using_list_@0_opt_2 is nonterminal4
using_list_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
using_list_ is nonterminal3
if is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
if_stmt_@0_rep_5 is nonterminal4
if_stmt_@0_rep_5 is nonterminal4
NULL is terminal2
else_stmt_ is nonterminal3
stmts_ is nonterminal3
end is terminal5
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
if_stmt_@0_rep_5 is nonterminal4
else is terminal5
else_stmt_@0_opt_2 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
if is terminal5
basic_expr_ is nonterminal3
switch is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
switch_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
switch_default_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
switch_case_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
case is terminal5
logic_or_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
default is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
while is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
loop is terminal5
ENDL is terminal2
stmts_ is nonterminal3
loop_stmt_@0_decl_4 is nonterminal4
loop_stmt_@0_decl_4 is nonterminal4
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
for is terminal5
for_stmt_@0_opt_2 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_body_ is nonterminal3
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
ID is terminal2
in is terminal5
basic_expr_ is nonterminal3
for_body_ is nonterminal3
for_body_ is nonterminal3
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
do is terminal5
basic_expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
function is terminal5
ID is terminal2
( is terminal1
function_stmt_@0_opt_4 is nonterminal4
) is terminal1
) is terminal1
function_stmt_@0_opt_6 is nonterminal4
function_body_ is nonterminal3
function_body_ is nonterminal3
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
{ is terminal1
stmts_ is nonterminal3
} is terminal1
} is terminal1
return is terminal5
return_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
ENDL is terminal2
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
catch_stmt_ is nonterminal3
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
try_stmt_@0_rep_4 is nonterminal4
catch is terminal5
ID is terminal2
catch_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
: is terminal1
visit_expr_ is nonterminal3
throw is terminal5
throw_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
ID is terminal2
ID is terminal2
class_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
extends is terminal5
visit_expr_ is nonterminal3
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
continue is terminal5
break is terminal5
expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
end is terminal5
ENDL is terminal2
single_expr_ is nonterminal3
expr_@0_opt_2 is nonterminal4
expr_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
expr_ is nonterminal3
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
basic_expr_@1_opt_2 is nonterminal4
basic_expr_@1_opt_2 is nonterminal4
var_bind_ is nonterminal3
= is terminal1
= is terminal1
cond_expr_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
single_expr_ is nonterminal3
single_expr_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
lambda_expr_@0_opt_2 is nonterminal4
] is terminal1
] is terminal1
( is terminal1
lambda_expr_@0_opt_5 is nonterminal4
) is terminal1
) is terminal1
lambda_body_ is nonterminal3
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
, is terminal1
capture_list_ is nonterminal3
capture_list_@0_rep_3 is nonterminal4
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
argument_list_@1_opt_3 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
... is terminal1
ID is terminal2
NULL is terminal2
, is terminal1
argument_list_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
cond_expr_ is nonterminal3
{ is terminal1
lambda_body_@0_rep_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
statement_ is nonterminal3
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
logic_or_expr_ is nonterminal3
cond_expr_@0_opt_2 is nonterminal4
cond_expr_@0_opt_2 is nonterminal4
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
logic_or_expr_ is nonterminal3
? is terminal1
logic_or_expr_ is nonterminal3
: is terminal1
: is terminal1
cond_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
logic_or_expr_@0_opt_2 is nonterminal4
logic_or_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_or_expr_ is nonterminal3
logic_or_expr_ is nonterminal3
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
logic_and_expr_@0_opt_2 is nonterminal4
logic_and_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_and_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
equal_expr_@0_opt_2 is nonterminal4
equal_expr_@0_opt_2 is nonterminal4
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
equal_expr_ is nonterminal3
equal_expr_ is nonterminal3
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
relat_expr_@0_opt_2 is nonterminal4
relat_expr_@0_opt_2 is nonterminal4
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
relat_expr_ is nonterminal3
relat_expr_ is nonterminal3
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
add_expr_@0_opt_2 is nonterminal4
add_expr_@0_opt_2 is nonterminal4
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
add_expr_ is nonterminal3
add_expr_ is nonterminal3
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
mul_expr_@0_opt_2 is nonterminal4
mul_expr_@0_opt_2 is nonterminal4
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
mul_expr_ is nonterminal3
mul_expr_ is nonterminal3
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@1_decl_1 is nonterminal4
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_@1_opt_3 is nonterminal4
unary_expr_@1_opt_3 is nonterminal4
unary_op_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
visit_expr_@0_opt_2 is nonterminal4
visit_expr_@0_opt_2 is nonterminal4
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
object_@1_opt_2 is nonterminal4
array_ is nonterminal3
object_@0_opt_2 is nonterminal4
object_@0_opt_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
fcall_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
( is terminal1
single_expr_ is nonterminal3
) is terminal1
) is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
array_@0_opt_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
fcall_@0_opt_2 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
basic_expr_ is nonterminal3
] is terminal1
] is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
ignore_@0_rep_1 is nonterminal4
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
ENDL is terminal2
package is terminal5
ID is terminal2
endline_ is nonterminal3
import is terminal5
import_list_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
ID is terminal2
module_list_@0_opt_2 is nonterminal4
NULL is terminal2
. is terminal1
module_list_@0_opt_2@0_decl_2 is nonterminal4
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_3 is nonterminal4
NULL is terminal2
, is terminal1
import_list_ is nonterminal3
NULL is terminal2
as is terminal5
ID is terminal2
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
= is terminal1
= is terminal1
basic_expr_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
var_def_ is nonterminal3
var_def_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
) is terminal1
var_bind_@0_rep_3 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
, is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
var_bind_@0_rep_3 is nonterminal4
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
= is terminal1
single_expr_ is nonterminal3
var_list_@0_opt_4 is nonterminal4
var_list_@0_opt_4 is nonterminal4
NULL is terminal2
, is terminal1
var_list_ is nonterminal3
block is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
namespace is terminal5
ID is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
using is terminal5
using_list_ is nonterminal3
endline is terminal5
endline is terminal5
module_list_ is nonterminal3
using_list_@0_opt_2 is nonterminal4
using_list_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
using_list_ is nonterminal3
if is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
if_stmt_@0_rep_5 is nonterminal4
if_stmt_@0_rep_5 is nonterminal4
NULL is terminal2
else_stmt_ is nonterminal3
stmts_ is nonterminal3
end is terminal5
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
if_stmt_@0_rep_5 is nonterminal4
else is terminal5
else_stmt_@0_opt_2 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
if is terminal5
basic_expr_ is nonterminal3
switch is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
switch_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
switch_default_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
switch_case_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
case is terminal5
logic_or_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
default is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
while is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
loop is terminal5
ENDL is terminal2
stmts_ is nonterminal3
loop_stmt_@0_decl_4 is nonterminal4
loop_stmt_@0_decl_4 is nonterminal4
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
for is terminal5
for_stmt_@0_opt_2 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_body_ is nonterminal3
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
ID is terminal2
in is terminal5
basic_expr_ is nonterminal3
for_body_ is nonterminal3
for_body_ is nonterminal3
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
do is terminal5
basic_expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
function is terminal5
ID is terminal2
( is terminal1
function_stmt_@0_opt_4 is nonterminal4
) is terminal1
) is terminal1
function_stmt_@0_opt_6 is nonterminal4
function_body_ is nonterminal3
function_body_ is nonterminal3
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
{ is terminal1
stmts_ is nonterminal3
} is terminal1
} is terminal1
return is terminal5
return_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
ENDL is terminal2
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
catch_stmt_ is nonterminal3
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
try_stmt_@0_rep_4 is nonterminal4
catch is terminal5
ID is terminal2
catch_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
: is terminal1
visit_expr_ is nonterminal3
throw is terminal5
throw_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
ID is terminal2
ID is terminal2
class_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
extends is terminal5
visit_expr_ is nonterminal3
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
continue is terminal5
break is terminal5
expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
end is terminal5
ENDL is terminal2
single_expr_ is nonterminal3
expr_@0_opt_2 is nonterminal4
expr_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
expr_ is nonterminal3
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
basic_expr_@1_opt_2 is nonterminal4
basic_expr_@1_opt_2 is nonterminal4
var_bind_ is nonterminal3
= is terminal1
= is terminal1
cond_expr_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
single_expr_ is nonterminal3
single_expr_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
lambda_expr_@0_opt_2 is nonterminal4
] is terminal1
] is terminal1
( is terminal1
lambda_expr_@0_opt_5 is nonterminal4
) is terminal1
) is terminal1
lambda_body_ is nonterminal3
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
, is terminal1
capture_list_ is nonterminal3
capture_list_@0_rep_3 is nonterminal4
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
argument_list_@1_opt_3 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
... is terminal1
ID is terminal2
NULL is terminal2
, is terminal1
argument_list_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
cond_expr_ is nonterminal3
{ is terminal1
lambda_body_@0_rep_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
statement_ is nonterminal3
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
logic_or_expr_ is nonterminal3
cond_expr_@0_opt_2 is nonterminal4
cond_expr_@0_opt_2 is nonterminal4
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
logic_or_expr_ is nonterminal3
? is terminal1
logic_or_expr_ is nonterminal3
: is terminal1
: is terminal1
cond_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
logic_or_expr_@0_opt_2 is nonterminal4
logic_or_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_or_expr_ is nonterminal3
logic_or_expr_ is nonterminal3
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
logic_and_expr_@0_opt_2 is nonterminal4
logic_and_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_and_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
equal_expr_@0_opt_2 is nonterminal4
equal_expr_@0_opt_2 is nonterminal4
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
equal_expr_ is nonterminal3
equal_expr_ is nonterminal3
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
relat_expr_@0_opt_2 is nonterminal4
relat_expr_@0_opt_2 is nonterminal4
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
relat_expr_ is nonterminal3
relat_expr_ is nonterminal3
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
add_expr_@0_opt_2 is nonterminal4
add_expr_@0_opt_2 is nonterminal4
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
add_expr_ is nonterminal3
add_expr_ is nonterminal3
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
mul_expr_@0_opt_2 is nonterminal4
mul_expr_@0_opt_2 is nonterminal4
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
mul_expr_ is nonterminal3
mul_expr_ is nonterminal3
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@1_decl_1 is nonterminal4
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_@1_opt_3 is nonterminal4
unary_expr_@1_opt_3 is nonterminal4
unary_op_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
visit_expr_@0_opt_2 is nonterminal4
visit_expr_@0_opt_2 is nonterminal4
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
object_@1_opt_2 is nonterminal4
array_ is nonterminal3
object_@0_opt_2 is nonterminal4
object_@0_opt_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
fcall_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
( is terminal1
single_expr_ is nonterminal3
) is terminal1
) is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
array_@0_opt_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
fcall_@0_opt_2 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
basic_expr_ is nonterminal3
] is terminal1
] is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
ignore_@0_rep_1 is nonterminal4
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
ENDL is terminal2
package is terminal5
ID is terminal2
endline_ is nonterminal3
import is terminal5
import_list_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
ID is terminal2
module_list_@0_opt_2 is nonterminal4
NULL is terminal2
. is terminal1
module_list_@0_opt_2@0_decl_2 is nonterminal4
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_3 is nonterminal4
NULL is terminal2
, is terminal1
import_list_ is nonterminal3
NULL is terminal2
as is terminal5
ID is terminal2
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
= is terminal1
= is terminal1
basic_expr_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
var_def_ is nonterminal3
var_def_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
) is terminal1
var_bind_@0_rep_3 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
, is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
var_bind_@0_rep_3 is nonterminal4
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
= is terminal1
single_expr_ is nonterminal3
var_list_@0_opt_4 is nonterminal4
var_list_@0_opt_4 is nonterminal4
NULL is terminal2
, is terminal1
var_list_ is nonterminal3
block is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
namespace is terminal5
ID is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
using is terminal5
using_list_ is nonterminal3
endline is terminal5
endline is terminal5
module_list_ is nonterminal3
using_list_@0_opt_2 is nonterminal4
using_list_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
using_list_ is nonterminal3
if is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
if_stmt_@0_rep_5 is nonterminal4
if_stmt_@0_rep_5 is nonterminal4
NULL is terminal2
else_stmt_ is nonterminal3
stmts_ is nonterminal3
end is terminal5
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
if_stmt_@0_rep_5 is nonterminal4
else is terminal5
else_stmt_@0_opt_2 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
if is terminal5
basic_expr_ is nonterminal3
switch is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
switch_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
switch_default_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
switch_case_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
case is terminal5
logic_or_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
default is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
while is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
loop is terminal5
ENDL is terminal2
stmts_ is nonterminal3
loop_stmt_@0_decl_4 is nonterminal4
loop_stmt_@0_decl_4 is nonterminal4
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
for is terminal5
for_stmt_@0_opt_2 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_body_ is nonterminal3
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
ID is terminal2
in is terminal5
basic_expr_ is nonterminal3
for_body_ is nonterminal3
for_body_ is nonterminal3
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
do is terminal5
basic_expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
function is terminal5
ID is terminal2
( is terminal1
function_stmt_@0_opt_4 is nonterminal4
) is terminal1
) is terminal1
function_stmt_@0_opt_6 is nonterminal4
function_body_ is nonterminal3
function_body_ is nonterminal3
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
{ is terminal1
stmts_ is nonterminal3
} is terminal1
} is terminal1
return is terminal5
return_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
ENDL is terminal2
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
catch_stmt_ is nonterminal3
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
try_stmt_@0_rep_4 is nonterminal4
catch is terminal5
ID is terminal2
catch_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
: is terminal1
visit_expr_ is nonterminal3
throw is terminal5
throw_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
ID is terminal2
ID is terminal2
class_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
extends is terminal5
visit_expr_ is nonterminal3
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
continue is terminal5
break is terminal5
expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
end is terminal5
ENDL is terminal2
single_expr_ is nonterminal3
expr_@0_opt_2 is nonterminal4
expr_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
expr_ is nonterminal3
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
basic_expr_@1_opt_2 is nonterminal4
basic_expr_@1_opt_2 is nonterminal4
var_bind_ is nonterminal3
= is terminal1
= is terminal1
cond_expr_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
single_expr_ is nonterminal3
single_expr_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
lambda_expr_@0_opt_2 is nonterminal4
] is terminal1
] is terminal1
( is terminal1
lambda_expr_@0_opt_5 is nonterminal4
) is terminal1
) is terminal1
lambda_body_ is nonterminal3
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
, is terminal1
capture_list_ is nonterminal3
capture_list_@0_rep_3 is nonterminal4
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
argument_list_@1_opt_3 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
... is terminal1
ID is terminal2
NULL is terminal2
, is terminal1
argument_list_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
cond_expr_ is nonterminal3
{ is terminal1
lambda_body_@0_rep_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
statement_ is nonterminal3
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
logic_or_expr_ is nonterminal3
cond_expr_@0_opt_2 is nonterminal4
cond_expr_@0_opt_2 is nonterminal4
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
logic_or_expr_ is nonterminal3
? is terminal1
logic_or_expr_ is nonterminal3
: is terminal1
: is terminal1
cond_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
logic_or_expr_@0_opt_2 is nonterminal4
logic_or_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_or_expr_ is nonterminal3
logic_or_expr_ is nonterminal3
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
logic_and_expr_@0_opt_2 is nonterminal4
logic_and_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_and_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
equal_expr_@0_opt_2 is nonterminal4
equal_expr_@0_opt_2 is nonterminal4
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
equal_expr_ is nonterminal3
equal_expr_ is nonterminal3
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
relat_expr_@0_opt_2 is nonterminal4
relat_expr_@0_opt_2 is nonterminal4
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
relat_expr_ is nonterminal3
relat_expr_ is nonterminal3
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
add_expr_@0_opt_2 is nonterminal4
add_expr_@0_opt_2 is nonterminal4
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
add_expr_ is nonterminal3
add_expr_ is nonterminal3
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
mul_expr_@0_opt_2 is nonterminal4
mul_expr_@0_opt_2 is nonterminal4
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
mul_expr_ is nonterminal3
mul_expr_ is nonterminal3
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@1_decl_1 is nonterminal4
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_@1_opt_3 is nonterminal4
unary_expr_@1_opt_3 is nonterminal4
unary_op_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
visit_expr_@0_opt_2 is nonterminal4
visit_expr_@0_opt_2 is nonterminal4
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
object_@1_opt_2 is nonterminal4
array_ is nonterminal3
object_@0_opt_2 is nonterminal4
object_@0_opt_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
fcall_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
( is terminal1
single_expr_ is nonterminal3
) is terminal1
) is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
array_@0_opt_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
fcall_@0_opt_2 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
basic_expr_ is nonterminal3
] is terminal1
] is terminal1
begin_ is nonterminal3
begin_ is nonterminal3
stmts_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ignore_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
ignore_@0_rep_1 is nonterminal4
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
statement_ is nonterminal3
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
declaration_ is nonterminal3
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
NULL is terminal2
ENDL is terminal2
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
catch_stmt_ is nonterminal3
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
ENDL is terminal2
package is terminal5
ID is terminal2
endline_ is nonterminal3
import is terminal5
import_list_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
ID is terminal2
module_list_@0_opt_2 is nonterminal4
NULL is terminal2
. is terminal1
module_list_@0_opt_2@0_decl_2 is nonterminal4
module_list_ is nonterminal3
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
import_list_@0_opt_3 is nonterminal4
NULL is terminal2
, is terminal1
import_list_ is nonterminal3
NULL is terminal2
as is terminal5
ID is terminal2
var_list_ is nonterminal3
var_list_ is nonterminal3
var_bind_ is nonterminal3
= is terminal1
= is terminal1
basic_expr_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
var_def_ is nonterminal3
var_def_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
) is terminal1
var_bind_@0_rep_3 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
, is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
var_bind_@0_rep_3 is nonterminal4
var_bind_ is nonterminal3
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
= is terminal1
single_expr_ is nonterminal3
var_list_@0_opt_4 is nonterminal4
var_list_@0_opt_4 is nonterminal4
NULL is terminal2
, is terminal1
var_list_ is nonterminal3
block is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
namespace is terminal5
ID is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
using is terminal5
using_list_ is nonterminal3
endline is terminal5
endline is terminal5
module_list_ is nonterminal3
using_list_@0_opt_2 is nonterminal4
using_list_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
using_list_ is nonterminal3
if is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
if_stmt_@0_rep_5 is nonterminal4
if_stmt_@0_rep_5 is nonterminal4
NULL is terminal2
else_stmt_ is nonterminal3
stmts_ is nonterminal3
end is terminal5
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
if_stmt_@0_rep_5 is nonterminal4
else is terminal5
else_stmt_@0_opt_2 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
if is terminal5
basic_expr_ is nonterminal3
switch is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
switch_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
switch_stmts_@0_rep_2 is nonterminal4
NULL is terminal2
switch_default_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
switch_case_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_1 is nonterminal4
case is terminal5
logic_or_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
default is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
while is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
loop is terminal5
ENDL is terminal2
stmts_ is nonterminal3
loop_stmt_@0_decl_4 is nonterminal4
loop_stmt_@0_decl_4 is nonterminal4
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until_stmt_ is nonterminal3
until is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
ENDL is terminal2
for is terminal5
for_stmt_@0_opt_2 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
for_body_ is nonterminal3
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
NULL is terminal2
var_def_ is nonterminal3
var_def_ is nonterminal3
foreach is terminal5
ID is terminal2
in is terminal5
basic_expr_ is nonterminal3
for_body_ is nonterminal3
for_body_ is nonterminal3
for_body_@0_decl_1 is nonterminal4
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
do is terminal5
basic_expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
function is terminal5
ID is terminal2
( is terminal1
function_stmt_@0_opt_4 is nonterminal4
) is terminal1
) is terminal1
function_stmt_@0_opt_6 is nonterminal4
function_body_ is nonterminal3
function_body_ is nonterminal3
NULL is terminal2
override is terminal5
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
{ is terminal1
stmts_ is nonterminal3
} is terminal1
} is terminal1
return is terminal5
return_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
try is terminal5
ENDL is terminal2
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
catch_stmt_ is nonterminal3
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
try_stmt_@0_rep_4 is nonterminal4
catch is terminal5
ID is terminal2
catch_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
NULL is terminal2
: is terminal1
visit_expr_ is nonterminal3
throw is terminal5
throw_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
ID is terminal2
ID is terminal2
class_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
end is terminal5
ENDL is terminal2
NULL is terminal2
extends is terminal5
visit_expr_ is nonterminal3
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
endline_ is nonterminal3
endline_ is nonterminal3
continue is terminal5
break is terminal5
expr_ is nonterminal3
endline_ is nonterminal3
endline_ is nonterminal3
end is terminal5
ENDL is terminal2
single_expr_ is nonterminal3
expr_@0_opt_2 is nonterminal4
expr_@0_opt_2 is nonterminal4
NULL is terminal2
, is terminal1
expr_ is nonterminal3
basic_expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
basic_expr_@1_opt_2 is nonterminal4
basic_expr_@1_opt_2 is nonterminal4
var_bind_ is nonterminal3
= is terminal1
= is terminal1
cond_expr_ is nonterminal3
NULL is terminal2
asi_op_ is nonterminal3
single_expr_ is nonterminal3
single_expr_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
lambda_expr_@0_opt_2 is nonterminal4
] is terminal1
] is terminal1
( is terminal1
lambda_expr_@0_opt_5 is nonterminal4
) is terminal1
) is terminal1
lambda_body_ is nonterminal3
NULL is terminal2
argument_list_ is nonterminal3
argument_list_ is nonterminal3
NULL is terminal2
capture_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
, is terminal1
capture_list_ is nonterminal3
capture_list_@0_rep_3 is nonterminal4
capture_list_@0_rep_3 is nonterminal4
NULL is terminal2
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
ID is terminal2
argument_list_@1_opt_3 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
... is terminal1
ID is terminal2
NULL is terminal2
, is terminal1
argument_list_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
argument_list_@1_rep_5 is nonterminal4
NULL is terminal2
: is terminal1
NULL is terminal2
= is terminal1
-> is terminal1
cond_expr_ is nonterminal3
{ is terminal1
lambda_body_@0_rep_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
statement_ is nonterminal3
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
NULL is terminal2
ENDL is terminal2
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
logic_or_expr_ is nonterminal3
cond_expr_@0_opt_2 is nonterminal4
cond_expr_@0_opt_2 is nonterminal4
NULL is terminal2
cond_postfix_ is nonterminal3
cond_postfix_ is nonterminal3
: is terminal1
logic_or_expr_ is nonterminal3
? is terminal1
logic_or_expr_ is nonterminal3
: is terminal1
: is terminal1
cond_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
logic_or_expr_@0_opt_2 is nonterminal4
logic_or_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_or_expr_ is nonterminal3
logic_or_expr_ is nonterminal3
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
logic_and_expr_@0_opt_2 is nonterminal4
logic_and_expr_@0_opt_2 is nonterminal4
NULL is terminal2
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_and_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
equal_expr_@0_opt_2 is nonterminal4
equal_expr_@0_opt_2 is nonterminal4
NULL is terminal2
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
equal_expr_ is nonterminal3
equal_expr_ is nonterminal3
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
relat_expr_@0_opt_2 is nonterminal4
relat_expr_@0_opt_2 is nonterminal4
NULL is terminal2
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
relat_expr_ is nonterminal3
relat_expr_ is nonterminal3
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
add_expr_@0_opt_2 is nonterminal4
add_expr_@0_opt_2 is nonterminal4
NULL is terminal2
add_expr_@0_opt_2@0_decl_1 is nonterminal4
add_expr_ is nonterminal3
add_expr_ is nonterminal3
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
mul_expr_@0_opt_2 is nonterminal4
mul_expr_@0_opt_2 is nonterminal4
NULL is terminal2
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
mul_expr_ is nonterminal3
mul_expr_ is nonterminal3
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@1_decl_1 is nonterminal4
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_@1_opt_3 is nonterminal4
unary_expr_@1_opt_3 is nonterminal4
unary_op_ is nonterminal3
unary_expr_ is nonterminal3
unary_expr_ is nonterminal3
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
NULL is terminal2
array_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
NULL is terminal2
postfix_expr_ is nonterminal3
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
constant_ is nonterminal3
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
visit_expr_@0_opt_2 is nonterminal4
visit_expr_@0_opt_2 is nonterminal4
NULL is terminal2
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
visit_expr_ is nonterminal3
visit_expr_ is nonterminal3
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
object_@1_opt_2 is nonterminal4
array_ is nonterminal3
object_@0_opt_2 is nonterminal4
object_@0_opt_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
NULL is terminal2
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
NULL is terminal2
index_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
fcall_ is nonterminal3
element_@0_rep_2 is nonterminal4
element_@0_rep_2 is nonterminal4
( is terminal1
single_expr_ is nonterminal3
) is terminal1
) is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
array_@0_opt_2 is nonterminal4
} is terminal1
} is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
( is terminal1
fcall_@0_opt_2 is nonterminal4
) is terminal1
) is terminal1
NULL is terminal2
expr_ is nonterminal3
expr_ is nonterminal3
[ is terminal1
basic_expr_ is nonterminal3
] is terminal1
] is terminal1
begin_ is nonterminal3
stmts_ is nonterminal3
ignore_@0_rep_1 is nonterminal4
ENDL is terminal2
ignore_@0_rep_1 is nonterminal4
; is terminal1
ENDL is terminal2
stmts_@0_rep_1 is nonterminal4
statement_ is nonterminal3
stmts_@0_rep_1@0_rep_2 is nonterminal4
stmts_@0_rep_1 is nonterminal4
ENDL is terminal2
stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
declaration_ is nonterminal3
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
decl_stmts_@0_rep_1 is nonterminal4
ENDL is terminal2
decl_stmts_@0_rep_1@0_rep_2 is nonterminal4
catch_stmt_ is nonterminal3
until_stmt_ is nonterminal3
else_stmt_ is nonterminal3
end_stmt_ is nonterminal3
expr_stmt_ is nonterminal3
class_stmt_ is nonterminal3
throw_stmt_ is nonterminal3
try_stmt_ is nonterminal3
return_stmt_ is nonterminal3
function_stmt_ is nonterminal3
control_stmt_ is nonterminal3
foreach_stmt_ is nonterminal3
for_stmt_ is nonterminal3
loop_stmt_ is nonterminal3
while_stmt_ is nonterminal3
switch_stmt_ is nonterminal3
if_stmt_ is nonterminal3
using_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
block_stmt_ is nonterminal3
var_stmt_ is nonterminal3
import_stmt_ is nonterminal3
package_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
class_stmt_ is nonterminal3
function_stmt_ is nonterminal3
using_stmt_ is nonterminal3
var_stmt_ is nonterminal3
namespace_stmt_ is nonterminal3
prep_stmt_ is nonterminal3
PREP is terminal2
ENDL is terminal2
package is terminal5
ID is terminal2
endline_ is nonterminal3
import is terminal5
import_list_ is nonterminal3
endline_ is nonterminal3
ID is terminal2
module_list_@0_opt_2 is nonterminal4
. is terminal1
module_list_@0_opt_2@0_decl_2 is nonterminal4
module_list_ is nonterminal3
* is terminal1
module_list_ is nonterminal3
import_list_@0_opt_2 is nonterminal4
import_list_@0_opt_3 is nonterminal4
, is terminal1
import_list_ is nonterminal3
as is terminal5
ID is terminal2
var_list_ is nonterminal3
var_bind_ is nonterminal3
= is terminal1
basic_expr_ is nonterminal3
var_stmt_@0_decl_1 is nonterminal4
var_def_ is nonterminal3
endline_ is nonterminal3
constant is terminal5
link is terminal5
var is terminal5
( is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
) is terminal1
, is terminal1
var_bind_list_ is nonterminal3
var_bind_@0_rep_3 is nonterminal4
var_bind_ is nonterminal3
... is terminal1
ID is terminal2
ID is terminal2
= is terminal1
single_expr_ is nonterminal3
var_list_@0_opt_4 is nonterminal4
, is terminal1
var_list_ is nonterminal3
block is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
namespace is terminal5
ID is terminal2
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
using is terminal5
using_list_ is nonterminal3
endline is terminal5
module_list_ is nonterminal3
using_list_@0_opt_2 is nonterminal4
, is terminal1
using_list_ is nonterminal3
if is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
stmts_ is nonterminal3
if_stmt_@0_rep_5 is nonterminal4
else_stmt_ is nonterminal3
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
if_stmt_@0_rep_5 is nonterminal4
else is terminal5
else_stmt_@0_opt_2 is nonterminal4
ENDL is terminal2
if is terminal5
basic_expr_ is nonterminal3
switch is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
switch_stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
switch_stmts_@0_rep_1 is nonterminal4
switch_stmts_@0_rep_2 is nonterminal4
ENDL is terminal2
switch_stmts_@0_rep_2 is nonterminal4
switch_default_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
switch_case_ is nonterminal3
switch_stmts_@0_rep_1 is nonterminal4
case is terminal5
logic_or_expr_ is nonterminal3
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
default is terminal5
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
while is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
loop is terminal5
ENDL is terminal2
stmts_ is nonterminal3
loop_stmt_@0_decl_4 is nonterminal4
ENDL is terminal2
end is terminal5
until_stmt_ is nonterminal3
until is terminal5
basic_expr_ is nonterminal3
ENDL is terminal2
for is terminal5
for_stmt_@0_opt_2 is nonterminal4
for_stmt_@0_decl_3 is nonterminal4
for_stmt_@0_opt_4 is nonterminal4
for_stmt_@0_decl_5 is nonterminal4
for_stmt_@0_opt_6 is nonterminal4
for_body_ is nonterminal3
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
basic_expr_ is nonterminal3
, is terminal1
; is terminal1
var_def_ is nonterminal3
foreach is terminal5
ID is terminal2
in is terminal5
basic_expr_ is nonterminal3
for_body_ is nonterminal3
for_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
do is terminal5
basic_expr_ is nonterminal3
endline_ is nonterminal3
function is terminal5
ID is terminal2
( is terminal1
function_stmt_@0_opt_4 is nonterminal4
) is terminal1
function_stmt_@0_opt_6 is nonterminal4
function_body_ is nonterminal3
override is terminal5
argument_list_ is nonterminal3
function_body_@0_decl_1 is nonterminal4
ENDL is terminal2
stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
{ is terminal1
stmts_ is nonterminal3
} is terminal1
return is terminal5
return_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
expr_ is nonterminal3
try is terminal5
ENDL is terminal2
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
end is terminal5
ENDL is terminal2
catch_stmt_ is nonterminal3
stmts_ is nonterminal3
try_stmt_@0_rep_4 is nonterminal4
catch is terminal5
ID is terminal2
catch_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
: is terminal1
visit_expr_ is nonterminal3
throw is terminal5
throw_stmt_@0_opt_2 is nonterminal4
endline_ is nonterminal3
expr_ is nonterminal3
class_stmt_@0_decl_1 is nonterminal4
ID is terminal2
class_stmt_@0_opt_3 is nonterminal4
ENDL is terminal2
decl_stmts_ is nonterminal3
end is terminal5
ENDL is terminal2
extends is terminal5
visit_expr_ is nonterminal3
struct is terminal5
class is terminal5
control_stmt_@0_decl_1 is nonterminal4
endline_ is nonterminal3
continue is terminal5
break is terminal5
expr_ is nonterminal3
endline_ is nonterminal3
end is terminal5
ENDL is terminal2
single_expr_ is nonterminal3
expr_@0_opt_2 is nonterminal4
, is terminal1
expr_ is nonterminal3
basic_expr_ is nonterminal3
lambda_expr_ is nonterminal3
cond_expr_ is nonterminal3
basic_expr_@1_opt_2 is nonterminal4
var_bind_ is nonterminal3
= is terminal1
cond_expr_ is nonterminal3
asi_op_ is nonterminal3
single_expr_ is nonterminal3
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
lambda_expr_@0_opt_2 is nonterminal4
] is terminal1
( is terminal1
lambda_expr_@0_opt_5 is nonterminal4
) is terminal1
lambda_body_ is nonterminal3
argument_list_ is nonterminal3
capture_list_ is nonterminal3
capture_list_@0_opt_1 is nonterminal4
ID is terminal2
capture_list_@0_rep_3 is nonterminal4
, is terminal1
capture_list_ is nonterminal3
capture_list_@0_rep_3 is nonterminal4
= is terminal1
argument_list_@1_opt_1 is nonterminal4
ID is terminal2
argument_list_@1_opt_3 is nonterminal4
visit_expr_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
... is terminal1
ID is terminal2
, is terminal1
argument_list_ is nonterminal3
argument_list_@1_rep_5 is nonterminal4
: is terminal1
= is terminal1
-> is terminal1
cond_expr_ is nonterminal3
{ is terminal1
lambda_body_@0_rep_2 is nonterminal4
} is terminal1
statement_ is nonterminal3
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
lambda_body_@0_rep_2 is nonterminal4
ENDL is terminal2
lambda_body_@0_rep_2@0_rep_2 is nonterminal4
logic_or_expr_ is nonterminal3
cond_expr_@0_opt_2 is nonterminal4
cond_postfix_ is nonterminal3
: is terminal1
logic_or_expr_ is nonterminal3
? is terminal1
logic_or_expr_ is nonterminal3
: is terminal1
cond_expr_ is nonterminal3
logic_and_expr_ is nonterminal3
logic_or_expr_@0_opt_2 is nonterminal4
logic_or_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_or_expr_ is nonterminal3
or is terminal5
|| is terminal1
equal_expr_ is nonterminal3
logic_and_expr_@0_opt_2 is nonterminal4
logic_and_expr_@0_opt_2@0_decl_1 is nonterminal4
logic_and_expr_ is nonterminal3
and is terminal5
&& is terminal1
relat_expr_ is nonterminal3
equal_expr_@0_opt_2 is nonterminal4
equal_expr_@0_opt_2@0_decl_1 is nonterminal4
equal_expr_ is nonterminal3
!= is terminal1
== is terminal1
add_expr_ is nonterminal3
relat_expr_@0_opt_2 is nonterminal4
relat_expr_@0_opt_2@0_decl_1 is nonterminal4
relat_expr_ is nonterminal3
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
mul_expr_ is nonterminal3
add_expr_@0_opt_2 is nonterminal4
add_expr_@0_opt_2@0_decl_1 is nonterminal4
add_expr_ is nonterminal3
- is terminal1
+ is terminal1
unary_expr_ is nonterminal3
mul_expr_@0_opt_2 is nonterminal4
mul_expr_@0_opt_2@0_decl_1 is nonterminal4
mul_expr_ is nonterminal3
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
prim_expr_ is nonterminal3
unary_expr_@2_opt_2 is nonterminal4
unary_expr_@1_decl_1 is nonterminal4
unary_expr_ is nonterminal3
unary_expr_@1_opt_3 is nonterminal4
unary_op_ is nonterminal3
unary_expr_ is nonterminal3
postfix_expr_ is nonterminal3
array_ is nonterminal3
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
postfix_expr_@0_decl_1 is nonterminal4
postfix_expr_@0_opt_2 is nonterminal4
postfix_expr_ is nonterminal3
... is terminal1
-- is terminal1
++ is terminal1
constant_ is nonterminal3
visit_expr_ is nonterminal3
object_ is nonterminal3
visit_expr_@0_opt_2 is nonterminal4
visit_expr_@0_opt_2@0_decl_1 is nonterminal4
visit_expr_ is nonterminal3
. is terminal1
-> is terminal1
CHAR is terminal2
element_ is nonterminal3
global is terminal5
local is terminal5
STR is terminal2
object_@1_opt_2 is nonterminal4
array_ is nonterminal3
object_@0_opt_2 is nonterminal4
index_ is nonterminal3
index_ is nonterminal3
element_@0_decl_1 is nonterminal4
element_@0_rep_2 is nonterminal4
index_ is nonterminal3
element_@0_rep_2 is nonterminal4
fcall_ is nonterminal3
element_@0_rep_2 is nonterminal4
( is terminal1
single_expr_ is nonterminal3
) is terminal1
ID is terminal2
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
{ is terminal1
array_@0_opt_2 is nonterminal4
} is terminal1
expr_ is nonterminal3
( is terminal1
fcall_@0_opt_2 is nonterminal4
) is terminal1
expr_ is nonterminal3
[ is terminal1
basic_expr_ is nonterminal3
] is terminal1



########
DFA TERM
########
%start%  :  %MARK%  begin_  
 index is: 0, source_index: 0, before: %NULL%, after: begin_
%start%  :  begin_  %MARK%  
 index is: 1, source_index: 0, before: begin_, after: %NULL%
begin_  :  %MARK%  stmts_  
 index is: 2, source_index: 1, before: %NULL%, after: stmts_
begin_  :  stmts_  %MARK%  
 index is: 3, source_index: 1, before: stmts_, after: %NULL%
ignore_  :  %MARK%  ignore_@0_rep_1  
 index is: 4, source_index: 2, before: %NULL%, after: ignore_@0_rep_1
ignore_  :  ignore_@0_rep_1  %MARK%  
 index is: 5, source_index: 2, before: ignore_@0_rep_1, after: %NULL%
ignore_@0_rep_1  :  %MARK%  
 index is: 6, source_index: 3, before: %NULL%, after: %NULL%
ignore_@0_rep_1  :  %MARK%  ENDL  ignore_@0_rep_1  
 index is: 7, source_index: 4, before: %NULL%, after: ENDL
ignore_@0_rep_1  :  ENDL  %MARK%  ignore_@0_rep_1  
 index is: 8, source_index: 4, before: ENDL, after: ignore_@0_rep_1
ignore_@0_rep_1  :  ENDL  ignore_@0_rep_1  %MARK%  
 index is: 9, source_index: 4, before: ignore_@0_rep_1, after: %NULL%
endline_  :  %MARK%  ;  
 index is: 10, source_index: 5, before: %NULL%, after: ;
endline_  :  ;  %MARK%  
 index is: 11, source_index: 5, before: ;, after: %NULL%
endline_  :  %MARK%  ENDL  
 index is: 12, source_index: 6, before: %NULL%, after: ENDL
endline_  :  ENDL  %MARK%  
 index is: 13, source_index: 6, before: ENDL, after: %NULL%
stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, source_index: 7, before: %NULL%, after: stmts_@0_rep_1
stmts_  :  stmts_@0_rep_1  %MARK%  
 index is: 15, source_index: 7, before: stmts_@0_rep_1, after: %NULL%
stmts_@0_rep_1  :  %MARK%  
 index is: 16, source_index: 8, before: %NULL%, after: %NULL%
stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, source_index: 9, before: %NULL%, after: statement_
stmts_@0_rep_1  :  statement_  %MARK%  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 18, source_index: 9, before: statement_, after: stmts_@0_rep_1@0_rep_2
stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  %MARK%  stmts_@0_rep_1  
 index is: 19, source_index: 9, before: stmts_@0_rep_1@0_rep_2, after: stmts_@0_rep_1
stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  %MARK%  
 index is: 20, source_index: 9, before: stmts_@0_rep_1, after: %NULL%
stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 21, source_index: 10, before: %NULL%, after: %NULL%
stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  stmts_@0_rep_1@0_rep_2  
 index is: 22, source_index: 11, before: %NULL%, after: ENDL
stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  stmts_@0_rep_1@0_rep_2  
 index is: 23, source_index: 11, before: ENDL, after: stmts_@0_rep_1@0_rep_2
stmts_@0_rep_1@0_rep_2  :  ENDL  stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 24, source_index: 11, before: stmts_@0_rep_1@0_rep_2, after: %NULL%
decl_stmts_  :  %MARK%  decl_stmts_@0_rep_1  
 index is: 25, source_index: 12, before: %NULL%, after: decl_stmts_@0_rep_1
decl_stmts_  :  decl_stmts_@0_rep_1  %MARK%  
 index is: 26, source_index: 12, before: decl_stmts_@0_rep_1, after: %NULL%
decl_stmts_@0_rep_1  :  %MARK%  
 index is: 27, source_index: 13, before: %NULL%, after: %NULL%
decl_stmts_@0_rep_1  :  %MARK%  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 28, source_index: 14, before: %NULL%, after: declaration_
decl_stmts_@0_rep_1  :  declaration_  %MARK%  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 29, source_index: 14, before: declaration_, after: decl_stmts_@0_rep_1@0_rep_2
decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  %MARK%  decl_stmts_@0_rep_1  
 index is: 30, source_index: 14, before: decl_stmts_@0_rep_1@0_rep_2, after: decl_stmts_@0_rep_1
decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  %MARK%  
 index is: 31, source_index: 14, before: decl_stmts_@0_rep_1, after: %NULL%
decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 32, source_index: 15, before: %NULL%, after: %NULL%
decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  decl_stmts_@0_rep_1@0_rep_2  
 index is: 33, source_index: 16, before: %NULL%, after: ENDL
decl_stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  decl_stmts_@0_rep_1@0_rep_2  
 index is: 34, source_index: 16, before: ENDL, after: decl_stmts_@0_rep_1@0_rep_2
decl_stmts_@0_rep_1@0_rep_2  :  ENDL  decl_stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 35, source_index: 16, before: decl_stmts_@0_rep_1@0_rep_2, after: %NULL%
endblock_  :  %MARK%  catch_stmt_  
 index is: 36, source_index: 17, before: %NULL%, after: catch_stmt_
endblock_  :  catch_stmt_  %MARK%  
 index is: 37, source_index: 17, before: catch_stmt_, after: %NULL%
endblock_  :  %MARK%  until_stmt_  
 index is: 38, source_index: 18, before: %NULL%, after: until_stmt_
endblock_  :  until_stmt_  %MARK%  
 index is: 39, source_index: 18, before: until_stmt_, after: %NULL%
endblock_  :  %MARK%  else_stmt_  
 index is: 40, source_index: 19, before: %NULL%, after: else_stmt_
endblock_  :  else_stmt_  %MARK%  
 index is: 41, source_index: 19, before: else_stmt_, after: %NULL%
endblock_  :  %MARK%  end_stmt_  
 index is: 42, source_index: 20, before: %NULL%, after: end_stmt_
endblock_  :  end_stmt_  %MARK%  
 index is: 43, source_index: 20, before: end_stmt_, after: %NULL%
statement_  :  %MARK%  expr_stmt_  
 index is: 44, source_index: 21, before: %NULL%, after: expr_stmt_
statement_  :  expr_stmt_  %MARK%  
 index is: 45, source_index: 21, before: expr_stmt_, after: %NULL%
statement_  :  %MARK%  class_stmt_  
 index is: 46, source_index: 22, before: %NULL%, after: class_stmt_
statement_  :  class_stmt_  %MARK%  
 index is: 47, source_index: 22, before: class_stmt_, after: %NULL%
statement_  :  %MARK%  throw_stmt_  
 index is: 48, source_index: 23, before: %NULL%, after: throw_stmt_
statement_  :  throw_stmt_  %MARK%  
 index is: 49, source_index: 23, before: throw_stmt_, after: %NULL%
statement_  :  %MARK%  try_stmt_  
 index is: 50, source_index: 24, before: %NULL%, after: try_stmt_
statement_  :  try_stmt_  %MARK%  
 index is: 51, source_index: 24, before: try_stmt_, after: %NULL%
statement_  :  %MARK%  return_stmt_  
 index is: 52, source_index: 25, before: %NULL%, after: return_stmt_
statement_  :  return_stmt_  %MARK%  
 index is: 53, source_index: 25, before: return_stmt_, after: %NULL%
statement_  :  %MARK%  function_stmt_  
 index is: 54, source_index: 26, before: %NULL%, after: function_stmt_
statement_  :  function_stmt_  %MARK%  
 index is: 55, source_index: 26, before: function_stmt_, after: %NULL%
statement_  :  %MARK%  control_stmt_  
 index is: 56, source_index: 27, before: %NULL%, after: control_stmt_
statement_  :  control_stmt_  %MARK%  
 index is: 57, source_index: 27, before: control_stmt_, after: %NULL%
statement_  :  %MARK%  foreach_stmt_  
 index is: 58, source_index: 28, before: %NULL%, after: foreach_stmt_
statement_  :  foreach_stmt_  %MARK%  
 index is: 59, source_index: 28, before: foreach_stmt_, after: %NULL%
statement_  :  %MARK%  for_stmt_  
 index is: 60, source_index: 29, before: %NULL%, after: for_stmt_
statement_  :  for_stmt_  %MARK%  
 index is: 61, source_index: 29, before: for_stmt_, after: %NULL%
statement_  :  %MARK%  loop_stmt_  
 index is: 62, source_index: 30, before: %NULL%, after: loop_stmt_
statement_  :  loop_stmt_  %MARK%  
 index is: 63, source_index: 30, before: loop_stmt_, after: %NULL%
statement_  :  %MARK%  while_stmt_  
 index is: 64, source_index: 31, before: %NULL%, after: while_stmt_
statement_  :  while_stmt_  %MARK%  
 index is: 65, source_index: 31, before: while_stmt_, after: %NULL%
statement_  :  %MARK%  switch_stmt_  
 index is: 66, source_index: 32, before: %NULL%, after: switch_stmt_
statement_  :  switch_stmt_  %MARK%  
 index is: 67, source_index: 32, before: switch_stmt_, after: %NULL%
statement_  :  %MARK%  if_stmt_  
 index is: 68, source_index: 33, before: %NULL%, after: if_stmt_
statement_  :  if_stmt_  %MARK%  
 index is: 69, source_index: 33, before: if_stmt_, after: %NULL%
statement_  :  %MARK%  using_stmt_  
 index is: 70, source_index: 34, before: %NULL%, after: using_stmt_
statement_  :  using_stmt_  %MARK%  
 index is: 71, source_index: 34, before: using_stmt_, after: %NULL%
statement_  :  %MARK%  namespace_stmt_  
 index is: 72, source_index: 35, before: %NULL%, after: namespace_stmt_
statement_  :  namespace_stmt_  %MARK%  
 index is: 73, source_index: 35, before: namespace_stmt_, after: %NULL%
statement_  :  %MARK%  block_stmt_  
 index is: 74, source_index: 36, before: %NULL%, after: block_stmt_
statement_  :  block_stmt_  %MARK%  
 index is: 75, source_index: 36, before: block_stmt_, after: %NULL%
statement_  :  %MARK%  var_stmt_  
 index is: 76, source_index: 37, before: %NULL%, after: var_stmt_
statement_  :  var_stmt_  %MARK%  
 index is: 77, source_index: 37, before: var_stmt_, after: %NULL%
statement_  :  %MARK%  import_stmt_  
 index is: 78, source_index: 38, before: %NULL%, after: import_stmt_
statement_  :  import_stmt_  %MARK%  
 index is: 79, source_index: 38, before: import_stmt_, after: %NULL%
statement_  :  %MARK%  package_stmt_  
 index is: 80, source_index: 39, before: %NULL%, after: package_stmt_
statement_  :  package_stmt_  %MARK%  
 index is: 81, source_index: 39, before: package_stmt_, after: %NULL%
statement_  :  %MARK%  prep_stmt_  
 index is: 82, source_index: 40, before: %NULL%, after: prep_stmt_
statement_  :  prep_stmt_  %MARK%  
 index is: 83, source_index: 40, before: prep_stmt_, after: %NULL%
declaration_  :  %MARK%  class_stmt_  
 index is: 84, source_index: 41, before: %NULL%, after: class_stmt_
declaration_  :  class_stmt_  %MARK%  
 index is: 85, source_index: 41, before: class_stmt_, after: %NULL%
declaration_  :  %MARK%  function_stmt_  
 index is: 86, source_index: 42, before: %NULL%, after: function_stmt_
declaration_  :  function_stmt_  %MARK%  
 index is: 87, source_index: 42, before: function_stmt_, after: %NULL%
declaration_  :  %MARK%  using_stmt_  
 index is: 88, source_index: 43, before: %NULL%, after: using_stmt_
declaration_  :  using_stmt_  %MARK%  
 index is: 89, source_index: 43, before: using_stmt_, after: %NULL%
declaration_  :  %MARK%  var_stmt_  
 index is: 90, source_index: 44, before: %NULL%, after: var_stmt_
declaration_  :  var_stmt_  %MARK%  
 index is: 91, source_index: 44, before: var_stmt_, after: %NULL%
declaration_  :  %MARK%  namespace_stmt_  
 index is: 92, source_index: 45, before: %NULL%, after: namespace_stmt_
declaration_  :  namespace_stmt_  %MARK%  
 index is: 93, source_index: 45, before: namespace_stmt_, after: %NULL%
declaration_  :  %MARK%  prep_stmt_  
 index is: 94, source_index: 46, before: %NULL%, after: prep_stmt_
declaration_  :  prep_stmt_  %MARK%  
 index is: 95, source_index: 46, before: prep_stmt_, after: %NULL%
prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, source_index: 47, before: %NULL%, after: PREP
prep_stmt_  :  PREP  %MARK%  ENDL  
 index is: 97, source_index: 47, before: PREP, after: ENDL
prep_stmt_  :  PREP  ENDL  %MARK%  
 index is: 98, source_index: 47, before: ENDL, after: %NULL%
package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, source_index: 48, before: %NULL%, after: package
package_stmt_  :  package  %MARK%  ID  endline_  
 index is: 100, source_index: 48, before: package, after: ID
package_stmt_  :  package  ID  %MARK%  endline_  
 index is: 101, source_index: 48, before: ID, after: endline_
package_stmt_  :  package  ID  endline_  %MARK%  
 index is: 102, source_index: 48, before: endline_, after: %NULL%
import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, source_index: 49, before: %NULL%, after: import
import_stmt_  :  import  %MARK%  import_list_  endline_  
 index is: 104, source_index: 49, before: import, after: import_list_
import_stmt_  :  import  import_list_  %MARK%  endline_  
 index is: 105, source_index: 49, before: import_list_, after: endline_
import_stmt_  :  import  import_list_  endline_  %MARK%  
 index is: 106, source_index: 49, before: endline_, after: %NULL%
module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, source_index: 50, before: %NULL%, after: ID
module_list_  :  ID  %MARK%  module_list_@0_opt_2  
 index is: 108, source_index: 50, before: ID, after: module_list_@0_opt_2
module_list_  :  ID  module_list_@0_opt_2  %MARK%  
 index is: 109, source_index: 50, before: module_list_@0_opt_2, after: %NULL%
module_list_@0_opt_2  :  %MARK%  
 index is: 110, source_index: 51, before: %NULL%, after: %NULL%
module_list_@0_opt_2  :  %MARK%  .  module_list_@0_opt_2@0_decl_2  
 index is: 111, source_index: 52, before: %NULL%, after: .
module_list_@0_opt_2  :  .  %MARK%  module_list_@0_opt_2@0_decl_2  
 index is: 112, source_index: 52, before: ., after: module_list_@0_opt_2@0_decl_2
module_list_@0_opt_2  :  .  module_list_@0_opt_2@0_decl_2  %MARK%  
 index is: 113, source_index: 52, before: module_list_@0_opt_2@0_decl_2, after: %NULL%
module_list_@0_opt_2@0_decl_2  :  %MARK%  module_list_  
 index is: 114, source_index: 53, before: %NULL%, after: module_list_
module_list_@0_opt_2@0_decl_2  :  module_list_  %MARK%  
 index is: 115, source_index: 53, before: module_list_, after: %NULL%
module_list_@0_opt_2@0_decl_2  :  %MARK%  *  
 index is: 116, source_index: 54, before: %NULL%, after: *
module_list_@0_opt_2@0_decl_2  :  *  %MARK%  
 index is: 117, source_index: 54, before: *, after: %NULL%
import_list_  :  %MARK%  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 118, source_index: 55, before: %NULL%, after: module_list_
import_list_  :  module_list_  %MARK%  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 119, source_index: 55, before: module_list_, after: import_list_@0_opt_2
import_list_  :  module_list_  import_list_@0_opt_2  %MARK%  import_list_@0_opt_3  
 index is: 120, source_index: 55, before: import_list_@0_opt_2, after: import_list_@0_opt_3
import_list_  :  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  %MARK%  
 index is: 121, source_index: 55, before: import_list_@0_opt_3, after: %NULL%
import_list_@0_opt_3  :  %MARK%  
 index is: 122, source_index: 56, before: %NULL%, after: %NULL%
import_list_@0_opt_3  :  %MARK%  ,  import_list_  
 index is: 123, source_index: 57, before: %NULL%, after: ,
import_list_@0_opt_3  :  ,  %MARK%  import_list_  
 index is: 124, source_index: 57, before: ,, after: import_list_
import_list_@0_opt_3  :  ,  import_list_  %MARK%  
 index is: 125, source_index: 57, before: import_list_, after: %NULL%
import_list_@0_opt_2  :  %MARK%  
 index is: 126, source_index: 58, before: %NULL%, after: %NULL%
import_list_@0_opt_2  :  %MARK%  as  ID  
 index is: 127, source_index: 59, before: %NULL%, after: as
import_list_@0_opt_2  :  as  %MARK%  ID  
 index is: 128, source_index: 59, before: as, after: ID
import_list_@0_opt_2  :  as  ID  %MARK%  
 index is: 129, source_index: 59, before: ID, after: %NULL%
var_def_  :  %MARK%  var_list_  
 index is: 130, source_index: 60, before: %NULL%, after: var_list_
var_def_  :  var_list_  %MARK%  
 index is: 131, source_index: 60, before: var_list_, after: %NULL%
var_def_  :  %MARK%  var_bind_  =  basic_expr_  
 index is: 132, source_index: 61, before: %NULL%, after: var_bind_
var_def_  :  var_bind_  %MARK%  =  basic_expr_  
 index is: 133, source_index: 61, before: var_bind_, after: =
var_def_  :  var_bind_  =  %MARK%  basic_expr_  
 index is: 134, source_index: 61, before: =, after: basic_expr_
var_def_  :  var_bind_  =  basic_expr_  %MARK%  
 index is: 135, source_index: 61, before: basic_expr_, after: %NULL%
var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, source_index: 62, before: %NULL%, after: var_stmt_@0_decl_1
var_stmt_  :  var_stmt_@0_decl_1  %MARK%  var_def_  endline_  
 index is: 137, source_index: 62, before: var_stmt_@0_decl_1, after: var_def_
var_stmt_  :  var_stmt_@0_decl_1  var_def_  %MARK%  endline_  
 index is: 138, source_index: 62, before: var_def_, after: endline_
var_stmt_  :  var_stmt_@0_decl_1  var_def_  endline_  %MARK%  
 index is: 139, source_index: 62, before: endline_, after: %NULL%
var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, source_index: 63, before: %NULL%, after: constant
var_stmt_@0_decl_1  :  constant  %MARK%  
 index is: 141, source_index: 63, before: constant, after: %NULL%
var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, source_index: 64, before: %NULL%, after: link
var_stmt_@0_decl_1  :  link  %MARK%  
 index is: 143, source_index: 64, before: link, after: %NULL%
var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, source_index: 65, before: %NULL%, after: var
var_stmt_@0_decl_1  :  var  %MARK%  
 index is: 145, source_index: 65, before: var, after: %NULL%
var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, source_index: 66, before: %NULL%, after: (
var_bind_  :  (  %MARK%  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 147, source_index: 66, before: (, after: var_bind_list_
var_bind_  :  (  var_bind_list_  %MARK%  var_bind_@0_rep_3  )  
 index is: 148, source_index: 66, before: var_bind_list_, after: var_bind_@0_rep_3
var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  %MARK%  )  
 index is: 149, source_index: 66, before: var_bind_@0_rep_3, after: )
var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  )  %MARK%  
 index is: 150, source_index: 66, before: ), after: %NULL%
var_bind_@0_rep_3  :  %MARK%  
 index is: 151, source_index: 67, before: %NULL%, after: %NULL%
var_bind_@0_rep_3  :  %MARK%  ,  var_bind_list_  var_bind_@0_rep_3  
 index is: 152, source_index: 68, before: %NULL%, after: ,
var_bind_@0_rep_3  :  ,  %MARK%  var_bind_list_  var_bind_@0_rep_3  
 index is: 153, source_index: 68, before: ,, after: var_bind_list_
var_bind_@0_rep_3  :  ,  var_bind_list_  %MARK%  var_bind_@0_rep_3  
 index is: 154, source_index: 68, before: var_bind_list_, after: var_bind_@0_rep_3
var_bind_@0_rep_3  :  ,  var_bind_list_  var_bind_@0_rep_3  %MARK%  
 index is: 155, source_index: 68, before: var_bind_@0_rep_3, after: %NULL%
var_bind_list_  :  %MARK%  var_bind_  
 index is: 156, source_index: 69, before: %NULL%, after: var_bind_
var_bind_list_  :  var_bind_  %MARK%  
 index is: 157, source_index: 69, before: var_bind_, after: %NULL%
var_bind_list_  :  %MARK%  ...  
 index is: 158, source_index: 70, before: %NULL%, after: ...
var_bind_list_  :  ...  %MARK%  
 index is: 159, source_index: 70, before: ..., after: %NULL%
var_bind_list_  :  %MARK%  ID  
 index is: 160, source_index: 71, before: %NULL%, after: ID
var_bind_list_  :  ID  %MARK%  
 index is: 161, source_index: 71, before: ID, after: %NULL%
var_list_  :  %MARK%  ID  =  single_expr_  var_list_@0_opt_4  
 index is: 162, source_index: 72, before: %NULL%, after: ID
var_list_  :  ID  %MARK%  =  single_expr_  var_list_@0_opt_4  
 index is: 163, source_index: 72, before: ID, after: =
var_list_  :  ID  =  %MARK%  single_expr_  var_list_@0_opt_4  
 index is: 164, source_index: 72, before: =, after: single_expr_
var_list_  :  ID  =  single_expr_  %MARK%  var_list_@0_opt_4  
 index is: 165, source_index: 72, before: single_expr_, after: var_list_@0_opt_4
var_list_  :  ID  =  single_expr_  var_list_@0_opt_4  %MARK%  
 index is: 166, source_index: 72, before: var_list_@0_opt_4, after: %NULL%
var_list_@0_opt_4  :  %MARK%  
 index is: 167, source_index: 73, before: %NULL%, after: %NULL%
var_list_@0_opt_4  :  %MARK%  ,  var_list_  
 index is: 168, source_index: 74, before: %NULL%, after: ,
var_list_@0_opt_4  :  ,  %MARK%  var_list_  
 index is: 169, source_index: 74, before: ,, after: var_list_
var_list_@0_opt_4  :  ,  var_list_  %MARK%  
 index is: 170, source_index: 74, before: var_list_, after: %NULL%
block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, source_index: 75, before: %NULL%, after: block
block_stmt_  :  block  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 172, source_index: 75, before: block, after: ENDL
block_stmt_  :  block  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 173, source_index: 75, before: ENDL, after: stmts_
block_stmt_  :  block  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 174, source_index: 75, before: stmts_, after: end
block_stmt_  :  block  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 175, source_index: 75, before: end, after: ENDL
block_stmt_  :  block  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 176, source_index: 75, before: ENDL, after: %NULL%
namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, source_index: 76, before: %NULL%, after: namespace
namespace_stmt_  :  namespace  %MARK%  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 178, source_index: 76, before: namespace, after: ID
namespace_stmt_  :  namespace  ID  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 179, source_index: 76, before: ID, after: ENDL
namespace_stmt_  :  namespace  ID  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 180, source_index: 76, before: ENDL, after: decl_stmts_
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 181, source_index: 76, before: decl_stmts_, after: end
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 182, source_index: 76, before: end, after: ENDL
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 183, source_index: 76, before: ENDL, after: %NULL%
using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, source_index: 77, before: %NULL%, after: using
using_stmt_  :  using  %MARK%  using_list_  endline  
 index is: 185, source_index: 77, before: using, after: using_list_
using_stmt_  :  using  using_list_  %MARK%  endline  
 index is: 186, source_index: 77, before: using_list_, after: endline
using_stmt_  :  using  using_list_  endline  %MARK%  
 index is: 187, source_index: 77, before: endline, after: %NULL%
using_list_  :  %MARK%  module_list_  using_list_@0_opt_2  
 index is: 188, source_index: 78, before: %NULL%, after: module_list_
using_list_  :  module_list_  %MARK%  using_list_@0_opt_2  
 index is: 189, source_index: 78, before: module_list_, after: using_list_@0_opt_2
using_list_  :  module_list_  using_list_@0_opt_2  %MARK%  
 index is: 190, source_index: 78, before: using_list_@0_opt_2, after: %NULL%
using_list_@0_opt_2  :  %MARK%  
 index is: 191, source_index: 79, before: %NULL%, after: %NULL%
using_list_@0_opt_2  :  %MARK%  ,  using_list_  
 index is: 192, source_index: 80, before: %NULL%, after: ,
using_list_@0_opt_2  :  ,  %MARK%  using_list_  
 index is: 193, source_index: 80, before: ,, after: using_list_
using_list_@0_opt_2  :  ,  using_list_  %MARK%  
 index is: 194, source_index: 80, before: using_list_, after: %NULL%
if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, source_index: 81, before: %NULL%, after: if
if_stmt_  :  if  %MARK%  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 196, source_index: 81, before: if, after: basic_expr_
if_stmt_  :  if  basic_expr_  %MARK%  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 197, source_index: 81, before: basic_expr_, after: ENDL
if_stmt_  :  if  basic_expr_  ENDL  %MARK%  stmts_  if_stmt_@0_rep_5  
 index is: 198, source_index: 81, before: ENDL, after: stmts_
if_stmt_  :  if  basic_expr_  ENDL  stmts_  %MARK%  if_stmt_@0_rep_5  
 index is: 199, source_index: 81, before: stmts_, after: if_stmt_@0_rep_5
if_stmt_  :  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  %MARK%  
 index is: 200, source_index: 81, before: if_stmt_@0_rep_5, after: %NULL%
if_stmt_@0_rep_5  :  %MARK%  
 index is: 201, source_index: 82, before: %NULL%, after: %NULL%
if_stmt_@0_rep_5  :  %MARK%  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 202, source_index: 83, before: %NULL%, after: else_stmt_
if_stmt_@0_rep_5  :  else_stmt_  %MARK%  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 203, source_index: 83, before: else_stmt_, after: stmts_
if_stmt_@0_rep_5  :  else_stmt_  stmts_  %MARK%  end  ENDL  if_stmt_@0_rep_5  
 index is: 204, source_index: 83, before: stmts_, after: end
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  %MARK%  ENDL  if_stmt_@0_rep_5  
 index is: 205, source_index: 83, before: end, after: ENDL
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  %MARK%  if_stmt_@0_rep_5  
 index is: 206, source_index: 83, before: ENDL, after: if_stmt_@0_rep_5
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  %MARK%  
 index is: 207, source_index: 83, before: if_stmt_@0_rep_5, after: %NULL%
else_stmt_  :  %MARK%  else  else_stmt_@0_opt_2  ENDL  
 index is: 208, source_index: 84, before: %NULL%, after: else
else_stmt_  :  else  %MARK%  else_stmt_@0_opt_2  ENDL  
 index is: 209, source_index: 84, before: else, after: else_stmt_@0_opt_2
else_stmt_  :  else  else_stmt_@0_opt_2  %MARK%  ENDL  
 index is: 210, source_index: 84, before: else_stmt_@0_opt_2, after: ENDL
else_stmt_  :  else  else_stmt_@0_opt_2  ENDL  %MARK%  
 index is: 211, source_index: 84, before: ENDL, after: %NULL%
else_stmt_@0_opt_2  :  %MARK%  
 index is: 212, source_index: 85, before: %NULL%, after: %NULL%
else_stmt_@0_opt_2  :  %MARK%  if  basic_expr_  
 index is: 213, source_index: 86, before: %NULL%, after: if
else_stmt_@0_opt_2  :  if  %MARK%  basic_expr_  
 index is: 214, source_index: 86, before: if, after: basic_expr_
else_stmt_@0_opt_2  :  if  basic_expr_  %MARK%  
 index is: 215, source_index: 86, before: basic_expr_, after: %NULL%
switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, source_index: 87, before: %NULL%, after: switch
switch_stmt_  :  switch  %MARK%  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 217, source_index: 87, before: switch, after: basic_expr_
switch_stmt_  :  switch  basic_expr_  %MARK%  ENDL  switch_stmts_  end  ENDL  
 index is: 218, source_index: 87, before: basic_expr_, after: ENDL
switch_stmt_  :  switch  basic_expr_  ENDL  %MARK%  switch_stmts_  end  ENDL  
 index is: 219, source_index: 87, before: ENDL, after: switch_stmts_
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  %MARK%  end  ENDL  
 index is: 220, source_index: 87, before: switch_stmts_, after: end
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  %MARK%  ENDL  
 index is: 221, source_index: 87, before: end, after: ENDL
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  %MARK%  
 index is: 222, source_index: 87, before: ENDL, after: %NULL%
switch_stmts_  :  %MARK%  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  
 index is: 223, source_index: 88, before: %NULL%, after: switch_stmts_@0_rep_1
switch_stmts_  :  switch_stmts_@0_rep_1  %MARK%  switch_stmts_@0_rep_2  
 index is: 224, source_index: 88, before: switch_stmts_@0_rep_1, after: switch_stmts_@0_rep_2
switch_stmts_  :  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  %MARK%  
 index is: 225, source_index: 88, before: switch_stmts_@0_rep_2, after: %NULL%
switch_stmts_@0_rep_2  :  %MARK%  
 index is: 226, source_index: 89, before: %NULL%, after: %NULL%
switch_stmts_@0_rep_2  :  %MARK%  ENDL  switch_stmts_@0_rep_2  
 index is: 227, source_index: 90, before: %NULL%, after: ENDL
switch_stmts_@0_rep_2  :  ENDL  %MARK%  switch_stmts_@0_rep_2  
 index is: 228, source_index: 90, before: ENDL, after: switch_stmts_@0_rep_2
switch_stmts_@0_rep_2  :  ENDL  switch_stmts_@0_rep_2  %MARK%  
 index is: 229, source_index: 90, before: switch_stmts_@0_rep_2, after: %NULL%
switch_stmts_@0_rep_1  :  %MARK%  
 index is: 230, source_index: 91, before: %NULL%, after: %NULL%
switch_stmts_@0_rep_1  :  %MARK%  switch_default_  switch_stmts_@0_rep_1  
 index is: 231, source_index: 92, before: %NULL%, after: switch_default_
switch_stmts_@0_rep_1  :  switch_default_  %MARK%  switch_stmts_@0_rep_1  
 index is: 232, source_index: 92, before: switch_default_, after: switch_stmts_@0_rep_1
switch_stmts_@0_rep_1  :  switch_default_  switch_stmts_@0_rep_1  %MARK%  
 index is: 233, source_index: 92, before: switch_stmts_@0_rep_1, after: %NULL%
switch_stmts_@0_rep_1  :  %MARK%  switch_case_  switch_stmts_@0_rep_1  
 index is: 234, source_index: 93, before: %NULL%, after: switch_case_
switch_stmts_@0_rep_1  :  switch_case_  %MARK%  switch_stmts_@0_rep_1  
 index is: 235, source_index: 93, before: switch_case_, after: switch_stmts_@0_rep_1
switch_stmts_@0_rep_1  :  switch_case_  switch_stmts_@0_rep_1  %MARK%  
 index is: 236, source_index: 93, before: switch_stmts_@0_rep_1, after: %NULL%
switch_case_  :  %MARK%  case  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 237, source_index: 94, before: %NULL%, after: case
switch_case_  :  case  %MARK%  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 238, source_index: 94, before: case, after: logic_or_expr_
switch_case_  :  case  logic_or_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 239, source_index: 94, before: logic_or_expr_, after: ENDL
switch_case_  :  case  logic_or_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 240, source_index: 94, before: ENDL, after: stmts_
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 241, source_index: 94, before: stmts_, after: end
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 242, source_index: 94, before: end, after: ENDL
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 243, source_index: 94, before: ENDL, after: %NULL%
switch_default_  :  %MARK%  default  ENDL  stmts_  end  ENDL  
 index is: 244, source_index: 95, before: %NULL%, after: default
switch_default_  :  default  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 245, source_index: 95, before: default, after: ENDL
switch_default_  :  default  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 246, source_index: 95, before: ENDL, after: stmts_
switch_default_  :  default  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 247, source_index: 95, before: stmts_, after: end
switch_default_  :  default  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 248, source_index: 95, before: end, after: ENDL
switch_default_  :  default  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 249, source_index: 95, before: ENDL, after: %NULL%
while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, source_index: 96, before: %NULL%, after: while
while_stmt_  :  while  %MARK%  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 251, source_index: 96, before: while, after: basic_expr_
while_stmt_  :  while  basic_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 252, source_index: 96, before: basic_expr_, after: ENDL
while_stmt_  :  while  basic_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 253, source_index: 96, before: ENDL, after: stmts_
while_stmt_  :  while  basic_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 254, source_index: 96, before: stmts_, after: end
while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 255, source_index: 96, before: end, after: ENDL
while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 256, source_index: 96, before: ENDL, after: %NULL%
loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, source_index: 97, before: %NULL%, after: loop
loop_stmt_  :  loop  %MARK%  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 258, source_index: 97, before: loop, after: ENDL
loop_stmt_  :  loop  ENDL  %MARK%  stmts_  loop_stmt_@0_decl_4  
 index is: 259, source_index: 97, before: ENDL, after: stmts_
loop_stmt_  :  loop  ENDL  stmts_  %MARK%  loop_stmt_@0_decl_4  
 index is: 260, source_index: 97, before: stmts_, after: loop_stmt_@0_decl_4
loop_stmt_  :  loop  ENDL  stmts_  loop_stmt_@0_decl_4  %MARK%  
 index is: 261, source_index: 97, before: loop_stmt_@0_decl_4, after: %NULL%
loop_stmt_@0_decl_4  :  %MARK%  ENDL  
 index is: 262, source_index: 98, before: %NULL%, after: ENDL
loop_stmt_@0_decl_4  :  ENDL  %MARK%  
 index is: 263, source_index: 98, before: ENDL, after: %NULL%
loop_stmt_@0_decl_4  :  %MARK%  end  
 index is: 264, source_index: 99, before: %NULL%, after: end
loop_stmt_@0_decl_4  :  end  %MARK%  
 index is: 265, source_index: 99, before: end, after: %NULL%
loop_stmt_@0_decl_4  :  %MARK%  until_stmt_  
 index is: 266, source_index: 100, before: %NULL%, after: until_stmt_
loop_stmt_@0_decl_4  :  until_stmt_  %MARK%  
 index is: 267, source_index: 100, before: until_stmt_, after: %NULL%
until_stmt_  :  %MARK%  until  basic_expr_  ENDL  
 index is: 268, source_index: 101, before: %NULL%, after: until
until_stmt_  :  until  %MARK%  basic_expr_  ENDL  
 index is: 269, source_index: 101, before: until, after: basic_expr_
until_stmt_  :  until  basic_expr_  %MARK%  ENDL  
 index is: 270, source_index: 101, before: basic_expr_, after: ENDL
until_stmt_  :  until  basic_expr_  ENDL  %MARK%  
 index is: 271, source_index: 101, before: ENDL, after: %NULL%
for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, source_index: 102, before: %NULL%, after: for
for_stmt_  :  for  %MARK%  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 273, source_index: 102, before: for, after: for_stmt_@0_opt_2
for_stmt_  :  for  for_stmt_@0_opt_2  %MARK%  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 274, source_index: 102, before: for_stmt_@0_opt_2, after: for_stmt_@0_decl_3
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  %MARK%  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 275, source_index: 102, before: for_stmt_@0_decl_3, after: for_stmt_@0_opt_4
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  %MARK%  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 276, source_index: 102, before: for_stmt_@0_opt_4, after: for_stmt_@0_decl_5
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  %MARK%  for_stmt_@0_opt_6  for_body_  
 index is: 277, source_index: 102, before: for_stmt_@0_decl_5, after: for_stmt_@0_opt_6
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  %MARK%  for_body_  
 index is: 278, source_index: 102, before: for_stmt_@0_opt_6, after: for_body_
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  %MARK%  
 index is: 279, source_index: 102, before: for_body_, after: %NULL%
for_stmt_@0_opt_6  :  %MARK%  
 index is: 280, source_index: 103, before: %NULL%, after: %NULL%
for_stmt_@0_opt_6  :  %MARK%  basic_expr_  
 index is: 281, source_index: 104, before: %NULL%, after: basic_expr_
for_stmt_@0_opt_6  :  basic_expr_  %MARK%  
 index is: 282, source_index: 104, before: basic_expr_, after: %NULL%
for_stmt_@0_decl_5  :  %MARK%  ,  
 index is: 283, source_index: 105, before: %NULL%, after: ,
for_stmt_@0_decl_5  :  ,  %MARK%  
 index is: 284, source_index: 105, before: ,, after: %NULL%
for_stmt_@0_decl_5  :  %MARK%  ;  
 index is: 285, source_index: 106, before: %NULL%, after: ;
for_stmt_@0_decl_5  :  ;  %MARK%  
 index is: 286, source_index: 106, before: ;, after: %NULL%
for_stmt_@0_opt_4  :  %MARK%  
 index is: 287, source_index: 107, before: %NULL%, after: %NULL%
for_stmt_@0_opt_4  :  %MARK%  basic_expr_  
 index is: 288, source_index: 108, before: %NULL%, after: basic_expr_
for_stmt_@0_opt_4  :  basic_expr_  %MARK%  
 index is: 289, source_index: 108, before: basic_expr_, after: %NULL%
for_stmt_@0_decl_3  :  %MARK%  ,  
 index is: 290, source_index: 109, before: %NULL%, after: ,
for_stmt_@0_decl_3  :  ,  %MARK%  
 index is: 291, source_index: 109, before: ,, after: %NULL%
for_stmt_@0_decl_3  :  %MARK%  ;  
 index is: 292, source_index: 110, before: %NULL%, after: ;
for_stmt_@0_decl_3  :  ;  %MARK%  
 index is: 293, source_index: 110, before: ;, after: %NULL%
for_stmt_@0_opt_2  :  %MARK%  
 index is: 294, source_index: 111, before: %NULL%, after: %NULL%
for_stmt_@0_opt_2  :  %MARK%  var_def_  
 index is: 295, source_index: 112, before: %NULL%, after: var_def_
for_stmt_@0_opt_2  :  var_def_  %MARK%  
 index is: 296, source_index: 112, before: var_def_, after: %NULL%
foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, source_index: 113, before: %NULL%, after: foreach
foreach_stmt_  :  foreach  %MARK%  ID  in  basic_expr_  for_body_  
 index is: 298, source_index: 113, before: foreach, after: ID
foreach_stmt_  :  foreach  ID  %MARK%  in  basic_expr_  for_body_  
 index is: 299, source_index: 113, before: ID, after: in
foreach_stmt_  :  foreach  ID  in  %MARK%  basic_expr_  for_body_  
 index is: 300, source_index: 113, before: in, after: basic_expr_
foreach_stmt_  :  foreach  ID  in  basic_expr_  %MARK%  for_body_  
 index is: 301, source_index: 113, before: basic_expr_, after: for_body_
foreach_stmt_  :  foreach  ID  in  basic_expr_  for_body_  %MARK%  
 index is: 302, source_index: 113, before: for_body_, after: %NULL%
for_body_  :  %MARK%  for_body_@0_decl_1  
 index is: 303, source_index: 114, before: %NULL%, after: for_body_@0_decl_1
for_body_  :  for_body_@0_decl_1  %MARK%  
 index is: 304, source_index: 114, before: for_body_@0_decl_1, after: %NULL%
for_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 305, source_index: 115, before: %NULL%, after: ENDL
for_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 306, source_index: 115, before: ENDL, after: stmts_
for_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 307, source_index: 115, before: stmts_, after: end
for_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 308, source_index: 115, before: end, after: ENDL
for_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 309, source_index: 115, before: ENDL, after: %NULL%
for_body_@0_decl_1  :  %MARK%  do  basic_expr_  endline_  
 index is: 310, source_index: 116, before: %NULL%, after: do
for_body_@0_decl_1  :  do  %MARK%  basic_expr_  endline_  
 index is: 311, source_index: 116, before: do, after: basic_expr_
for_body_@0_decl_1  :  do  basic_expr_  %MARK%  endline_  
 index is: 312, source_index: 116, before: basic_expr_, after: endline_
for_body_@0_decl_1  :  do  basic_expr_  endline_  %MARK%  
 index is: 313, source_index: 116, before: endline_, after: %NULL%
function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, source_index: 117, before: %NULL%, after: function
function_stmt_  :  function  %MARK%  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 315, source_index: 117, before: function, after: ID
function_stmt_  :  function  ID  %MARK%  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 316, source_index: 117, before: ID, after: (
function_stmt_  :  function  ID  (  %MARK%  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 317, source_index: 117, before: (, after: function_stmt_@0_opt_4
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  %MARK%  )  function_stmt_@0_opt_6  function_body_  
 index is: 318, source_index: 117, before: function_stmt_@0_opt_4, after: )
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  %MARK%  function_stmt_@0_opt_6  function_body_  
 index is: 319, source_index: 117, before: ), after: function_stmt_@0_opt_6
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  %MARK%  function_body_  
 index is: 320, source_index: 117, before: function_stmt_@0_opt_6, after: function_body_
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  %MARK%  
 index is: 321, source_index: 117, before: function_body_, after: %NULL%
function_stmt_@0_opt_6  :  %MARK%  
 index is: 322, source_index: 118, before: %NULL%, after: %NULL%
function_stmt_@0_opt_6  :  %MARK%  override  
 index is: 323, source_index: 119, before: %NULL%, after: override
function_stmt_@0_opt_6  :  override  %MARK%  
 index is: 324, source_index: 119, before: override, after: %NULL%
function_stmt_@0_opt_4  :  %MARK%  
 index is: 325, source_index: 120, before: %NULL%, after: %NULL%
function_stmt_@0_opt_4  :  %MARK%  argument_list_  
 index is: 326, source_index: 121, before: %NULL%, after: argument_list_
function_stmt_@0_opt_4  :  argument_list_  %MARK%  
 index is: 327, source_index: 121, before: argument_list_, after: %NULL%
function_body_  :  %MARK%  function_body_@0_decl_1  
 index is: 328, source_index: 122, before: %NULL%, after: function_body_@0_decl_1
function_body_  :  function_body_@0_decl_1  %MARK%  
 index is: 329, source_index: 122, before: function_body_@0_decl_1, after: %NULL%
function_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 330, source_index: 123, before: %NULL%, after: ENDL
function_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 331, source_index: 123, before: ENDL, after: stmts_
function_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 332, source_index: 123, before: stmts_, after: end
function_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 333, source_index: 123, before: end, after: ENDL
function_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 334, source_index: 123, before: ENDL, after: %NULL%
function_body_@0_decl_1  :  %MARK%  {  stmts_  }  
 index is: 335, source_index: 124, before: %NULL%, after: {
function_body_@0_decl_1  :  {  %MARK%  stmts_  }  
 index is: 336, source_index: 124, before: {, after: stmts_
function_body_@0_decl_1  :  {  stmts_  %MARK%  }  
 index is: 337, source_index: 124, before: stmts_, after: }
function_body_@0_decl_1  :  {  stmts_  }  %MARK%  
 index is: 338, source_index: 124, before: }, after: %NULL%
return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, source_index: 125, before: %NULL%, after: return
return_stmt_  :  return  %MARK%  return_stmt_@0_opt_2  endline_  
 index is: 340, source_index: 125, before: return, after: return_stmt_@0_opt_2
return_stmt_  :  return  return_stmt_@0_opt_2  %MARK%  endline_  
 index is: 341, source_index: 125, before: return_stmt_@0_opt_2, after: endline_
return_stmt_  :  return  return_stmt_@0_opt_2  endline_  %MARK%  
 index is: 342, source_index: 125, before: endline_, after: %NULL%
return_stmt_@0_opt_2  :  %MARK%  
 index is: 343, source_index: 126, before: %NULL%, after: %NULL%
return_stmt_@0_opt_2  :  %MARK%  expr_  
 index is: 344, source_index: 127, before: %NULL%, after: expr_
return_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 345, source_index: 127, before: expr_, after: %NULL%
try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, source_index: 128, before: %NULL%, after: try
try_stmt_  :  try  %MARK%  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 347, source_index: 128, before: try, after: ENDL
try_stmt_  :  try  ENDL  %MARK%  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 348, source_index: 128, before: ENDL, after: stmts_
try_stmt_  :  try  ENDL  stmts_  %MARK%  try_stmt_@0_rep_4  end  ENDL  
 index is: 349, source_index: 128, before: stmts_, after: try_stmt_@0_rep_4
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  %MARK%  end  ENDL  
 index is: 350, source_index: 128, before: try_stmt_@0_rep_4, after: end
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  %MARK%  ENDL  
 index is: 351, source_index: 128, before: end, after: ENDL
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  %MARK%  
 index is: 352, source_index: 128, before: ENDL, after: %NULL%
try_stmt_@0_rep_4  :  %MARK%  
 index is: 353, source_index: 129, before: %NULL%, after: %NULL%
try_stmt_@0_rep_4  :  %MARK%  catch_stmt_  stmts_  try_stmt_@0_rep_4  
 index is: 354, source_index: 130, before: %NULL%, after: catch_stmt_
try_stmt_@0_rep_4  :  catch_stmt_  %MARK%  stmts_  try_stmt_@0_rep_4  
 index is: 355, source_index: 130, before: catch_stmt_, after: stmts_
try_stmt_@0_rep_4  :  catch_stmt_  stmts_  %MARK%  try_stmt_@0_rep_4  
 index is: 356, source_index: 130, before: stmts_, after: try_stmt_@0_rep_4
try_stmt_@0_rep_4  :  catch_stmt_  stmts_  try_stmt_@0_rep_4  %MARK%  
 index is: 357, source_index: 130, before: try_stmt_@0_rep_4, after: %NULL%
catch_stmt_  :  %MARK%  catch  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 358, source_index: 131, before: %NULL%, after: catch
catch_stmt_  :  catch  %MARK%  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 359, source_index: 131, before: catch, after: ID
catch_stmt_  :  catch  ID  %MARK%  catch_stmt_@0_opt_3  ENDL  
 index is: 360, source_index: 131, before: ID, after: catch_stmt_@0_opt_3
catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  %MARK%  ENDL  
 index is: 361, source_index: 131, before: catch_stmt_@0_opt_3, after: ENDL
catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  ENDL  %MARK%  
 index is: 362, source_index: 131, before: ENDL, after: %NULL%
catch_stmt_@0_opt_3  :  %MARK%  
 index is: 363, source_index: 132, before: %NULL%, after: %NULL%
catch_stmt_@0_opt_3  :  %MARK%  :  visit_expr_  
 index is: 364, source_index: 133, before: %NULL%, after: :
catch_stmt_@0_opt_3  :  :  %MARK%  visit_expr_  
 index is: 365, source_index: 133, before: :, after: visit_expr_
catch_stmt_@0_opt_3  :  :  visit_expr_  %MARK%  
 index is: 366, source_index: 133, before: visit_expr_, after: %NULL%
throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, source_index: 134, before: %NULL%, after: throw
throw_stmt_  :  throw  %MARK%  throw_stmt_@0_opt_2  endline_  
 index is: 368, source_index: 134, before: throw, after: throw_stmt_@0_opt_2
throw_stmt_  :  throw  throw_stmt_@0_opt_2  %MARK%  endline_  
 index is: 369, source_index: 134, before: throw_stmt_@0_opt_2, after: endline_
throw_stmt_  :  throw  throw_stmt_@0_opt_2  endline_  %MARK%  
 index is: 370, source_index: 134, before: endline_, after: %NULL%
throw_stmt_@0_opt_2  :  %MARK%  
 index is: 371, source_index: 135, before: %NULL%, after: %NULL%
throw_stmt_@0_opt_2  :  %MARK%  expr_  
 index is: 372, source_index: 136, before: %NULL%, after: expr_
throw_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 373, source_index: 136, before: expr_, after: %NULL%
class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, source_index: 137, before: %NULL%, after: class_stmt_@0_decl_1
class_stmt_  :  class_stmt_@0_decl_1  %MARK%  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 375, source_index: 137, before: class_stmt_@0_decl_1, after: ID
class_stmt_  :  class_stmt_@0_decl_1  ID  %MARK%  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 376, source_index: 137, before: ID, after: class_stmt_@0_opt_3
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 377, source_index: 137, before: class_stmt_@0_opt_3, after: ENDL
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 378, source_index: 137, before: ENDL, after: decl_stmts_
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 379, source_index: 137, before: decl_stmts_, after: end
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 380, source_index: 137, before: end, after: ENDL
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 381, source_index: 137, before: ENDL, after: %NULL%
class_stmt_@0_opt_3  :  %MARK%  
 index is: 382, source_index: 138, before: %NULL%, after: %NULL%
class_stmt_@0_opt_3  :  %MARK%  extends  visit_expr_  
 index is: 383, source_index: 139, before: %NULL%, after: extends
class_stmt_@0_opt_3  :  extends  %MARK%  visit_expr_  
 index is: 384, source_index: 139, before: extends, after: visit_expr_
class_stmt_@0_opt_3  :  extends  visit_expr_  %MARK%  
 index is: 385, source_index: 139, before: visit_expr_, after: %NULL%
class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, source_index: 140, before: %NULL%, after: struct
class_stmt_@0_decl_1  :  struct  %MARK%  
 index is: 387, source_index: 140, before: struct, after: %NULL%
class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, source_index: 141, before: %NULL%, after: class
class_stmt_@0_decl_1  :  class  %MARK%  
 index is: 389, source_index: 141, before: class, after: %NULL%
control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, source_index: 142, before: %NULL%, after: control_stmt_@0_decl_1
control_stmt_  :  control_stmt_@0_decl_1  %MARK%  endline_  
 index is: 391, source_index: 142, before: control_stmt_@0_decl_1, after: endline_
control_stmt_  :  control_stmt_@0_decl_1  endline_  %MARK%  
 index is: 392, source_index: 142, before: endline_, after: %NULL%
control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, source_index: 143, before: %NULL%, after: continue
control_stmt_@0_decl_1  :  continue  %MARK%  
 index is: 394, source_index: 143, before: continue, after: %NULL%
control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, source_index: 144, before: %NULL%, after: break
control_stmt_@0_decl_1  :  break  %MARK%  
 index is: 396, source_index: 144, before: break, after: %NULL%
expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, source_index: 145, before: %NULL%, after: expr_
expr_stmt_  :  expr_  %MARK%  endline_  
 index is: 398, source_index: 145, before: expr_, after: endline_
expr_stmt_  :  expr_  endline_  %MARK%  
 index is: 399, source_index: 145, before: endline_, after: %NULL%
end_stmt_  :  %MARK%  end  ENDL  
 index is: 400, source_index: 146, before: %NULL%, after: end
end_stmt_  :  end  %MARK%  ENDL  
 index is: 401, source_index: 146, before: end, after: ENDL
end_stmt_  :  end  ENDL  %MARK%  
 index is: 402, source_index: 146, before: ENDL, after: %NULL%
expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, source_index: 147, before: %NULL%, after: single_expr_
expr_  :  single_expr_  %MARK%  expr_@0_opt_2  
 index is: 404, source_index: 147, before: single_expr_, after: expr_@0_opt_2
expr_  :  single_expr_  expr_@0_opt_2  %MARK%  
 index is: 405, source_index: 147, before: expr_@0_opt_2, after: %NULL%
expr_@0_opt_2  :  %MARK%  
 index is: 406, source_index: 148, before: %NULL%, after: %NULL%
expr_@0_opt_2  :  %MARK%  ,  expr_  
 index is: 407, source_index: 149, before: %NULL%, after: ,
expr_@0_opt_2  :  ,  %MARK%  expr_  
 index is: 408, source_index: 149, before: ,, after: expr_
expr_@0_opt_2  :  ,  expr_  %MARK%  
 index is: 409, source_index: 149, before: expr_, after: %NULL%
single_expr_  :  %MARK%  basic_expr_  
 index is: 410, source_index: 150, before: %NULL%, after: basic_expr_
single_expr_  :  basic_expr_  %MARK%  
 index is: 411, source_index: 150, before: basic_expr_, after: %NULL%
single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, source_index: 151, before: %NULL%, after: lambda_expr_
single_expr_  :  lambda_expr_  %MARK%  
 index is: 413, source_index: 151, before: lambda_expr_, after: %NULL%
basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, source_index: 152, before: %NULL%, after: cond_expr_
basic_expr_  :  cond_expr_  %MARK%  basic_expr_@1_opt_2  
 index is: 415, source_index: 152, before: cond_expr_, after: basic_expr_@1_opt_2
basic_expr_  :  cond_expr_  basic_expr_@1_opt_2  %MARK%  
 index is: 416, source_index: 152, before: basic_expr_@1_opt_2, after: %NULL%
basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, source_index: 153, before: %NULL%, after: var_bind_
basic_expr_  :  var_bind_  %MARK%  =  cond_expr_  
 index is: 418, source_index: 153, before: var_bind_, after: =
basic_expr_  :  var_bind_  =  %MARK%  cond_expr_  
 index is: 419, source_index: 153, before: =, after: cond_expr_
basic_expr_  :  var_bind_  =  cond_expr_  %MARK%  
 index is: 420, source_index: 153, before: cond_expr_, after: %NULL%
basic_expr_@1_opt_2  :  %MARK%  
 index is: 421, source_index: 154, before: %NULL%, after: %NULL%
basic_expr_@1_opt_2  :  %MARK%  asi_op_  single_expr_  
 index is: 422, source_index: 155, before: %NULL%, after: asi_op_
basic_expr_@1_opt_2  :  asi_op_  %MARK%  single_expr_  
 index is: 423, source_index: 155, before: asi_op_, after: single_expr_
basic_expr_@1_opt_2  :  asi_op_  single_expr_  %MARK%  
 index is: 424, source_index: 155, before: single_expr_, after: %NULL%
asi_op_  :  %MARK%  ^=  
 index is: 425, source_index: 156, before: %NULL%, after: ^=
asi_op_  :  ^=  %MARK%  
 index is: 426, source_index: 156, before: ^=, after: %NULL%
asi_op_  :  %MARK%  %=  
 index is: 427, source_index: 157, before: %NULL%, after: %=
asi_op_  :  %=  %MARK%  
 index is: 428, source_index: 157, before: %=, after: %NULL%
asi_op_  :  %MARK%  /=  
 index is: 429, source_index: 158, before: %NULL%, after: /=
asi_op_  :  /=  %MARK%  
 index is: 430, source_index: 158, before: /=, after: %NULL%
asi_op_  :  %MARK%  *=  
 index is: 431, source_index: 159, before: %NULL%, after: *=
asi_op_  :  *=  %MARK%  
 index is: 432, source_index: 159, before: *=, after: %NULL%
asi_op_  :  %MARK%  -=  
 index is: 433, source_index: 160, before: %NULL%, after: -=
asi_op_  :  -=  %MARK%  
 index is: 434, source_index: 160, before: -=, after: %NULL%
asi_op_  :  %MARK%  +=  
 index is: 435, source_index: 161, before: %NULL%, after: +=
asi_op_  :  +=  %MARK%  
 index is: 436, source_index: 161, before: +=, after: %NULL%
asi_op_  :  %MARK%  :=  
 index is: 437, source_index: 162, before: %NULL%, after: :=
asi_op_  :  :=  %MARK%  
 index is: 438, source_index: 162, before: :=, after: %NULL%
asi_op_  :  %MARK%  =  
 index is: 439, source_index: 163, before: %NULL%, after: =
asi_op_  :  =  %MARK%  
 index is: 440, source_index: 163, before: =, after: %NULL%
lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, source_index: 164, before: %NULL%, after: [
lambda_expr_  :  [  %MARK%  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 442, source_index: 164, before: [, after: lambda_expr_@0_opt_2
lambda_expr_  :  [  lambda_expr_@0_opt_2  %MARK%  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 443, source_index: 164, before: lambda_expr_@0_opt_2, after: ]
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  %MARK%  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 444, source_index: 164, before: ], after: (
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  %MARK%  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 445, source_index: 164, before: (, after: lambda_expr_@0_opt_5
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  %MARK%  )  lambda_body_  
 index is: 446, source_index: 164, before: lambda_expr_@0_opt_5, after: )
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  %MARK%  lambda_body_  
 index is: 447, source_index: 164, before: ), after: lambda_body_
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  %MARK%  
 index is: 448, source_index: 164, before: lambda_body_, after: %NULL%
lambda_expr_@0_opt_5  :  %MARK%  
 index is: 449, source_index: 165, before: %NULL%, after: %NULL%
lambda_expr_@0_opt_5  :  %MARK%  argument_list_  
 index is: 450, source_index: 166, before: %NULL%, after: argument_list_
lambda_expr_@0_opt_5  :  argument_list_  %MARK%  
 index is: 451, source_index: 166, before: argument_list_, after: %NULL%
lambda_expr_@0_opt_2  :  %MARK%  
 index is: 452, source_index: 167, before: %NULL%, after: %NULL%
lambda_expr_@0_opt_2  :  %MARK%  capture_list_  
 index is: 453, source_index: 168, before: %NULL%, after: capture_list_
lambda_expr_@0_opt_2  :  capture_list_  %MARK%  
 index is: 454, source_index: 168, before: capture_list_, after: %NULL%
capture_list_  :  %MARK%  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  
 index is: 455, source_index: 169, before: %NULL%, after: capture_list_@0_opt_1
capture_list_  :  capture_list_@0_opt_1  %MARK%  ID  capture_list_@0_rep_3  
 index is: 456, source_index: 169, before: capture_list_@0_opt_1, after: ID
capture_list_  :  capture_list_@0_opt_1  ID  %MARK%  capture_list_@0_rep_3  
 index is: 457, source_index: 169, before: ID, after: capture_list_@0_rep_3
capture_list_  :  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  %MARK%  
 index is: 458, source_index: 169, before: capture_list_@0_rep_3, after: %NULL%
capture_list_@0_rep_3  :  %MARK%  
 index is: 459, source_index: 170, before: %NULL%, after: %NULL%
capture_list_@0_rep_3  :  %MARK%  ,  capture_list_  capture_list_@0_rep_3  
 index is: 460, source_index: 171, before: %NULL%, after: ,
capture_list_@0_rep_3  :  ,  %MARK%  capture_list_  capture_list_@0_rep_3  
 index is: 461, source_index: 171, before: ,, after: capture_list_
capture_list_@0_rep_3  :  ,  capture_list_  %MARK%  capture_list_@0_rep_3  
 index is: 462, source_index: 171, before: capture_list_, after: capture_list_@0_rep_3
capture_list_@0_rep_3  :  ,  capture_list_  capture_list_@0_rep_3  %MARK%  
 index is: 463, source_index: 171, before: capture_list_@0_rep_3, after: %NULL%
capture_list_@0_opt_1  :  %MARK%  
 index is: 464, source_index: 172, before: %NULL%, after: %NULL%
capture_list_@0_opt_1  :  %MARK%  =  
 index is: 465, source_index: 173, before: %NULL%, after: =
capture_list_@0_opt_1  :  =  %MARK%  
 index is: 466, source_index: 173, before: =, after: %NULL%
argument_list_  :  %MARK%  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 467, source_index: 174, before: %NULL%, after: argument_list_@1_opt_1
argument_list_  :  argument_list_@1_opt_1  %MARK%  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 468, source_index: 174, before: argument_list_@1_opt_1, after: ID
argument_list_  :  argument_list_@1_opt_1  ID  %MARK%  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 469, source_index: 174, before: ID, after: argument_list_@1_opt_3
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  %MARK%  visit_expr_  argument_list_@1_rep_5  
 index is: 470, source_index: 174, before: argument_list_@1_opt_3, after: visit_expr_
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  %MARK%  argument_list_@1_rep_5  
 index is: 471, source_index: 174, before: visit_expr_, after: argument_list_@1_rep_5
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  %MARK%  
 index is: 472, source_index: 174, before: argument_list_@1_rep_5, after: %NULL%
argument_list_  :  %MARK%  ...  ID  
 index is: 473, source_index: 175, before: %NULL%, after: ...
argument_list_  :  ...  %MARK%  ID  
 index is: 474, source_index: 175, before: ..., after: ID
argument_list_  :  ...  ID  %MARK%  
 index is: 475, source_index: 175, before: ID, after: %NULL%
argument_list_@1_rep_5  :  %MARK%  
 index is: 476, source_index: 176, before: %NULL%, after: %NULL%
argument_list_@1_rep_5  :  %MARK%  ,  argument_list_  argument_list_@1_rep_5  
 index is: 477, source_index: 177, before: %NULL%, after: ,
argument_list_@1_rep_5  :  ,  %MARK%  argument_list_  argument_list_@1_rep_5  
 index is: 478, source_index: 177, before: ,, after: argument_list_
argument_list_@1_rep_5  :  ,  argument_list_  %MARK%  argument_list_@1_rep_5  
 index is: 479, source_index: 177, before: argument_list_, after: argument_list_@1_rep_5
argument_list_@1_rep_5  :  ,  argument_list_  argument_list_@1_rep_5  %MARK%  
 index is: 480, source_index: 177, before: argument_list_@1_rep_5, after: %NULL%
argument_list_@1_opt_3  :  %MARK%  
 index is: 481, source_index: 178, before: %NULL%, after: %NULL%
argument_list_@1_opt_3  :  %MARK%  :  
 index is: 482, source_index: 179, before: %NULL%, after: :
argument_list_@1_opt_3  :  :  %MARK%  
 index is: 483, source_index: 179, before: :, after: %NULL%
argument_list_@1_opt_1  :  %MARK%  
 index is: 484, source_index: 180, before: %NULL%, after: %NULL%
argument_list_@1_opt_1  :  %MARK%  =  
 index is: 485, source_index: 181, before: %NULL%, after: =
argument_list_@1_opt_1  :  =  %MARK%  
 index is: 486, source_index: 181, before: =, after: %NULL%
lambda_body_  :  %MARK%  ->  cond_expr_  
 index is: 487, source_index: 182, before: %NULL%, after: ->
lambda_body_  :  ->  %MARK%  cond_expr_  
 index is: 488, source_index: 182, before: ->, after: cond_expr_
lambda_body_  :  ->  cond_expr_  %MARK%  
 index is: 489, source_index: 182, before: cond_expr_, after: %NULL%
lambda_body_  :  %MARK%  {  lambda_body_@0_rep_2  }  
 index is: 490, source_index: 183, before: %NULL%, after: {
lambda_body_  :  {  %MARK%  lambda_body_@0_rep_2  }  
 index is: 491, source_index: 183, before: {, after: lambda_body_@0_rep_2
lambda_body_  :  {  lambda_body_@0_rep_2  %MARK%  }  
 index is: 492, source_index: 183, before: lambda_body_@0_rep_2, after: }
lambda_body_  :  {  lambda_body_@0_rep_2  }  %MARK%  
 index is: 493, source_index: 183, before: }, after: %NULL%
lambda_body_@0_rep_2  :  %MARK%  
 index is: 494, source_index: 184, before: %NULL%, after: %NULL%
lambda_body_@0_rep_2  :  %MARK%  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 495, source_index: 185, before: %NULL%, after: statement_
lambda_body_@0_rep_2  :  statement_  %MARK%  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 496, source_index: 185, before: statement_, after: lambda_body_@0_rep_2@0_rep_2
lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  %MARK%  lambda_body_@0_rep_2  
 index is: 497, source_index: 185, before: lambda_body_@0_rep_2@0_rep_2, after: lambda_body_@0_rep_2
lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  %MARK%  
 index is: 498, source_index: 185, before: lambda_body_@0_rep_2, after: %NULL%
lambda_body_@0_rep_2@0_rep_2  :  %MARK%  
 index is: 499, source_index: 186, before: %NULL%, after: %NULL%
lambda_body_@0_rep_2@0_rep_2  :  %MARK%  ENDL  lambda_body_@0_rep_2@0_rep_2  
 index is: 500, source_index: 187, before: %NULL%, after: ENDL
lambda_body_@0_rep_2@0_rep_2  :  ENDL  %MARK%  lambda_body_@0_rep_2@0_rep_2  
 index is: 501, source_index: 187, before: ENDL, after: lambda_body_@0_rep_2@0_rep_2
lambda_body_@0_rep_2@0_rep_2  :  ENDL  lambda_body_@0_rep_2@0_rep_2  %MARK%  
 index is: 502, source_index: 187, before: lambda_body_@0_rep_2@0_rep_2, after: %NULL%
cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, source_index: 188, before: %NULL%, after: logic_or_expr_
cond_expr_  :  logic_or_expr_  %MARK%  cond_expr_@0_opt_2  
 index is: 504, source_index: 188, before: logic_or_expr_, after: cond_expr_@0_opt_2
cond_expr_  :  logic_or_expr_  cond_expr_@0_opt_2  %MARK%  
 index is: 505, source_index: 188, before: cond_expr_@0_opt_2, after: %NULL%
cond_expr_@0_opt_2  :  %MARK%  
 index is: 506, source_index: 189, before: %NULL%, after: %NULL%
cond_expr_@0_opt_2  :  %MARK%  cond_postfix_  
 index is: 507, source_index: 190, before: %NULL%, after: cond_postfix_
cond_expr_@0_opt_2  :  cond_postfix_  %MARK%  
 index is: 508, source_index: 190, before: cond_postfix_, after: %NULL%
cond_postfix_  :  %MARK%  :  logic_or_expr_  
 index is: 509, source_index: 191, before: %NULL%, after: :
cond_postfix_  :  :  %MARK%  logic_or_expr_  
 index is: 510, source_index: 191, before: :, after: logic_or_expr_
cond_postfix_  :  :  logic_or_expr_  %MARK%  
 index is: 511, source_index: 191, before: logic_or_expr_, after: %NULL%
cond_postfix_  :  %MARK%  ?  logic_or_expr_  :  cond_expr_  
 index is: 512, source_index: 192, before: %NULL%, after: ?
cond_postfix_  :  ?  %MARK%  logic_or_expr_  :  cond_expr_  
 index is: 513, source_index: 192, before: ?, after: logic_or_expr_
cond_postfix_  :  ?  logic_or_expr_  %MARK%  :  cond_expr_  
 index is: 514, source_index: 192, before: logic_or_expr_, after: :
cond_postfix_  :  ?  logic_or_expr_  :  %MARK%  cond_expr_  
 index is: 515, source_index: 192, before: :, after: cond_expr_
cond_postfix_  :  ?  logic_or_expr_  :  cond_expr_  %MARK%  
 index is: 516, source_index: 192, before: cond_expr_, after: %NULL%
logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, source_index: 193, before: %NULL%, after: logic_and_expr_
logic_or_expr_  :  logic_and_expr_  %MARK%  logic_or_expr_@0_opt_2  
 index is: 518, source_index: 193, before: logic_and_expr_, after: logic_or_expr_@0_opt_2
logic_or_expr_  :  logic_and_expr_  logic_or_expr_@0_opt_2  %MARK%  
 index is: 519, source_index: 193, before: logic_or_expr_@0_opt_2, after: %NULL%
logic_or_expr_@0_opt_2  :  %MARK%  
 index is: 520, source_index: 194, before: %NULL%, after: %NULL%
logic_or_expr_@0_opt_2  :  %MARK%  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  
 index is: 521, source_index: 195, before: %NULL%, after: logic_or_expr_@0_opt_2@0_decl_1
logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  %MARK%  logic_or_expr_  
 index is: 522, source_index: 195, before: logic_or_expr_@0_opt_2@0_decl_1, after: logic_or_expr_
logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  %MARK%  
 index is: 523, source_index: 195, before: logic_or_expr_, after: %NULL%
logic_or_expr_@0_opt_2@0_decl_1  :  %MARK%  or  
 index is: 524, source_index: 196, before: %NULL%, after: or
logic_or_expr_@0_opt_2@0_decl_1  :  or  %MARK%  
 index is: 525, source_index: 196, before: or, after: %NULL%
logic_or_expr_@0_opt_2@0_decl_1  :  %MARK%  ||  
 index is: 526, source_index: 197, before: %NULL%, after: ||
logic_or_expr_@0_opt_2@0_decl_1  :  ||  %MARK%  
 index is: 527, source_index: 197, before: ||, after: %NULL%
logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, source_index: 198, before: %NULL%, after: equal_expr_
logic_and_expr_  :  equal_expr_  %MARK%  logic_and_expr_@0_opt_2  
 index is: 529, source_index: 198, before: equal_expr_, after: logic_and_expr_@0_opt_2
logic_and_expr_  :  equal_expr_  logic_and_expr_@0_opt_2  %MARK%  
 index is: 530, source_index: 198, before: logic_and_expr_@0_opt_2, after: %NULL%
logic_and_expr_@0_opt_2  :  %MARK%  
 index is: 531, source_index: 199, before: %NULL%, after: %NULL%
logic_and_expr_@0_opt_2  :  %MARK%  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  
 index is: 532, source_index: 200, before: %NULL%, after: logic_and_expr_@0_opt_2@0_decl_1
logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  %MARK%  logic_and_expr_  
 index is: 533, source_index: 200, before: logic_and_expr_@0_opt_2@0_decl_1, after: logic_and_expr_
logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  %MARK%  
 index is: 534, source_index: 200, before: logic_and_expr_, after: %NULL%
logic_and_expr_@0_opt_2@0_decl_1  :  %MARK%  and  
 index is: 535, source_index: 201, before: %NULL%, after: and
logic_and_expr_@0_opt_2@0_decl_1  :  and  %MARK%  
 index is: 536, source_index: 201, before: and, after: %NULL%
logic_and_expr_@0_opt_2@0_decl_1  :  %MARK%  &&  
 index is: 537, source_index: 202, before: %NULL%, after: &&
logic_and_expr_@0_opt_2@0_decl_1  :  &&  %MARK%  
 index is: 538, source_index: 202, before: &&, after: %NULL%
equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, source_index: 203, before: %NULL%, after: relat_expr_
equal_expr_  :  relat_expr_  %MARK%  equal_expr_@0_opt_2  
 index is: 540, source_index: 203, before: relat_expr_, after: equal_expr_@0_opt_2
equal_expr_  :  relat_expr_  equal_expr_@0_opt_2  %MARK%  
 index is: 541, source_index: 203, before: equal_expr_@0_opt_2, after: %NULL%
equal_expr_@0_opt_2  :  %MARK%  
 index is: 542, source_index: 204, before: %NULL%, after: %NULL%
equal_expr_@0_opt_2  :  %MARK%  equal_expr_@0_opt_2@0_decl_1  equal_expr_  
 index is: 543, source_index: 205, before: %NULL%, after: equal_expr_@0_opt_2@0_decl_1
equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  %MARK%  equal_expr_  
 index is: 544, source_index: 205, before: equal_expr_@0_opt_2@0_decl_1, after: equal_expr_
equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  equal_expr_  %MARK%  
 index is: 545, source_index: 205, before: equal_expr_, after: %NULL%
equal_expr_@0_opt_2@0_decl_1  :  %MARK%  !=  
 index is: 546, source_index: 206, before: %NULL%, after: !=
equal_expr_@0_opt_2@0_decl_1  :  !=  %MARK%  
 index is: 547, source_index: 206, before: !=, after: %NULL%
equal_expr_@0_opt_2@0_decl_1  :  %MARK%  ==  
 index is: 548, source_index: 207, before: %NULL%, after: ==
equal_expr_@0_opt_2@0_decl_1  :  ==  %MARK%  
 index is: 549, source_index: 207, before: ==, after: %NULL%
relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, source_index: 208, before: %NULL%, after: add_expr_
relat_expr_  :  add_expr_  %MARK%  relat_expr_@0_opt_2  
 index is: 551, source_index: 208, before: add_expr_, after: relat_expr_@0_opt_2
relat_expr_  :  add_expr_  relat_expr_@0_opt_2  %MARK%  
 index is: 552, source_index: 208, before: relat_expr_@0_opt_2, after: %NULL%
relat_expr_@0_opt_2  :  %MARK%  
 index is: 553, source_index: 209, before: %NULL%, after: %NULL%
relat_expr_@0_opt_2  :  %MARK%  relat_expr_@0_opt_2@0_decl_1  relat_expr_  
 index is: 554, source_index: 210, before: %NULL%, after: relat_expr_@0_opt_2@0_decl_1
relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  %MARK%  relat_expr_  
 index is: 555, source_index: 210, before: relat_expr_@0_opt_2@0_decl_1, after: relat_expr_
relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  relat_expr_  %MARK%  
 index is: 556, source_index: 210, before: relat_expr_, after: %NULL%
relat_expr_@0_opt_2@0_decl_1  :  %MARK%  <=  
 index is: 557, source_index: 211, before: %NULL%, after: <=
relat_expr_@0_opt_2@0_decl_1  :  <=  %MARK%  
 index is: 558, source_index: 211, before: <=, after: %NULL%
relat_expr_@0_opt_2@0_decl_1  :  %MARK%  >=  
 index is: 559, source_index: 212, before: %NULL%, after: >=
relat_expr_@0_opt_2@0_decl_1  :  >=  %MARK%  
 index is: 560, source_index: 212, before: >=, after: %NULL%
relat_expr_@0_opt_2@0_decl_1  :  %MARK%  <  
 index is: 561, source_index: 213, before: %NULL%, after: <
relat_expr_@0_opt_2@0_decl_1  :  <  %MARK%  
 index is: 562, source_index: 213, before: <, after: %NULL%
relat_expr_@0_opt_2@0_decl_1  :  %MARK%  >  
 index is: 563, source_index: 214, before: %NULL%, after: >
relat_expr_@0_opt_2@0_decl_1  :  >  %MARK%  
 index is: 564, source_index: 214, before: >, after: %NULL%
add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, source_index: 215, before: %NULL%, after: mul_expr_
add_expr_  :  mul_expr_  %MARK%  add_expr_@0_opt_2  
 index is: 566, source_index: 215, before: mul_expr_, after: add_expr_@0_opt_2
add_expr_  :  mul_expr_  add_expr_@0_opt_2  %MARK%  
 index is: 567, source_index: 215, before: add_expr_@0_opt_2, after: %NULL%
add_expr_@0_opt_2  :  %MARK%  
 index is: 568, source_index: 216, before: %NULL%, after: %NULL%
add_expr_@0_opt_2  :  %MARK%  add_expr_@0_opt_2@0_decl_1  add_expr_  
 index is: 569, source_index: 217, before: %NULL%, after: add_expr_@0_opt_2@0_decl_1
add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  %MARK%  add_expr_  
 index is: 570, source_index: 217, before: add_expr_@0_opt_2@0_decl_1, after: add_expr_
add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  add_expr_  %MARK%  
 index is: 571, source_index: 217, before: add_expr_, after: %NULL%
add_expr_@0_opt_2@0_decl_1  :  %MARK%  -  
 index is: 572, source_index: 218, before: %NULL%, after: -
add_expr_@0_opt_2@0_decl_1  :  -  %MARK%  
 index is: 573, source_index: 218, before: -, after: %NULL%
add_expr_@0_opt_2@0_decl_1  :  %MARK%  +  
 index is: 574, source_index: 219, before: %NULL%, after: +
add_expr_@0_opt_2@0_decl_1  :  +  %MARK%  
 index is: 575, source_index: 219, before: +, after: %NULL%
mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, source_index: 220, before: %NULL%, after: unary_expr_
mul_expr_  :  unary_expr_  %MARK%  mul_expr_@0_opt_2  
 index is: 577, source_index: 220, before: unary_expr_, after: mul_expr_@0_opt_2
mul_expr_  :  unary_expr_  mul_expr_@0_opt_2  %MARK%  
 index is: 578, source_index: 220, before: mul_expr_@0_opt_2, after: %NULL%
mul_expr_@0_opt_2  :  %MARK%  
 index is: 579, source_index: 221, before: %NULL%, after: %NULL%
mul_expr_@0_opt_2  :  %MARK%  mul_expr_@0_opt_2@0_decl_1  mul_expr_  
 index is: 580, source_index: 222, before: %NULL%, after: mul_expr_@0_opt_2@0_decl_1
mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  %MARK%  mul_expr_  
 index is: 581, source_index: 222, before: mul_expr_@0_opt_2@0_decl_1, after: mul_expr_
mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  mul_expr_  %MARK%  
 index is: 582, source_index: 222, before: mul_expr_, after: %NULL%
mul_expr_@0_opt_2@0_decl_1  :  %MARK%  ^  
 index is: 583, source_index: 223, before: %NULL%, after: ^
mul_expr_@0_opt_2@0_decl_1  :  ^  %MARK%  
 index is: 584, source_index: 223, before: ^, after: %NULL%
mul_expr_@0_opt_2@0_decl_1  :  %MARK%  %  
 index is: 585, source_index: 224, before: %NULL%, after: %
mul_expr_@0_opt_2@0_decl_1  :  %  %MARK%  
 index is: 586, source_index: 224, before: %, after: %NULL%
mul_expr_@0_opt_2@0_decl_1  :  %MARK%  /  
 index is: 587, source_index: 225, before: %NULL%, after: /
mul_expr_@0_opt_2@0_decl_1  :  /  %MARK%  
 index is: 588, source_index: 225, before: /, after: %NULL%
mul_expr_@0_opt_2@0_decl_1  :  %MARK%  *  
 index is: 589, source_index: 226, before: %NULL%, after: *
mul_expr_@0_opt_2@0_decl_1  :  *  %MARK%  
 index is: 590, source_index: 226, before: *, after: %NULL%
unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, source_index: 227, before: %NULL%, after: prim_expr_
unary_expr_  :  prim_expr_  %MARK%  unary_expr_@2_opt_2  
 index is: 592, source_index: 227, before: prim_expr_, after: unary_expr_@2_opt_2
unary_expr_  :  prim_expr_  unary_expr_@2_opt_2  %MARK%  
 index is: 593, source_index: 227, before: unary_expr_@2_opt_2, after: %NULL%
unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, source_index: 228, before: %NULL%, after: unary_expr_@1_decl_1
unary_expr_  :  unary_expr_@1_decl_1  %MARK%  unary_expr_  unary_expr_@1_opt_3  
 index is: 595, source_index: 228, before: unary_expr_@1_decl_1, after: unary_expr_
unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  %MARK%  unary_expr_@1_opt_3  
 index is: 596, source_index: 228, before: unary_expr_, after: unary_expr_@1_opt_3
unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  %MARK%  
 index is: 597, source_index: 228, before: unary_expr_@1_opt_3, after: %NULL%
unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, source_index: 229, before: %NULL%, after: unary_op_
unary_expr_  :  unary_op_  %MARK%  unary_expr_  
 index is: 599, source_index: 229, before: unary_op_, after: unary_expr_
unary_expr_  :  unary_op_  unary_expr_  %MARK%  
 index is: 600, source_index: 229, before: unary_expr_, after: %NULL%
unary_expr_@2_opt_2  :  %MARK%  
 index is: 601, source_index: 230, before: %NULL%, after: %NULL%
unary_expr_@2_opt_2  :  %MARK%  postfix_expr_  
 index is: 602, source_index: 231, before: %NULL%, after: postfix_expr_
unary_expr_@2_opt_2  :  postfix_expr_  %MARK%  
 index is: 603, source_index: 231, before: postfix_expr_, after: %NULL%
unary_expr_@1_opt_3  :  %MARK%  
 index is: 604, source_index: 232, before: %NULL%, after: %NULL%
unary_expr_@1_opt_3  :  %MARK%  array_  
 index is: 605, source_index: 233, before: %NULL%, after: array_
unary_expr_@1_opt_3  :  array_  %MARK%  
 index is: 606, source_index: 233, before: array_, after: %NULL%
unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, source_index: 234, before: %NULL%, after: gcnew
unary_expr_@1_decl_1  :  gcnew  %MARK%  
 index is: 608, source_index: 234, before: gcnew, after: %NULL%
unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, source_index: 235, before: %NULL%, after: new
unary_expr_@1_decl_1  :  new  %MARK%  
 index is: 610, source_index: 235, before: new, after: %NULL%
unary_op_  :  %MARK%  !  
 index is: 611, source_index: 236, before: %NULL%, after: !
unary_op_  :  !  %MARK%  
 index is: 612, source_index: 236, before: !, after: %NULL%
unary_op_  :  %MARK%  -  
 index is: 613, source_index: 237, before: %NULL%, after: -
unary_op_  :  -  %MARK%  
 index is: 614, source_index: 237, before: -, after: %NULL%
unary_op_  :  %MARK%  &  
 index is: 615, source_index: 238, before: %NULL%, after: &
unary_op_  :  &  %MARK%  
 index is: 616, source_index: 238, before: &, after: %NULL%
unary_op_  :  %MARK%  *  
 index is: 617, source_index: 239, before: %NULL%, after: *
unary_op_  :  *  %MARK%  
 index is: 618, source_index: 239, before: *, after: %NULL%
unary_op_  :  %MARK%  --  
 index is: 619, source_index: 240, before: %NULL%, after: --
unary_op_  :  --  %MARK%  
 index is: 620, source_index: 240, before: --, after: %NULL%
unary_op_  :  %MARK%  ++  
 index is: 621, source_index: 241, before: %NULL%, after: ++
unary_op_  :  ++  %MARK%  
 index is: 622, source_index: 241, before: ++, after: %NULL%
unary_op_  :  %MARK%  typeid  
 index is: 623, source_index: 242, before: %NULL%, after: typeid
unary_op_  :  typeid  %MARK%  
 index is: 624, source_index: 242, before: typeid, after: %NULL%
postfix_expr_  :  %MARK%  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  
 index is: 625, source_index: 243, before: %NULL%, after: postfix_expr_@0_decl_1
postfix_expr_  :  postfix_expr_@0_decl_1  %MARK%  postfix_expr_@0_opt_2  
 index is: 626, source_index: 243, before: postfix_expr_@0_decl_1, after: postfix_expr_@0_opt_2
postfix_expr_  :  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  %MARK%  
 index is: 627, source_index: 243, before: postfix_expr_@0_opt_2, after: %NULL%
postfix_expr_@0_opt_2  :  %MARK%  
 index is: 628, source_index: 244, before: %NULL%, after: %NULL%
postfix_expr_@0_opt_2  :  %MARK%  postfix_expr_  
 index is: 629, source_index: 245, before: %NULL%, after: postfix_expr_
postfix_expr_@0_opt_2  :  postfix_expr_  %MARK%  
 index is: 630, source_index: 245, before: postfix_expr_, after: %NULL%
postfix_expr_@0_decl_1  :  %MARK%  ...  
 index is: 631, source_index: 246, before: %NULL%, after: ...
postfix_expr_@0_decl_1  :  ...  %MARK%  
 index is: 632, source_index: 246, before: ..., after: %NULL%
postfix_expr_@0_decl_1  :  %MARK%  --  
 index is: 633, source_index: 247, before: %NULL%, after: --
postfix_expr_@0_decl_1  :  --  %MARK%  
 index is: 634, source_index: 247, before: --, after: %NULL%
postfix_expr_@0_decl_1  :  %MARK%  ++  
 index is: 635, source_index: 248, before: %NULL%, after: ++
postfix_expr_@0_decl_1  :  ++  %MARK%  
 index is: 636, source_index: 248, before: ++, after: %NULL%
prim_expr_  :  %MARK%  constant_  
 index is: 637, source_index: 249, before: %NULL%, after: constant_
prim_expr_  :  constant_  %MARK%  
 index is: 638, source_index: 249, before: constant_, after: %NULL%
prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, source_index: 250, before: %NULL%, after: visit_expr_
prim_expr_  :  visit_expr_  %MARK%  
 index is: 640, source_index: 250, before: visit_expr_, after: %NULL%
visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, source_index: 251, before: %NULL%, after: object_
visit_expr_  :  object_  %MARK%  visit_expr_@0_opt_2  
 index is: 642, source_index: 251, before: object_, after: visit_expr_@0_opt_2
visit_expr_  :  object_  visit_expr_@0_opt_2  %MARK%  
 index is: 643, source_index: 251, before: visit_expr_@0_opt_2, after: %NULL%
visit_expr_@0_opt_2  :  %MARK%  
 index is: 644, source_index: 252, before: %NULL%, after: %NULL%
visit_expr_@0_opt_2  :  %MARK%  visit_expr_@0_opt_2@0_decl_1  visit_expr_  
 index is: 645, source_index: 253, before: %NULL%, after: visit_expr_@0_opt_2@0_decl_1
visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  %MARK%  visit_expr_  
 index is: 646, source_index: 253, before: visit_expr_@0_opt_2@0_decl_1, after: visit_expr_
visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  visit_expr_  %MARK%  
 index is: 647, source_index: 253, before: visit_expr_, after: %NULL%
visit_expr_@0_opt_2@0_decl_1  :  %MARK%  .  
 index is: 648, source_index: 254, before: %NULL%, after: .
visit_expr_@0_opt_2@0_decl_1  :  .  %MARK%  
 index is: 649, source_index: 254, before: ., after: %NULL%
visit_expr_@0_opt_2@0_decl_1  :  %MARK%  ->  
 index is: 650, source_index: 255, before: %NULL%, after: ->
visit_expr_@0_opt_2@0_decl_1  :  ->  %MARK%  
 index is: 651, source_index: 255, before: ->, after: %NULL%
object_  :  %MARK%  CHAR  
 index is: 652, source_index: 256, before: %NULL%, after: CHAR
object_  :  CHAR  %MARK%  
 index is: 653, source_index: 256, before: CHAR, after: %NULL%
object_  :  %MARK%  element_  
 index is: 654, source_index: 257, before: %NULL%, after: element_
object_  :  element_  %MARK%  
 index is: 655, source_index: 257, before: element_, after: %NULL%
object_  :  %MARK%  global  
 index is: 656, source_index: 258, before: %NULL%, after: global
object_  :  global  %MARK%  
 index is: 657, source_index: 258, before: global, after: %NULL%
object_  :  %MARK%  local  
 index is: 658, source_index: 259, before: %NULL%, after: local
object_  :  local  %MARK%  
 index is: 659, source_index: 259, before: local, after: %NULL%
object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, source_index: 260, before: %NULL%, after: STR
object_  :  STR  %MARK%  object_@1_opt_2  
 index is: 661, source_index: 260, before: STR, after: object_@1_opt_2
object_  :  STR  object_@1_opt_2  %MARK%  
 index is: 662, source_index: 260, before: object_@1_opt_2, after: %NULL%
object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, source_index: 261, before: %NULL%, after: array_
object_  :  array_  %MARK%  object_@0_opt_2  
 index is: 664, source_index: 261, before: array_, after: object_@0_opt_2
object_  :  array_  object_@0_opt_2  %MARK%  
 index is: 665, source_index: 261, before: object_@0_opt_2, after: %NULL%
object_@1_opt_2  :  %MARK%  
 index is: 666, source_index: 262, before: %NULL%, after: %NULL%
object_@1_opt_2  :  %MARK%  index_  
 index is: 667, source_index: 263, before: %NULL%, after: index_
object_@1_opt_2  :  index_  %MARK%  
 index is: 668, source_index: 263, before: index_, after: %NULL%
object_@0_opt_2  :  %MARK%  
 index is: 669, source_index: 264, before: %NULL%, after: %NULL%
object_@0_opt_2  :  %MARK%  index_  
 index is: 670, source_index: 265, before: %NULL%, after: index_
object_@0_opt_2  :  index_  %MARK%  
 index is: 671, source_index: 265, before: index_, after: %NULL%
element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, source_index: 266, before: %NULL%, after: element_@0_decl_1
element_  :  element_@0_decl_1  %MARK%  element_@0_rep_2  
 index is: 673, source_index: 266, before: element_@0_decl_1, after: element_@0_rep_2
element_  :  element_@0_decl_1  element_@0_rep_2  %MARK%  
 index is: 674, source_index: 266, before: element_@0_rep_2, after: %NULL%
element_@0_rep_2  :  %MARK%  
 index is: 675, source_index: 267, before: %NULL%, after: %NULL%
element_@0_rep_2  :  %MARK%  index_  element_@0_rep_2  
 index is: 676, source_index: 268, before: %NULL%, after: index_
element_@0_rep_2  :  index_  %MARK%  element_@0_rep_2  
 index is: 677, source_index: 268, before: index_, after: element_@0_rep_2
element_@0_rep_2  :  index_  element_@0_rep_2  %MARK%  
 index is: 678, source_index: 268, before: element_@0_rep_2, after: %NULL%
element_@0_rep_2  :  %MARK%  fcall_  element_@0_rep_2  
 index is: 679, source_index: 269, before: %NULL%, after: fcall_
element_@0_rep_2  :  fcall_  %MARK%  element_@0_rep_2  
 index is: 680, source_index: 269, before: fcall_, after: element_@0_rep_2
element_@0_rep_2  :  fcall_  element_@0_rep_2  %MARK%  
 index is: 681, source_index: 269, before: element_@0_rep_2, after: %NULL%
element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, source_index: 270, before: %NULL%, after: (
element_@0_decl_1  :  (  %MARK%  single_expr_  )  
 index is: 683, source_index: 270, before: (, after: single_expr_
element_@0_decl_1  :  (  single_expr_  %MARK%  )  
 index is: 684, source_index: 270, before: single_expr_, after: )
element_@0_decl_1  :  (  single_expr_  )  %MARK%  
 index is: 685, source_index: 270, before: ), after: %NULL%
element_@0_decl_1  :  %MARK%  ID  
 index is: 686, source_index: 271, before: %NULL%, after: ID
element_@0_decl_1  :  ID  %MARK%  
 index is: 687, source_index: 271, before: ID, after: %NULL%
constant_  :  %MARK%  false  
 index is: 688, source_index: 272, before: %NULL%, after: false
constant_  :  false  %MARK%  
 index is: 689, source_index: 272, before: false, after: %NULL%
constant_  :  %MARK%  true  
 index is: 690, source_index: 273, before: %NULL%, after: true
constant_  :  true  %MARK%  
 index is: 691, source_index: 273, before: true, after: %NULL%
constant_  :  %MARK%  null  
 index is: 692, source_index: 274, before: %NULL%, after: null
constant_  :  null  %MARK%  
 index is: 693, source_index: 274, before: null, after: %NULL%
constant_  :  %MARK%  NUM  
 index is: 694, source_index: 275, before: %NULL%, after: NUM
constant_  :  NUM  %MARK%  
 index is: 695, source_index: 275, before: NUM, after: %NULL%
array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, source_index: 276, before: %NULL%, after: {
array_  :  {  %MARK%  array_@0_opt_2  }  
 index is: 697, source_index: 276, before: {, after: array_@0_opt_2
array_  :  {  array_@0_opt_2  %MARK%  }  
 index is: 698, source_index: 276, before: array_@0_opt_2, after: }
array_  :  {  array_@0_opt_2  }  %MARK%  
 index is: 699, source_index: 276, before: }, after: %NULL%
array_@0_opt_2  :  %MARK%  
 index is: 700, source_index: 277, before: %NULL%, after: %NULL%
array_@0_opt_2  :  %MARK%  expr_  
 index is: 701, source_index: 278, before: %NULL%, after: expr_
array_@0_opt_2  :  expr_  %MARK%  
 index is: 702, source_index: 278, before: expr_, after: %NULL%
fcall_  :  %MARK%  (  fcall_@0_opt_2  )  
 index is: 703, source_index: 279, before: %NULL%, after: (
fcall_  :  (  %MARK%  fcall_@0_opt_2  )  
 index is: 704, source_index: 279, before: (, after: fcall_@0_opt_2
fcall_  :  (  fcall_@0_opt_2  %MARK%  )  
 index is: 705, source_index: 279, before: fcall_@0_opt_2, after: )
fcall_  :  (  fcall_@0_opt_2  )  %MARK%  
 index is: 706, source_index: 279, before: ), after: %NULL%
fcall_@0_opt_2  :  %MARK%  
 index is: 707, source_index: 280, before: %NULL%, after: %NULL%
fcall_@0_opt_2  :  %MARK%  expr_  
 index is: 708, source_index: 281, before: %NULL%, after: expr_
fcall_@0_opt_2  :  expr_  %MARK%  
 index is: 709, source_index: 281, before: expr_, after: %NULL%
index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, source_index: 282, before: %NULL%, after: [
index_  :  [  %MARK%  basic_expr_  ]  
 index is: 711, source_index: 282, before: [, after: basic_expr_
index_  :  [  basic_expr_  %MARK%  ]  
 index is: 712, source_index: 282, before: basic_expr_, after: ]
index_  :  [  basic_expr_  ]  %MARK%  
 index is: 713, source_index: 282, before: ], after: %NULL%



###########
ADD TARGETS
###########
%start%  :  %MARK%  begin_  
 index is: 0, term type: to_deduce, before: %NULL%, after: begin_
TARGET LIST: 
target index: 1  , change_value: begin_
target index: 2  , change_value: %NULL%

%start%  :  begin_  %MARK%  
 index is: 1, term type: accept, before: begin_, after: %NULL%
TARGET LIST: 

begin_  :  %MARK%  stmts_  
 index is: 2, term type: to_deduce, before: %NULL%, after: stmts_
TARGET LIST: 
target index: 3  , change_value: stmts_
target index: 14  , change_value: %NULL%

begin_  :  stmts_  %MARK%  
 index is: 3, term type: deduce, before: stmts_, after: %NULL%
TARGET LIST: 

ignore_  :  %MARK%  ignore_@0_rep_1  
 index is: 4, term type: to_deduce, before: %NULL%, after: ignore_@0_rep_1
TARGET LIST: 
target index: 5  , change_value: ignore_@0_rep_1
target index: 6  , change_value: %NULL%
target index: 7  , change_value: %NULL%

ignore_  :  ignore_@0_rep_1  %MARK%  
 index is: 5, term type: deduce, before: ignore_@0_rep_1, after: %NULL%
TARGET LIST: 

ignore_@0_rep_1  :  %MARK%  
 index is: 6, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

ignore_@0_rep_1  :  %MARK%  ENDL  ignore_@0_rep_1  
 index is: 7, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 8  , change_value: ENDL

ignore_@0_rep_1  :  ENDL  %MARK%  ignore_@0_rep_1  
 index is: 8, term type: to_deduce, before: ENDL, after: ignore_@0_rep_1
TARGET LIST: 
target index: 6  , change_value: %NULL%
target index: 7  , change_value: %NULL%
target index: 9  , change_value: ignore_@0_rep_1

ignore_@0_rep_1  :  ENDL  ignore_@0_rep_1  %MARK%  
 index is: 9, term type: deduce, before: ignore_@0_rep_1, after: %NULL%
TARGET LIST: 

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  ;  %MARK%  
 index is: 11, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

endline_  :  ENDL  %MARK%  
 index is: 13, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_  :  stmts_@0_rep_1  %MARK%  
 index is: 15, term type: deduce, before: stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

stmts_@0_rep_1  :  statement_  %MARK%  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 18, term type: to_deduce, before: statement_, after: stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 19  , change_value: stmts_@0_rep_1@0_rep_2
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%

stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  %MARK%  stmts_@0_rep_1  
 index is: 19, term type: to_deduce, before: stmts_@0_rep_1@0_rep_2, after: stmts_@0_rep_1
TARGET LIST: 
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%
target index: 20  , change_value: stmts_@0_rep_1

stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  %MARK%  
 index is: 20, term type: deduce, before: stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 21, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  stmts_@0_rep_1@0_rep_2  
 index is: 22, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 23  , change_value: ENDL

stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  stmts_@0_rep_1@0_rep_2  
 index is: 23, term type: to_deduce, before: ENDL, after: stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%
target index: 24  , change_value: stmts_@0_rep_1@0_rep_2

stmts_@0_rep_1@0_rep_2  :  ENDL  stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 24, term type: deduce, before: stmts_@0_rep_1@0_rep_2, after: %NULL%
TARGET LIST: 

decl_stmts_  :  %MARK%  decl_stmts_@0_rep_1  
 index is: 25, term type: to_deduce, before: %NULL%, after: decl_stmts_@0_rep_1
TARGET LIST: 
target index: 26  , change_value: decl_stmts_@0_rep_1
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%

decl_stmts_  :  decl_stmts_@0_rep_1  %MARK%  
 index is: 26, term type: deduce, before: decl_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1  :  %MARK%  
 index is: 27, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1  :  %MARK%  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 28, term type: to_deduce, before: %NULL%, after: declaration_
TARGET LIST: 
target index: 29  , change_value: declaration_
target index: 84  , change_value: %NULL%
target index: 86  , change_value: %NULL%
target index: 88  , change_value: %NULL%
target index: 90  , change_value: %NULL%
target index: 92  , change_value: %NULL%
target index: 94  , change_value: %NULL%

decl_stmts_@0_rep_1  :  declaration_  %MARK%  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 29, term type: to_deduce, before: declaration_, after: decl_stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 30  , change_value: decl_stmts_@0_rep_1@0_rep_2
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%

decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  %MARK%  decl_stmts_@0_rep_1  
 index is: 30, term type: to_deduce, before: decl_stmts_@0_rep_1@0_rep_2, after: decl_stmts_@0_rep_1
TARGET LIST: 
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%
target index: 31  , change_value: decl_stmts_@0_rep_1

decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  %MARK%  
 index is: 31, term type: deduce, before: decl_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 32, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  decl_stmts_@0_rep_1@0_rep_2  
 index is: 33, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 34  , change_value: ENDL

decl_stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  decl_stmts_@0_rep_1@0_rep_2  
 index is: 34, term type: to_deduce, before: ENDL, after: decl_stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%
target index: 35  , change_value: decl_stmts_@0_rep_1@0_rep_2

decl_stmts_@0_rep_1@0_rep_2  :  ENDL  decl_stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 35, term type: deduce, before: decl_stmts_@0_rep_1@0_rep_2, after: %NULL%
TARGET LIST: 

endblock_  :  %MARK%  catch_stmt_  
 index is: 36, term type: to_deduce, before: %NULL%, after: catch_stmt_
TARGET LIST: 
target index: 37  , change_value: catch_stmt_
target index: 358  , change_value: %NULL%

endblock_  :  catch_stmt_  %MARK%  
 index is: 37, term type: deduce, before: catch_stmt_, after: %NULL%
TARGET LIST: 

endblock_  :  %MARK%  until_stmt_  
 index is: 38, term type: to_deduce, before: %NULL%, after: until_stmt_
TARGET LIST: 
target index: 39  , change_value: until_stmt_
target index: 268  , change_value: %NULL%

endblock_  :  until_stmt_  %MARK%  
 index is: 39, term type: deduce, before: until_stmt_, after: %NULL%
TARGET LIST: 

endblock_  :  %MARK%  else_stmt_  
 index is: 40, term type: to_deduce, before: %NULL%, after: else_stmt_
TARGET LIST: 
target index: 41  , change_value: else_stmt_
target index: 208  , change_value: %NULL%

endblock_  :  else_stmt_  %MARK%  
 index is: 41, term type: deduce, before: else_stmt_, after: %NULL%
TARGET LIST: 

endblock_  :  %MARK%  end_stmt_  
 index is: 42, term type: to_deduce, before: %NULL%, after: end_stmt_
TARGET LIST: 
target index: 43  , change_value: end_stmt_
target index: 400  , change_value: %NULL%

endblock_  :  end_stmt_  %MARK%  
 index is: 43, term type: deduce, before: end_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  expr_stmt_  %MARK%  
 index is: 45, term type: deduce, before: expr_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  class_stmt_  %MARK%  
 index is: 47, term type: deduce, before: class_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  throw_stmt_  %MARK%  
 index is: 49, term type: deduce, before: throw_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  try_stmt_  %MARK%  
 index is: 51, term type: deduce, before: try_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  return_stmt_  %MARK%  
 index is: 53, term type: deduce, before: return_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  function_stmt_  %MARK%  
 index is: 55, term type: deduce, before: function_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  control_stmt_  %MARK%  
 index is: 57, term type: deduce, before: control_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  foreach_stmt_  %MARK%  
 index is: 59, term type: deduce, before: foreach_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  for_stmt_  %MARK%  
 index is: 61, term type: deduce, before: for_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  loop_stmt_  %MARK%  
 index is: 63, term type: deduce, before: loop_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  while_stmt_  %MARK%  
 index is: 65, term type: deduce, before: while_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  switch_stmt_  %MARK%  
 index is: 67, term type: deduce, before: switch_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  if_stmt_  %MARK%  
 index is: 69, term type: deduce, before: if_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  using_stmt_  %MARK%  
 index is: 71, term type: deduce, before: using_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  namespace_stmt_  %MARK%  
 index is: 73, term type: deduce, before: namespace_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  block_stmt_  %MARK%  
 index is: 75, term type: deduce, before: block_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  var_stmt_  %MARK%  
 index is: 77, term type: deduce, before: var_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  import_stmt_  %MARK%  
 index is: 79, term type: deduce, before: import_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  package_stmt_  %MARK%  
 index is: 81, term type: deduce, before: package_stmt_, after: %NULL%
TARGET LIST: 

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

statement_  :  prep_stmt_  %MARK%  
 index is: 83, term type: deduce, before: prep_stmt_, after: %NULL%
TARGET LIST: 

declaration_  :  %MARK%  class_stmt_  
 index is: 84, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 85  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

declaration_  :  class_stmt_  %MARK%  
 index is: 85, term type: deduce, before: class_stmt_, after: %NULL%
TARGET LIST: 

declaration_  :  %MARK%  function_stmt_  
 index is: 86, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 87  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

declaration_  :  function_stmt_  %MARK%  
 index is: 87, term type: deduce, before: function_stmt_, after: %NULL%
TARGET LIST: 

declaration_  :  %MARK%  using_stmt_  
 index is: 88, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 89  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

declaration_  :  using_stmt_  %MARK%  
 index is: 89, term type: deduce, before: using_stmt_, after: %NULL%
TARGET LIST: 

declaration_  :  %MARK%  var_stmt_  
 index is: 90, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 91  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

declaration_  :  var_stmt_  %MARK%  
 index is: 91, term type: deduce, before: var_stmt_, after: %NULL%
TARGET LIST: 

declaration_  :  %MARK%  namespace_stmt_  
 index is: 92, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 93  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

declaration_  :  namespace_stmt_  %MARK%  
 index is: 93, term type: deduce, before: namespace_stmt_, after: %NULL%
TARGET LIST: 

declaration_  :  %MARK%  prep_stmt_  
 index is: 94, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 95  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

declaration_  :  prep_stmt_  %MARK%  
 index is: 95, term type: deduce, before: prep_stmt_, after: %NULL%
TARGET LIST: 

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

prep_stmt_  :  PREP  %MARK%  ENDL  
 index is: 97, term type: shift, before: PREP, after: ENDL
TARGET LIST: 
target index: 98  , change_value: ENDL

prep_stmt_  :  PREP  ENDL  %MARK%  
 index is: 98, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

package_stmt_  :  package  %MARK%  ID  endline_  
 index is: 100, term type: shift, before: package, after: ID
TARGET LIST: 
target index: 101  , change_value: ID

package_stmt_  :  package  ID  %MARK%  endline_  
 index is: 101, term type: to_deduce, before: ID, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 102  , change_value: endline_

package_stmt_  :  package  ID  endline_  %MARK%  
 index is: 102, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

import_stmt_  :  import  %MARK%  import_list_  endline_  
 index is: 104, term type: to_deduce, before: import, after: import_list_
TARGET LIST: 
target index: 105  , change_value: import_list_
target index: 118  , change_value: %NULL%

import_stmt_  :  import  import_list_  %MARK%  endline_  
 index is: 105, term type: to_deduce, before: import_list_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 106  , change_value: endline_

import_stmt_  :  import  import_list_  endline_  %MARK%  
 index is: 106, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 108  , change_value: ID

module_list_  :  ID  %MARK%  module_list_@0_opt_2  
 index is: 108, term type: to_deduce, before: ID, after: module_list_@0_opt_2
TARGET LIST: 
target index: 109  , change_value: module_list_@0_opt_2
target index: 110  , change_value: %NULL%
target index: 111  , change_value: %NULL%

module_list_  :  ID  module_list_@0_opt_2  %MARK%  
 index is: 109, term type: deduce, before: module_list_@0_opt_2, after: %NULL%
TARGET LIST: 

module_list_@0_opt_2  :  %MARK%  
 index is: 110, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

module_list_@0_opt_2  :  %MARK%  .  module_list_@0_opt_2@0_decl_2  
 index is: 111, term type: shift, before: %NULL%, after: .
TARGET LIST: 
target index: 112  , change_value: .

module_list_@0_opt_2  :  .  %MARK%  module_list_@0_opt_2@0_decl_2  
 index is: 112, term type: to_deduce, before: ., after: module_list_@0_opt_2@0_decl_2
TARGET LIST: 
target index: 113  , change_value: module_list_@0_opt_2@0_decl_2
target index: 114  , change_value: %NULL%
target index: 116  , change_value: %NULL%

module_list_@0_opt_2  :  .  module_list_@0_opt_2@0_decl_2  %MARK%  
 index is: 113, term type: deduce, before: module_list_@0_opt_2@0_decl_2, after: %NULL%
TARGET LIST: 

module_list_@0_opt_2@0_decl_2  :  %MARK%  module_list_  
 index is: 114, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 115  , change_value: module_list_

module_list_@0_opt_2@0_decl_2  :  module_list_  %MARK%  
 index is: 115, term type: deduce, before: module_list_, after: %NULL%
TARGET LIST: 

module_list_@0_opt_2@0_decl_2  :  %MARK%  *  
 index is: 116, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 117  , change_value: *

module_list_@0_opt_2@0_decl_2  :  *  %MARK%  
 index is: 117, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

import_list_  :  %MARK%  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 118, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 119  , change_value: module_list_

import_list_  :  module_list_  %MARK%  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 119, term type: to_deduce, before: module_list_, after: import_list_@0_opt_2
TARGET LIST: 
target index: 120  , change_value: import_list_@0_opt_2
target index: 126  , change_value: %NULL%
target index: 127  , change_value: %NULL%

import_list_  :  module_list_  import_list_@0_opt_2  %MARK%  import_list_@0_opt_3  
 index is: 120, term type: to_deduce, before: import_list_@0_opt_2, after: import_list_@0_opt_3
TARGET LIST: 
target index: 121  , change_value: import_list_@0_opt_3
target index: 122  , change_value: %NULL%
target index: 123  , change_value: %NULL%

import_list_  :  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  %MARK%  
 index is: 121, term type: deduce, before: import_list_@0_opt_3, after: %NULL%
TARGET LIST: 

import_list_@0_opt_3  :  %MARK%  
 index is: 122, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

import_list_@0_opt_3  :  %MARK%  ,  import_list_  
 index is: 123, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 124  , change_value: ,

import_list_@0_opt_3  :  ,  %MARK%  import_list_  
 index is: 124, term type: to_deduce, before: ,, after: import_list_
TARGET LIST: 
target index: 118  , change_value: %NULL%
target index: 125  , change_value: import_list_

import_list_@0_opt_3  :  ,  import_list_  %MARK%  
 index is: 125, term type: deduce, before: import_list_, after: %NULL%
TARGET LIST: 

import_list_@0_opt_2  :  %MARK%  
 index is: 126, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

import_list_@0_opt_2  :  %MARK%  as  ID  
 index is: 127, term type: shift, before: %NULL%, after: as
TARGET LIST: 
target index: 128  , change_value: as

import_list_@0_opt_2  :  as  %MARK%  ID  
 index is: 128, term type: shift, before: as, after: ID
TARGET LIST: 
target index: 129  , change_value: ID

import_list_@0_opt_2  :  as  ID  %MARK%  
 index is: 129, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

var_def_  :  %MARK%  var_list_  
 index is: 130, term type: to_deduce, before: %NULL%, after: var_list_
TARGET LIST: 
target index: 131  , change_value: var_list_
target index: 162  , change_value: %NULL%

var_def_  :  var_list_  %MARK%  
 index is: 131, term type: deduce, before: var_list_, after: %NULL%
TARGET LIST: 

var_def_  :  %MARK%  var_bind_  =  basic_expr_  
 index is: 132, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 133  , change_value: var_bind_
target index: 146  , change_value: %NULL%

var_def_  :  var_bind_  %MARK%  =  basic_expr_  
 index is: 133, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 134  , change_value: =

var_def_  :  var_bind_  =  %MARK%  basic_expr_  
 index is: 134, term type: to_deduce, before: =, after: basic_expr_
TARGET LIST: 
target index: 135  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

var_def_  :  var_bind_  =  basic_expr_  %MARK%  
 index is: 135, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

var_stmt_  :  var_stmt_@0_decl_1  %MARK%  var_def_  endline_  
 index is: 137, term type: to_deduce, before: var_stmt_@0_decl_1, after: var_def_
TARGET LIST: 
target index: 130  , change_value: %NULL%
target index: 132  , change_value: %NULL%
target index: 138  , change_value: var_def_

var_stmt_  :  var_stmt_@0_decl_1  var_def_  %MARK%  endline_  
 index is: 138, term type: to_deduce, before: var_def_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 139  , change_value: endline_

var_stmt_  :  var_stmt_@0_decl_1  var_def_  endline_  %MARK%  
 index is: 139, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  constant  %MARK%  
 index is: 141, term type: deduce, before: constant, after: %NULL%
TARGET LIST: 

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  link  %MARK%  
 index is: 143, term type: deduce, before: link, after: %NULL%
TARGET LIST: 

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

var_stmt_@0_decl_1  :  var  %MARK%  
 index is: 145, term type: deduce, before: var, after: %NULL%
TARGET LIST: 

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

var_bind_  :  (  %MARK%  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 147, term type: to_deduce, before: (, after: var_bind_list_
TARGET LIST: 
target index: 148  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

var_bind_  :  (  var_bind_list_  %MARK%  var_bind_@0_rep_3  )  
 index is: 148, term type: to_deduce, before: var_bind_list_, after: var_bind_@0_rep_3
TARGET LIST: 
target index: 149  , change_value: var_bind_@0_rep_3
target index: 151  , change_value: %NULL%
target index: 152  , change_value: %NULL%

var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  %MARK%  )  
 index is: 149, term type: shift, before: var_bind_@0_rep_3, after: )
TARGET LIST: 
target index: 150  , change_value: )

var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  )  %MARK%  
 index is: 150, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

var_bind_@0_rep_3  :  %MARK%  
 index is: 151, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

var_bind_@0_rep_3  :  %MARK%  ,  var_bind_list_  var_bind_@0_rep_3  
 index is: 152, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 153  , change_value: ,

var_bind_@0_rep_3  :  ,  %MARK%  var_bind_list_  var_bind_@0_rep_3  
 index is: 153, term type: to_deduce, before: ,, after: var_bind_list_
TARGET LIST: 
target index: 154  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

var_bind_@0_rep_3  :  ,  var_bind_list_  %MARK%  var_bind_@0_rep_3  
 index is: 154, term type: to_deduce, before: var_bind_list_, after: var_bind_@0_rep_3
TARGET LIST: 
target index: 151  , change_value: %NULL%
target index: 152  , change_value: %NULL%
target index: 155  , change_value: var_bind_@0_rep_3

var_bind_@0_rep_3  :  ,  var_bind_list_  var_bind_@0_rep_3  %MARK%  
 index is: 155, term type: deduce, before: var_bind_@0_rep_3, after: %NULL%
TARGET LIST: 

var_bind_list_  :  %MARK%  var_bind_  
 index is: 156, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 157  , change_value: var_bind_

var_bind_list_  :  var_bind_  %MARK%  
 index is: 157, term type: deduce, before: var_bind_, after: %NULL%
TARGET LIST: 

var_bind_list_  :  %MARK%  ...  
 index is: 158, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 159  , change_value: ...

var_bind_list_  :  ...  %MARK%  
 index is: 159, term type: deduce, before: ..., after: %NULL%
TARGET LIST: 

var_bind_list_  :  %MARK%  ID  
 index is: 160, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 161  , change_value: ID

var_bind_list_  :  ID  %MARK%  
 index is: 161, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

var_list_  :  %MARK%  ID  =  single_expr_  var_list_@0_opt_4  
 index is: 162, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 163  , change_value: ID

var_list_  :  ID  %MARK%  =  single_expr_  var_list_@0_opt_4  
 index is: 163, term type: shift, before: ID, after: =
TARGET LIST: 
target index: 164  , change_value: =

var_list_  :  ID  =  %MARK%  single_expr_  var_list_@0_opt_4  
 index is: 164, term type: to_deduce, before: =, after: single_expr_
TARGET LIST: 
target index: 165  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

var_list_  :  ID  =  single_expr_  %MARK%  var_list_@0_opt_4  
 index is: 165, term type: to_deduce, before: single_expr_, after: var_list_@0_opt_4
TARGET LIST: 
target index: 166  , change_value: var_list_@0_opt_4
target index: 167  , change_value: %NULL%
target index: 168  , change_value: %NULL%

var_list_  :  ID  =  single_expr_  var_list_@0_opt_4  %MARK%  
 index is: 166, term type: deduce, before: var_list_@0_opt_4, after: %NULL%
TARGET LIST: 

var_list_@0_opt_4  :  %MARK%  
 index is: 167, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

var_list_@0_opt_4  :  %MARK%  ,  var_list_  
 index is: 168, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 169  , change_value: ,

var_list_@0_opt_4  :  ,  %MARK%  var_list_  
 index is: 169, term type: to_deduce, before: ,, after: var_list_
TARGET LIST: 
target index: 162  , change_value: %NULL%
target index: 170  , change_value: var_list_

var_list_@0_opt_4  :  ,  var_list_  %MARK%  
 index is: 170, term type: deduce, before: var_list_, after: %NULL%
TARGET LIST: 

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

block_stmt_  :  block  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 172, term type: shift, before: block, after: ENDL
TARGET LIST: 
target index: 173  , change_value: ENDL

block_stmt_  :  block  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 173, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 174  , change_value: stmts_

block_stmt_  :  block  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 174, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 175  , change_value: end

block_stmt_  :  block  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 175, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 176  , change_value: ENDL

block_stmt_  :  block  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 176, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

namespace_stmt_  :  namespace  %MARK%  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 178, term type: shift, before: namespace, after: ID
TARGET LIST: 
target index: 179  , change_value: ID

namespace_stmt_  :  namespace  ID  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 179, term type: shift, before: ID, after: ENDL
TARGET LIST: 
target index: 180  , change_value: ENDL

namespace_stmt_  :  namespace  ID  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 180, term type: to_deduce, before: ENDL, after: decl_stmts_
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 181  , change_value: decl_stmts_

namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 181, term type: shift, before: decl_stmts_, after: end
TARGET LIST: 
target index: 182  , change_value: end

namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 182, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 183  , change_value: ENDL

namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 183, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

using_stmt_  :  using  %MARK%  using_list_  endline  
 index is: 185, term type: to_deduce, before: using, after: using_list_
TARGET LIST: 
target index: 186  , change_value: using_list_
target index: 188  , change_value: %NULL%

using_stmt_  :  using  using_list_  %MARK%  endline  
 index is: 186, term type: shift, before: using_list_, after: endline
TARGET LIST: 
target index: 187  , change_value: endline

using_stmt_  :  using  using_list_  endline  %MARK%  
 index is: 187, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

using_list_  :  %MARK%  module_list_  using_list_@0_opt_2  
 index is: 188, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 189  , change_value: module_list_

using_list_  :  module_list_  %MARK%  using_list_@0_opt_2  
 index is: 189, term type: to_deduce, before: module_list_, after: using_list_@0_opt_2
TARGET LIST: 
target index: 190  , change_value: using_list_@0_opt_2
target index: 191  , change_value: %NULL%
target index: 192  , change_value: %NULL%

using_list_  :  module_list_  using_list_@0_opt_2  %MARK%  
 index is: 190, term type: deduce, before: using_list_@0_opt_2, after: %NULL%
TARGET LIST: 

using_list_@0_opt_2  :  %MARK%  
 index is: 191, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

using_list_@0_opt_2  :  %MARK%  ,  using_list_  
 index is: 192, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 193  , change_value: ,

using_list_@0_opt_2  :  ,  %MARK%  using_list_  
 index is: 193, term type: to_deduce, before: ,, after: using_list_
TARGET LIST: 
target index: 188  , change_value: %NULL%
target index: 194  , change_value: using_list_

using_list_@0_opt_2  :  ,  using_list_  %MARK%  
 index is: 194, term type: deduce, before: using_list_, after: %NULL%
TARGET LIST: 

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

if_stmt_  :  if  %MARK%  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 196, term type: to_deduce, before: if, after: basic_expr_
TARGET LIST: 
target index: 197  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

if_stmt_  :  if  basic_expr_  %MARK%  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 197, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 198  , change_value: ENDL

if_stmt_  :  if  basic_expr_  ENDL  %MARK%  stmts_  if_stmt_@0_rep_5  
 index is: 198, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 199  , change_value: stmts_

if_stmt_  :  if  basic_expr_  ENDL  stmts_  %MARK%  if_stmt_@0_rep_5  
 index is: 199, term type: to_deduce, before: stmts_, after: if_stmt_@0_rep_5
TARGET LIST: 
target index: 200  , change_value: if_stmt_@0_rep_5
target index: 201  , change_value: %NULL%
target index: 202  , change_value: %NULL%

if_stmt_  :  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  %MARK%  
 index is: 200, term type: deduce, before: if_stmt_@0_rep_5, after: %NULL%
TARGET LIST: 

if_stmt_@0_rep_5  :  %MARK%  
 index is: 201, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

if_stmt_@0_rep_5  :  %MARK%  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 202, term type: to_deduce, before: %NULL%, after: else_stmt_
TARGET LIST: 
target index: 203  , change_value: else_stmt_
target index: 208  , change_value: %NULL%

if_stmt_@0_rep_5  :  else_stmt_  %MARK%  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 203, term type: to_deduce, before: else_stmt_, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 204  , change_value: stmts_

if_stmt_@0_rep_5  :  else_stmt_  stmts_  %MARK%  end  ENDL  if_stmt_@0_rep_5  
 index is: 204, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 205  , change_value: end

if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  %MARK%  ENDL  if_stmt_@0_rep_5  
 index is: 205, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 206  , change_value: ENDL

if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  %MARK%  if_stmt_@0_rep_5  
 index is: 206, term type: to_deduce, before: ENDL, after: if_stmt_@0_rep_5
TARGET LIST: 
target index: 201  , change_value: %NULL%
target index: 202  , change_value: %NULL%
target index: 207  , change_value: if_stmt_@0_rep_5

if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  %MARK%  
 index is: 207, term type: deduce, before: if_stmt_@0_rep_5, after: %NULL%
TARGET LIST: 

else_stmt_  :  %MARK%  else  else_stmt_@0_opt_2  ENDL  
 index is: 208, term type: shift, before: %NULL%, after: else
TARGET LIST: 
target index: 209  , change_value: else

else_stmt_  :  else  %MARK%  else_stmt_@0_opt_2  ENDL  
 index is: 209, term type: to_deduce, before: else, after: else_stmt_@0_opt_2
TARGET LIST: 
target index: 210  , change_value: else_stmt_@0_opt_2
target index: 212  , change_value: %NULL%
target index: 213  , change_value: %NULL%

else_stmt_  :  else  else_stmt_@0_opt_2  %MARK%  ENDL  
 index is: 210, term type: shift, before: else_stmt_@0_opt_2, after: ENDL
TARGET LIST: 
target index: 211  , change_value: ENDL

else_stmt_  :  else  else_stmt_@0_opt_2  ENDL  %MARK%  
 index is: 211, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

else_stmt_@0_opt_2  :  %MARK%  
 index is: 212, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

else_stmt_@0_opt_2  :  %MARK%  if  basic_expr_  
 index is: 213, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 214  , change_value: if

else_stmt_@0_opt_2  :  if  %MARK%  basic_expr_  
 index is: 214, term type: to_deduce, before: if, after: basic_expr_
TARGET LIST: 
target index: 215  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

else_stmt_@0_opt_2  :  if  basic_expr_  %MARK%  
 index is: 215, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

switch_stmt_  :  switch  %MARK%  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 217, term type: to_deduce, before: switch, after: basic_expr_
TARGET LIST: 
target index: 218  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

switch_stmt_  :  switch  basic_expr_  %MARK%  ENDL  switch_stmts_  end  ENDL  
 index is: 218, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 219  , change_value: ENDL

switch_stmt_  :  switch  basic_expr_  ENDL  %MARK%  switch_stmts_  end  ENDL  
 index is: 219, term type: to_deduce, before: ENDL, after: switch_stmts_
TARGET LIST: 
target index: 220  , change_value: switch_stmts_
target index: 223  , change_value: %NULL%

switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  %MARK%  end  ENDL  
 index is: 220, term type: shift, before: switch_stmts_, after: end
TARGET LIST: 
target index: 221  , change_value: end

switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  %MARK%  ENDL  
 index is: 221, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 222  , change_value: ENDL

switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  %MARK%  
 index is: 222, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

switch_stmts_  :  %MARK%  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  
 index is: 223, term type: to_deduce, before: %NULL%, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 224  , change_value: switch_stmts_@0_rep_1
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 234  , change_value: %NULL%

switch_stmts_  :  switch_stmts_@0_rep_1  %MARK%  switch_stmts_@0_rep_2  
 index is: 224, term type: to_deduce, before: switch_stmts_@0_rep_1, after: switch_stmts_@0_rep_2
TARGET LIST: 
target index: 225  , change_value: switch_stmts_@0_rep_2
target index: 226  , change_value: %NULL%
target index: 227  , change_value: %NULL%

switch_stmts_  :  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  %MARK%  
 index is: 225, term type: deduce, before: switch_stmts_@0_rep_2, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_2  :  %MARK%  
 index is: 226, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_2  :  %MARK%  ENDL  switch_stmts_@0_rep_2  
 index is: 227, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 228  , change_value: ENDL

switch_stmts_@0_rep_2  :  ENDL  %MARK%  switch_stmts_@0_rep_2  
 index is: 228, term type: to_deduce, before: ENDL, after: switch_stmts_@0_rep_2
TARGET LIST: 
target index: 226  , change_value: %NULL%
target index: 227  , change_value: %NULL%
target index: 229  , change_value: switch_stmts_@0_rep_2

switch_stmts_@0_rep_2  :  ENDL  switch_stmts_@0_rep_2  %MARK%  
 index is: 229, term type: deduce, before: switch_stmts_@0_rep_2, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_1  :  %MARK%  
 index is: 230, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_1  :  %MARK%  switch_default_  switch_stmts_@0_rep_1  
 index is: 231, term type: to_deduce, before: %NULL%, after: switch_default_
TARGET LIST: 
target index: 232  , change_value: switch_default_
target index: 244  , change_value: %NULL%

switch_stmts_@0_rep_1  :  switch_default_  %MARK%  switch_stmts_@0_rep_1  
 index is: 232, term type: to_deduce, before: switch_default_, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 233  , change_value: switch_stmts_@0_rep_1
target index: 234  , change_value: %NULL%

switch_stmts_@0_rep_1  :  switch_default_  switch_stmts_@0_rep_1  %MARK%  
 index is: 233, term type: deduce, before: switch_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_1  :  %MARK%  switch_case_  switch_stmts_@0_rep_1  
 index is: 234, term type: to_deduce, before: %NULL%, after: switch_case_
TARGET LIST: 
target index: 235  , change_value: switch_case_
target index: 237  , change_value: %NULL%

switch_stmts_@0_rep_1  :  switch_case_  %MARK%  switch_stmts_@0_rep_1  
 index is: 235, term type: to_deduce, before: switch_case_, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 234  , change_value: %NULL%
target index: 236  , change_value: switch_stmts_@0_rep_1

switch_stmts_@0_rep_1  :  switch_case_  switch_stmts_@0_rep_1  %MARK%  
 index is: 236, term type: deduce, before: switch_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

switch_case_  :  %MARK%  case  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 237, term type: shift, before: %NULL%, after: case
TARGET LIST: 
target index: 238  , change_value: case

switch_case_  :  case  %MARK%  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 238, term type: to_deduce, before: case, after: logic_or_expr_
TARGET LIST: 
target index: 239  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

switch_case_  :  case  logic_or_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 239, term type: shift, before: logic_or_expr_, after: ENDL
TARGET LIST: 
target index: 240  , change_value: ENDL

switch_case_  :  case  logic_or_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 240, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 241  , change_value: stmts_

switch_case_  :  case  logic_or_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 241, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 242  , change_value: end

switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 242, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 243  , change_value: ENDL

switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 243, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

switch_default_  :  %MARK%  default  ENDL  stmts_  end  ENDL  
 index is: 244, term type: shift, before: %NULL%, after: default
TARGET LIST: 
target index: 245  , change_value: default

switch_default_  :  default  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 245, term type: shift, before: default, after: ENDL
TARGET LIST: 
target index: 246  , change_value: ENDL

switch_default_  :  default  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 246, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 247  , change_value: stmts_

switch_default_  :  default  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 247, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 248  , change_value: end

switch_default_  :  default  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 248, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 249  , change_value: ENDL

switch_default_  :  default  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 249, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

while_stmt_  :  while  %MARK%  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 251, term type: to_deduce, before: while, after: basic_expr_
TARGET LIST: 
target index: 252  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

while_stmt_  :  while  basic_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 252, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 253  , change_value: ENDL

while_stmt_  :  while  basic_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 253, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 254  , change_value: stmts_

while_stmt_  :  while  basic_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 254, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 255  , change_value: end

while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 255, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 256  , change_value: ENDL

while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 256, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

loop_stmt_  :  loop  %MARK%  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 258, term type: shift, before: loop, after: ENDL
TARGET LIST: 
target index: 259  , change_value: ENDL

loop_stmt_  :  loop  ENDL  %MARK%  stmts_  loop_stmt_@0_decl_4  
 index is: 259, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 260  , change_value: stmts_

loop_stmt_  :  loop  ENDL  stmts_  %MARK%  loop_stmt_@0_decl_4  
 index is: 260, term type: to_deduce, before: stmts_, after: loop_stmt_@0_decl_4
TARGET LIST: 
target index: 261  , change_value: loop_stmt_@0_decl_4
target index: 262  , change_value: %NULL%
target index: 264  , change_value: %NULL%
target index: 266  , change_value: %NULL%

loop_stmt_  :  loop  ENDL  stmts_  loop_stmt_@0_decl_4  %MARK%  
 index is: 261, term type: deduce, before: loop_stmt_@0_decl_4, after: %NULL%
TARGET LIST: 

loop_stmt_@0_decl_4  :  %MARK%  ENDL  
 index is: 262, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 263  , change_value: ENDL

loop_stmt_@0_decl_4  :  ENDL  %MARK%  
 index is: 263, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

loop_stmt_@0_decl_4  :  %MARK%  end  
 index is: 264, term type: shift, before: %NULL%, after: end
TARGET LIST: 
target index: 265  , change_value: end

loop_stmt_@0_decl_4  :  end  %MARK%  
 index is: 265, term type: deduce, before: end, after: %NULL%
TARGET LIST: 

loop_stmt_@0_decl_4  :  %MARK%  until_stmt_  
 index is: 266, term type: to_deduce, before: %NULL%, after: until_stmt_
TARGET LIST: 
target index: 267  , change_value: until_stmt_
target index: 268  , change_value: %NULL%

loop_stmt_@0_decl_4  :  until_stmt_  %MARK%  
 index is: 267, term type: deduce, before: until_stmt_, after: %NULL%
TARGET LIST: 

until_stmt_  :  %MARK%  until  basic_expr_  ENDL  
 index is: 268, term type: shift, before: %NULL%, after: until
TARGET LIST: 
target index: 269  , change_value: until

until_stmt_  :  until  %MARK%  basic_expr_  ENDL  
 index is: 269, term type: to_deduce, before: until, after: basic_expr_
TARGET LIST: 
target index: 270  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

until_stmt_  :  until  basic_expr_  %MARK%  ENDL  
 index is: 270, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 271  , change_value: ENDL

until_stmt_  :  until  basic_expr_  ENDL  %MARK%  
 index is: 271, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

for_stmt_  :  for  %MARK%  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 273, term type: to_deduce, before: for, after: for_stmt_@0_opt_2
TARGET LIST: 
target index: 274  , change_value: for_stmt_@0_opt_2
target index: 294  , change_value: %NULL%
target index: 295  , change_value: %NULL%

for_stmt_  :  for  for_stmt_@0_opt_2  %MARK%  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 274, term type: to_deduce, before: for_stmt_@0_opt_2, after: for_stmt_@0_decl_3
TARGET LIST: 
target index: 275  , change_value: for_stmt_@0_decl_3
target index: 290  , change_value: %NULL%
target index: 292  , change_value: %NULL%

for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  %MARK%  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 275, term type: to_deduce, before: for_stmt_@0_decl_3, after: for_stmt_@0_opt_4
TARGET LIST: 
target index: 276  , change_value: for_stmt_@0_opt_4
target index: 287  , change_value: %NULL%
target index: 288  , change_value: %NULL%

for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  %MARK%  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 276, term type: to_deduce, before: for_stmt_@0_opt_4, after: for_stmt_@0_decl_5
TARGET LIST: 
target index: 277  , change_value: for_stmt_@0_decl_5
target index: 283  , change_value: %NULL%
target index: 285  , change_value: %NULL%

for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  %MARK%  for_stmt_@0_opt_6  for_body_  
 index is: 277, term type: to_deduce, before: for_stmt_@0_decl_5, after: for_stmt_@0_opt_6
TARGET LIST: 
target index: 278  , change_value: for_stmt_@0_opt_6
target index: 280  , change_value: %NULL%
target index: 281  , change_value: %NULL%

for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  %MARK%  for_body_  
 index is: 278, term type: to_deduce, before: for_stmt_@0_opt_6, after: for_body_
TARGET LIST: 
target index: 279  , change_value: for_body_
target index: 303  , change_value: %NULL%

for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  %MARK%  
 index is: 279, term type: deduce, before: for_body_, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_6  :  %MARK%  
 index is: 280, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_6  :  %MARK%  basic_expr_  
 index is: 281, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 282  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

for_stmt_@0_opt_6  :  basic_expr_  %MARK%  
 index is: 282, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

for_stmt_@0_decl_5  :  %MARK%  ,  
 index is: 283, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 284  , change_value: ,

for_stmt_@0_decl_5  :  ,  %MARK%  
 index is: 284, term type: deduce, before: ,, after: %NULL%
TARGET LIST: 

for_stmt_@0_decl_5  :  %MARK%  ;  
 index is: 285, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 286  , change_value: ;

for_stmt_@0_decl_5  :  ;  %MARK%  
 index is: 286, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_4  :  %MARK%  
 index is: 287, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_4  :  %MARK%  basic_expr_  
 index is: 288, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 289  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

for_stmt_@0_opt_4  :  basic_expr_  %MARK%  
 index is: 289, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

for_stmt_@0_decl_3  :  %MARK%  ,  
 index is: 290, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 291  , change_value: ,

for_stmt_@0_decl_3  :  ,  %MARK%  
 index is: 291, term type: deduce, before: ,, after: %NULL%
TARGET LIST: 

for_stmt_@0_decl_3  :  %MARK%  ;  
 index is: 292, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 293  , change_value: ;

for_stmt_@0_decl_3  :  ;  %MARK%  
 index is: 293, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_2  :  %MARK%  
 index is: 294, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_2  :  %MARK%  var_def_  
 index is: 295, term type: to_deduce, before: %NULL%, after: var_def_
TARGET LIST: 
target index: 130  , change_value: %NULL%
target index: 132  , change_value: %NULL%
target index: 296  , change_value: var_def_

for_stmt_@0_opt_2  :  var_def_  %MARK%  
 index is: 296, term type: deduce, before: var_def_, after: %NULL%
TARGET LIST: 

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

foreach_stmt_  :  foreach  %MARK%  ID  in  basic_expr_  for_body_  
 index is: 298, term type: shift, before: foreach, after: ID
TARGET LIST: 
target index: 299  , change_value: ID

foreach_stmt_  :  foreach  ID  %MARK%  in  basic_expr_  for_body_  
 index is: 299, term type: shift, before: ID, after: in
TARGET LIST: 
target index: 300  , change_value: in

foreach_stmt_  :  foreach  ID  in  %MARK%  basic_expr_  for_body_  
 index is: 300, term type: to_deduce, before: in, after: basic_expr_
TARGET LIST: 
target index: 301  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

foreach_stmt_  :  foreach  ID  in  basic_expr_  %MARK%  for_body_  
 index is: 301, term type: to_deduce, before: basic_expr_, after: for_body_
TARGET LIST: 
target index: 302  , change_value: for_body_
target index: 303  , change_value: %NULL%

foreach_stmt_  :  foreach  ID  in  basic_expr_  for_body_  %MARK%  
 index is: 302, term type: deduce, before: for_body_, after: %NULL%
TARGET LIST: 

for_body_  :  %MARK%  for_body_@0_decl_1  
 index is: 303, term type: to_deduce, before: %NULL%, after: for_body_@0_decl_1
TARGET LIST: 
target index: 304  , change_value: for_body_@0_decl_1
target index: 305  , change_value: %NULL%
target index: 310  , change_value: %NULL%

for_body_  :  for_body_@0_decl_1  %MARK%  
 index is: 304, term type: deduce, before: for_body_@0_decl_1, after: %NULL%
TARGET LIST: 

for_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 305, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 306  , change_value: ENDL

for_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 306, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 307  , change_value: stmts_

for_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 307, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 308  , change_value: end

for_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 308, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 309  , change_value: ENDL

for_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 309, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

for_body_@0_decl_1  :  %MARK%  do  basic_expr_  endline_  
 index is: 310, term type: shift, before: %NULL%, after: do
TARGET LIST: 
target index: 311  , change_value: do

for_body_@0_decl_1  :  do  %MARK%  basic_expr_  endline_  
 index is: 311, term type: to_deduce, before: do, after: basic_expr_
TARGET LIST: 
target index: 312  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

for_body_@0_decl_1  :  do  basic_expr_  %MARK%  endline_  
 index is: 312, term type: to_deduce, before: basic_expr_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 313  , change_value: endline_

for_body_@0_decl_1  :  do  basic_expr_  endline_  %MARK%  
 index is: 313, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

function_stmt_  :  function  %MARK%  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 315, term type: shift, before: function, after: ID
TARGET LIST: 
target index: 316  , change_value: ID

function_stmt_  :  function  ID  %MARK%  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 316, term type: shift, before: ID, after: (
TARGET LIST: 
target index: 317  , change_value: (

function_stmt_  :  function  ID  (  %MARK%  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 317, term type: to_deduce, before: (, after: function_stmt_@0_opt_4
TARGET LIST: 
target index: 318  , change_value: function_stmt_@0_opt_4
target index: 325  , change_value: %NULL%
target index: 326  , change_value: %NULL%

function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  %MARK%  )  function_stmt_@0_opt_6  function_body_  
 index is: 318, term type: shift, before: function_stmt_@0_opt_4, after: )
TARGET LIST: 
target index: 319  , change_value: )

function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  %MARK%  function_stmt_@0_opt_6  function_body_  
 index is: 319, term type: to_deduce, before: ), after: function_stmt_@0_opt_6
TARGET LIST: 
target index: 320  , change_value: function_stmt_@0_opt_6
target index: 322  , change_value: %NULL%
target index: 323  , change_value: %NULL%

function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  %MARK%  function_body_  
 index is: 320, term type: to_deduce, before: function_stmt_@0_opt_6, after: function_body_
TARGET LIST: 
target index: 321  , change_value: function_body_
target index: 328  , change_value: %NULL%

function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  %MARK%  
 index is: 321, term type: deduce, before: function_body_, after: %NULL%
TARGET LIST: 

function_stmt_@0_opt_6  :  %MARK%  
 index is: 322, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

function_stmt_@0_opt_6  :  %MARK%  override  
 index is: 323, term type: shift, before: %NULL%, after: override
TARGET LIST: 
target index: 324  , change_value: override

function_stmt_@0_opt_6  :  override  %MARK%  
 index is: 324, term type: deduce, before: override, after: %NULL%
TARGET LIST: 

function_stmt_@0_opt_4  :  %MARK%  
 index is: 325, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

function_stmt_@0_opt_4  :  %MARK%  argument_list_  
 index is: 326, term type: to_deduce, before: %NULL%, after: argument_list_
TARGET LIST: 
target index: 327  , change_value: argument_list_
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%

function_stmt_@0_opt_4  :  argument_list_  %MARK%  
 index is: 327, term type: deduce, before: argument_list_, after: %NULL%
TARGET LIST: 

function_body_  :  %MARK%  function_body_@0_decl_1  
 index is: 328, term type: to_deduce, before: %NULL%, after: function_body_@0_decl_1
TARGET LIST: 
target index: 329  , change_value: function_body_@0_decl_1
target index: 330  , change_value: %NULL%
target index: 335  , change_value: %NULL%

function_body_  :  function_body_@0_decl_1  %MARK%  
 index is: 329, term type: deduce, before: function_body_@0_decl_1, after: %NULL%
TARGET LIST: 

function_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 330, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 331  , change_value: ENDL

function_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 331, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 332  , change_value: stmts_

function_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 332, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 333  , change_value: end

function_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 333, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 334  , change_value: ENDL

function_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 334, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

function_body_@0_decl_1  :  %MARK%  {  stmts_  }  
 index is: 335, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 336  , change_value: {

function_body_@0_decl_1  :  {  %MARK%  stmts_  }  
 index is: 336, term type: to_deduce, before: {, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 337  , change_value: stmts_

function_body_@0_decl_1  :  {  stmts_  %MARK%  }  
 index is: 337, term type: shift, before: stmts_, after: }
TARGET LIST: 
target index: 338  , change_value: }

function_body_@0_decl_1  :  {  stmts_  }  %MARK%  
 index is: 338, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

return_stmt_  :  return  %MARK%  return_stmt_@0_opt_2  endline_  
 index is: 340, term type: to_deduce, before: return, after: return_stmt_@0_opt_2
TARGET LIST: 
target index: 341  , change_value: return_stmt_@0_opt_2
target index: 343  , change_value: %NULL%
target index: 344  , change_value: %NULL%

return_stmt_  :  return  return_stmt_@0_opt_2  %MARK%  endline_  
 index is: 341, term type: to_deduce, before: return_stmt_@0_opt_2, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 342  , change_value: endline_

return_stmt_  :  return  return_stmt_@0_opt_2  endline_  %MARK%  
 index is: 342, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

return_stmt_@0_opt_2  :  %MARK%  
 index is: 343, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

return_stmt_@0_opt_2  :  %MARK%  expr_  
 index is: 344, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 345  , change_value: expr_
target index: 403  , change_value: %NULL%

return_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 345, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

try_stmt_  :  try  %MARK%  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 347, term type: shift, before: try, after: ENDL
TARGET LIST: 
target index: 348  , change_value: ENDL

try_stmt_  :  try  ENDL  %MARK%  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 348, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 349  , change_value: stmts_

try_stmt_  :  try  ENDL  stmts_  %MARK%  try_stmt_@0_rep_4  end  ENDL  
 index is: 349, term type: to_deduce, before: stmts_, after: try_stmt_@0_rep_4
TARGET LIST: 
target index: 350  , change_value: try_stmt_@0_rep_4
target index: 353  , change_value: %NULL%
target index: 354  , change_value: %NULL%

try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  %MARK%  end  ENDL  
 index is: 350, term type: shift, before: try_stmt_@0_rep_4, after: end
TARGET LIST: 
target index: 351  , change_value: end

try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  %MARK%  ENDL  
 index is: 351, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 352  , change_value: ENDL

try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  %MARK%  
 index is: 352, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

try_stmt_@0_rep_4  :  %MARK%  
 index is: 353, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

try_stmt_@0_rep_4  :  %MARK%  catch_stmt_  stmts_  try_stmt_@0_rep_4  
 index is: 354, term type: to_deduce, before: %NULL%, after: catch_stmt_
TARGET LIST: 
target index: 355  , change_value: catch_stmt_
target index: 358  , change_value: %NULL%

try_stmt_@0_rep_4  :  catch_stmt_  %MARK%  stmts_  try_stmt_@0_rep_4  
 index is: 355, term type: to_deduce, before: catch_stmt_, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 356  , change_value: stmts_

try_stmt_@0_rep_4  :  catch_stmt_  stmts_  %MARK%  try_stmt_@0_rep_4  
 index is: 356, term type: to_deduce, before: stmts_, after: try_stmt_@0_rep_4
TARGET LIST: 
target index: 353  , change_value: %NULL%
target index: 354  , change_value: %NULL%
target index: 357  , change_value: try_stmt_@0_rep_4

try_stmt_@0_rep_4  :  catch_stmt_  stmts_  try_stmt_@0_rep_4  %MARK%  
 index is: 357, term type: deduce, before: try_stmt_@0_rep_4, after: %NULL%
TARGET LIST: 

catch_stmt_  :  %MARK%  catch  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 358, term type: shift, before: %NULL%, after: catch
TARGET LIST: 
target index: 359  , change_value: catch

catch_stmt_  :  catch  %MARK%  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 359, term type: shift, before: catch, after: ID
TARGET LIST: 
target index: 360  , change_value: ID

catch_stmt_  :  catch  ID  %MARK%  catch_stmt_@0_opt_3  ENDL  
 index is: 360, term type: to_deduce, before: ID, after: catch_stmt_@0_opt_3
TARGET LIST: 
target index: 361  , change_value: catch_stmt_@0_opt_3
target index: 363  , change_value: %NULL%
target index: 364  , change_value: %NULL%

catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  %MARK%  ENDL  
 index is: 361, term type: shift, before: catch_stmt_@0_opt_3, after: ENDL
TARGET LIST: 
target index: 362  , change_value: ENDL

catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  ENDL  %MARK%  
 index is: 362, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

catch_stmt_@0_opt_3  :  %MARK%  
 index is: 363, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

catch_stmt_@0_opt_3  :  %MARK%  :  visit_expr_  
 index is: 364, term type: shift, before: %NULL%, after: :
TARGET LIST: 
target index: 365  , change_value: :

catch_stmt_@0_opt_3  :  :  %MARK%  visit_expr_  
 index is: 365, term type: to_deduce, before: :, after: visit_expr_
TARGET LIST: 
target index: 366  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

catch_stmt_@0_opt_3  :  :  visit_expr_  %MARK%  
 index is: 366, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

throw_stmt_  :  throw  %MARK%  throw_stmt_@0_opt_2  endline_  
 index is: 368, term type: to_deduce, before: throw, after: throw_stmt_@0_opt_2
TARGET LIST: 
target index: 369  , change_value: throw_stmt_@0_opt_2
target index: 371  , change_value: %NULL%
target index: 372  , change_value: %NULL%

throw_stmt_  :  throw  throw_stmt_@0_opt_2  %MARK%  endline_  
 index is: 369, term type: to_deduce, before: throw_stmt_@0_opt_2, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 370  , change_value: endline_

throw_stmt_  :  throw  throw_stmt_@0_opt_2  endline_  %MARK%  
 index is: 370, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

throw_stmt_@0_opt_2  :  %MARK%  
 index is: 371, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

throw_stmt_@0_opt_2  :  %MARK%  expr_  
 index is: 372, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 373  , change_value: expr_
target index: 403  , change_value: %NULL%

throw_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 373, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

class_stmt_  :  class_stmt_@0_decl_1  %MARK%  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 375, term type: shift, before: class_stmt_@0_decl_1, after: ID
TARGET LIST: 
target index: 376  , change_value: ID

class_stmt_  :  class_stmt_@0_decl_1  ID  %MARK%  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 376, term type: to_deduce, before: ID, after: class_stmt_@0_opt_3
TARGET LIST: 
target index: 377  , change_value: class_stmt_@0_opt_3
target index: 382  , change_value: %NULL%
target index: 383  , change_value: %NULL%

class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 377, term type: shift, before: class_stmt_@0_opt_3, after: ENDL
TARGET LIST: 
target index: 378  , change_value: ENDL

class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 378, term type: to_deduce, before: ENDL, after: decl_stmts_
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 379  , change_value: decl_stmts_

class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 379, term type: shift, before: decl_stmts_, after: end
TARGET LIST: 
target index: 380  , change_value: end

class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 380, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 381  , change_value: ENDL

class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 381, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

class_stmt_@0_opt_3  :  %MARK%  
 index is: 382, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

class_stmt_@0_opt_3  :  %MARK%  extends  visit_expr_  
 index is: 383, term type: shift, before: %NULL%, after: extends
TARGET LIST: 
target index: 384  , change_value: extends

class_stmt_@0_opt_3  :  extends  %MARK%  visit_expr_  
 index is: 384, term type: to_deduce, before: extends, after: visit_expr_
TARGET LIST: 
target index: 385  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

class_stmt_@0_opt_3  :  extends  visit_expr_  %MARK%  
 index is: 385, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  struct  %MARK%  
 index is: 387, term type: deduce, before: struct, after: %NULL%
TARGET LIST: 

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

class_stmt_@0_decl_1  :  class  %MARK%  
 index is: 389, term type: deduce, before: class, after: %NULL%
TARGET LIST: 

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

control_stmt_  :  control_stmt_@0_decl_1  %MARK%  endline_  
 index is: 391, term type: to_deduce, before: control_stmt_@0_decl_1, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 392  , change_value: endline_

control_stmt_  :  control_stmt_@0_decl_1  endline_  %MARK%  
 index is: 392, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  continue  %MARK%  
 index is: 394, term type: deduce, before: continue, after: %NULL%
TARGET LIST: 

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

control_stmt_@0_decl_1  :  break  %MARK%  
 index is: 396, term type: deduce, before: break, after: %NULL%
TARGET LIST: 

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

expr_stmt_  :  expr_  %MARK%  endline_  
 index is: 398, term type: to_deduce, before: expr_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 399  , change_value: endline_

expr_stmt_  :  expr_  endline_  %MARK%  
 index is: 399, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

end_stmt_  :  %MARK%  end  ENDL  
 index is: 400, term type: shift, before: %NULL%, after: end
TARGET LIST: 
target index: 401  , change_value: end

end_stmt_  :  end  %MARK%  ENDL  
 index is: 401, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 402  , change_value: ENDL

end_stmt_  :  end  ENDL  %MARK%  
 index is: 402, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

expr_  :  single_expr_  %MARK%  expr_@0_opt_2  
 index is: 404, term type: to_deduce, before: single_expr_, after: expr_@0_opt_2
TARGET LIST: 
target index: 405  , change_value: expr_@0_opt_2
target index: 406  , change_value: %NULL%
target index: 407  , change_value: %NULL%

expr_  :  single_expr_  expr_@0_opt_2  %MARK%  
 index is: 405, term type: deduce, before: expr_@0_opt_2, after: %NULL%
TARGET LIST: 

expr_@0_opt_2  :  %MARK%  
 index is: 406, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

expr_@0_opt_2  :  %MARK%  ,  expr_  
 index is: 407, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 408  , change_value: ,

expr_@0_opt_2  :  ,  %MARK%  expr_  
 index is: 408, term type: to_deduce, before: ,, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 409  , change_value: expr_

expr_@0_opt_2  :  ,  expr_  %MARK%  
 index is: 409, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  basic_expr_  %MARK%  
 index is: 411, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

single_expr_  :  lambda_expr_  %MARK%  
 index is: 413, term type: deduce, before: lambda_expr_, after: %NULL%
TARGET LIST: 

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  cond_expr_  %MARK%  basic_expr_@1_opt_2  
 index is: 415, term type: to_deduce, before: cond_expr_, after: basic_expr_@1_opt_2
TARGET LIST: 
target index: 416  , change_value: basic_expr_@1_opt_2
target index: 421  , change_value: %NULL%
target index: 422  , change_value: %NULL%

basic_expr_  :  cond_expr_  basic_expr_@1_opt_2  %MARK%  
 index is: 416, term type: deduce, before: basic_expr_@1_opt_2, after: %NULL%
TARGET LIST: 

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

basic_expr_  :  var_bind_  %MARK%  =  cond_expr_  
 index is: 418, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 419  , change_value: =

basic_expr_  :  var_bind_  =  %MARK%  cond_expr_  
 index is: 419, term type: to_deduce, before: =, after: cond_expr_
TARGET LIST: 
target index: 420  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  var_bind_  =  cond_expr_  %MARK%  
 index is: 420, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

basic_expr_@1_opt_2  :  %MARK%  
 index is: 421, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

basic_expr_@1_opt_2  :  %MARK%  asi_op_  single_expr_  
 index is: 422, term type: to_deduce, before: %NULL%, after: asi_op_
TARGET LIST: 
target index: 423  , change_value: asi_op_
target index: 425  , change_value: %NULL%
target index: 427  , change_value: %NULL%
target index: 429  , change_value: %NULL%
target index: 431  , change_value: %NULL%
target index: 433  , change_value: %NULL%
target index: 435  , change_value: %NULL%
target index: 437  , change_value: %NULL%
target index: 439  , change_value: %NULL%

basic_expr_@1_opt_2  :  asi_op_  %MARK%  single_expr_  
 index is: 423, term type: to_deduce, before: asi_op_, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 424  , change_value: single_expr_

basic_expr_@1_opt_2  :  asi_op_  single_expr_  %MARK%  
 index is: 424, term type: deduce, before: single_expr_, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  ^=  
 index is: 425, term type: shift, before: %NULL%, after: ^=
TARGET LIST: 
target index: 426  , change_value: ^=

asi_op_  :  ^=  %MARK%  
 index is: 426, term type: deduce, before: ^=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  %=  
 index is: 427, term type: shift, before: %NULL%, after: %=
TARGET LIST: 
target index: 428  , change_value: %=

asi_op_  :  %=  %MARK%  
 index is: 428, term type: deduce, before: %=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  /=  
 index is: 429, term type: shift, before: %NULL%, after: /=
TARGET LIST: 
target index: 430  , change_value: /=

asi_op_  :  /=  %MARK%  
 index is: 430, term type: deduce, before: /=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  *=  
 index is: 431, term type: shift, before: %NULL%, after: *=
TARGET LIST: 
target index: 432  , change_value: *=

asi_op_  :  *=  %MARK%  
 index is: 432, term type: deduce, before: *=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  -=  
 index is: 433, term type: shift, before: %NULL%, after: -=
TARGET LIST: 
target index: 434  , change_value: -=

asi_op_  :  -=  %MARK%  
 index is: 434, term type: deduce, before: -=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  +=  
 index is: 435, term type: shift, before: %NULL%, after: +=
TARGET LIST: 
target index: 436  , change_value: +=

asi_op_  :  +=  %MARK%  
 index is: 436, term type: deduce, before: +=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  :=  
 index is: 437, term type: shift, before: %NULL%, after: :=
TARGET LIST: 
target index: 438  , change_value: :=

asi_op_  :  :=  %MARK%  
 index is: 438, term type: deduce, before: :=, after: %NULL%
TARGET LIST: 

asi_op_  :  %MARK%  =  
 index is: 439, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 440  , change_value: =

asi_op_  :  =  %MARK%  
 index is: 440, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

lambda_expr_  :  [  %MARK%  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 442, term type: to_deduce, before: [, after: lambda_expr_@0_opt_2
TARGET LIST: 
target index: 443  , change_value: lambda_expr_@0_opt_2
target index: 452  , change_value: %NULL%
target index: 453  , change_value: %NULL%

lambda_expr_  :  [  lambda_expr_@0_opt_2  %MARK%  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 443, term type: shift, before: lambda_expr_@0_opt_2, after: ]
TARGET LIST: 
target index: 444  , change_value: ]

lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  %MARK%  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 444, term type: shift, before: ], after: (
TARGET LIST: 
target index: 445  , change_value: (

lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  %MARK%  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 445, term type: to_deduce, before: (, after: lambda_expr_@0_opt_5
TARGET LIST: 
target index: 446  , change_value: lambda_expr_@0_opt_5
target index: 449  , change_value: %NULL%
target index: 450  , change_value: %NULL%

lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  %MARK%  )  lambda_body_  
 index is: 446, term type: shift, before: lambda_expr_@0_opt_5, after: )
TARGET LIST: 
target index: 447  , change_value: )

lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  %MARK%  lambda_body_  
 index is: 447, term type: to_deduce, before: ), after: lambda_body_
TARGET LIST: 
target index: 448  , change_value: lambda_body_
target index: 487  , change_value: %NULL%
target index: 490  , change_value: %NULL%

lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  %MARK%  
 index is: 448, term type: deduce, before: lambda_body_, after: %NULL%
TARGET LIST: 

lambda_expr_@0_opt_5  :  %MARK%  
 index is: 449, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_expr_@0_opt_5  :  %MARK%  argument_list_  
 index is: 450, term type: to_deduce, before: %NULL%, after: argument_list_
TARGET LIST: 
target index: 451  , change_value: argument_list_
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%

lambda_expr_@0_opt_5  :  argument_list_  %MARK%  
 index is: 451, term type: deduce, before: argument_list_, after: %NULL%
TARGET LIST: 

lambda_expr_@0_opt_2  :  %MARK%  
 index is: 452, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_expr_@0_opt_2  :  %MARK%  capture_list_  
 index is: 453, term type: to_deduce, before: %NULL%, after: capture_list_
TARGET LIST: 
target index: 454  , change_value: capture_list_
target index: 455  , change_value: %NULL%

lambda_expr_@0_opt_2  :  capture_list_  %MARK%  
 index is: 454, term type: deduce, before: capture_list_, after: %NULL%
TARGET LIST: 

capture_list_  :  %MARK%  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  
 index is: 455, term type: to_deduce, before: %NULL%, after: capture_list_@0_opt_1
TARGET LIST: 
target index: 456  , change_value: capture_list_@0_opt_1
target index: 464  , change_value: %NULL%
target index: 465  , change_value: %NULL%

capture_list_  :  capture_list_@0_opt_1  %MARK%  ID  capture_list_@0_rep_3  
 index is: 456, term type: shift, before: capture_list_@0_opt_1, after: ID
TARGET LIST: 
target index: 457  , change_value: ID

capture_list_  :  capture_list_@0_opt_1  ID  %MARK%  capture_list_@0_rep_3  
 index is: 457, term type: to_deduce, before: ID, after: capture_list_@0_rep_3
TARGET LIST: 
target index: 458  , change_value: capture_list_@0_rep_3
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%

capture_list_  :  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  %MARK%  
 index is: 458, term type: deduce, before: capture_list_@0_rep_3, after: %NULL%
TARGET LIST: 

capture_list_@0_rep_3  :  %MARK%  
 index is: 459, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_@0_rep_3  :  %MARK%  ,  capture_list_  capture_list_@0_rep_3  
 index is: 460, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 461  , change_value: ,

capture_list_@0_rep_3  :  ,  %MARK%  capture_list_  capture_list_@0_rep_3  
 index is: 461, term type: to_deduce, before: ,, after: capture_list_
TARGET LIST: 
target index: 455  , change_value: %NULL%
target index: 462  , change_value: capture_list_

capture_list_@0_rep_3  :  ,  capture_list_  %MARK%  capture_list_@0_rep_3  
 index is: 462, term type: to_deduce, before: capture_list_, after: capture_list_@0_rep_3
TARGET LIST: 
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%
target index: 463  , change_value: capture_list_@0_rep_3

capture_list_@0_rep_3  :  ,  capture_list_  capture_list_@0_rep_3  %MARK%  
 index is: 463, term type: deduce, before: capture_list_@0_rep_3, after: %NULL%
TARGET LIST: 

capture_list_@0_opt_1  :  %MARK%  
 index is: 464, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_@0_opt_1  :  %MARK%  =  
 index is: 465, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 466  , change_value: =

capture_list_@0_opt_1  :  =  %MARK%  
 index is: 466, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

argument_list_  :  %MARK%  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 467, term type: to_deduce, before: %NULL%, after: argument_list_@1_opt_1
TARGET LIST: 
target index: 468  , change_value: argument_list_@1_opt_1
target index: 484  , change_value: %NULL%
target index: 485  , change_value: %NULL%

argument_list_  :  argument_list_@1_opt_1  %MARK%  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 468, term type: shift, before: argument_list_@1_opt_1, after: ID
TARGET LIST: 
target index: 469  , change_value: ID

argument_list_  :  argument_list_@1_opt_1  ID  %MARK%  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 469, term type: to_deduce, before: ID, after: argument_list_@1_opt_3
TARGET LIST: 
target index: 470  , change_value: argument_list_@1_opt_3
target index: 481  , change_value: %NULL%
target index: 482  , change_value: %NULL%

argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  %MARK%  visit_expr_  argument_list_@1_rep_5  
 index is: 470, term type: to_deduce, before: argument_list_@1_opt_3, after: visit_expr_
TARGET LIST: 
target index: 471  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  %MARK%  argument_list_@1_rep_5  
 index is: 471, term type: to_deduce, before: visit_expr_, after: argument_list_@1_rep_5
TARGET LIST: 
target index: 472  , change_value: argument_list_@1_rep_5
target index: 476  , change_value: %NULL%
target index: 477  , change_value: %NULL%

argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  %MARK%  
 index is: 472, term type: deduce, before: argument_list_@1_rep_5, after: %NULL%
TARGET LIST: 

argument_list_  :  %MARK%  ...  ID  
 index is: 473, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 474  , change_value: ...

argument_list_  :  ...  %MARK%  ID  
 index is: 474, term type: shift, before: ..., after: ID
TARGET LIST: 
target index: 475  , change_value: ID

argument_list_  :  ...  ID  %MARK%  
 index is: 475, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

argument_list_@1_rep_5  :  %MARK%  
 index is: 476, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_rep_5  :  %MARK%  ,  argument_list_  argument_list_@1_rep_5  
 index is: 477, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 478  , change_value: ,

argument_list_@1_rep_5  :  ,  %MARK%  argument_list_  argument_list_@1_rep_5  
 index is: 478, term type: to_deduce, before: ,, after: argument_list_
TARGET LIST: 
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%
target index: 479  , change_value: argument_list_

argument_list_@1_rep_5  :  ,  argument_list_  %MARK%  argument_list_@1_rep_5  
 index is: 479, term type: to_deduce, before: argument_list_, after: argument_list_@1_rep_5
TARGET LIST: 
target index: 476  , change_value: %NULL%
target index: 477  , change_value: %NULL%
target index: 480  , change_value: argument_list_@1_rep_5

argument_list_@1_rep_5  :  ,  argument_list_  argument_list_@1_rep_5  %MARK%  
 index is: 480, term type: deduce, before: argument_list_@1_rep_5, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_3  :  %MARK%  
 index is: 481, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_3  :  %MARK%  :  
 index is: 482, term type: shift, before: %NULL%, after: :
TARGET LIST: 
target index: 483  , change_value: :

argument_list_@1_opt_3  :  :  %MARK%  
 index is: 483, term type: deduce, before: :, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_1  :  %MARK%  
 index is: 484, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_1  :  %MARK%  =  
 index is: 485, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 486  , change_value: =

argument_list_@1_opt_1  :  =  %MARK%  
 index is: 486, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

lambda_body_  :  %MARK%  ->  cond_expr_  
 index is: 487, term type: shift, before: %NULL%, after: ->
TARGET LIST: 
target index: 488  , change_value: ->

lambda_body_  :  ->  %MARK%  cond_expr_  
 index is: 488, term type: to_deduce, before: ->, after: cond_expr_
TARGET LIST: 
target index: 489  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

lambda_body_  :  ->  cond_expr_  %MARK%  
 index is: 489, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

lambda_body_  :  %MARK%  {  lambda_body_@0_rep_2  }  
 index is: 490, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 491  , change_value: {

lambda_body_  :  {  %MARK%  lambda_body_@0_rep_2  }  
 index is: 491, term type: to_deduce, before: {, after: lambda_body_@0_rep_2
TARGET LIST: 
target index: 492  , change_value: lambda_body_@0_rep_2
target index: 494  , change_value: %NULL%
target index: 495  , change_value: %NULL%

lambda_body_  :  {  lambda_body_@0_rep_2  %MARK%  }  
 index is: 492, term type: shift, before: lambda_body_@0_rep_2, after: }
TARGET LIST: 
target index: 493  , change_value: }

lambda_body_  :  {  lambda_body_@0_rep_2  }  %MARK%  
 index is: 493, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2  :  %MARK%  
 index is: 494, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2  :  %MARK%  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 495, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%
target index: 496  , change_value: statement_

lambda_body_@0_rep_2  :  statement_  %MARK%  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 496, term type: to_deduce, before: statement_, after: lambda_body_@0_rep_2@0_rep_2
TARGET LIST: 
target index: 497  , change_value: lambda_body_@0_rep_2@0_rep_2
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%

lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  %MARK%  lambda_body_@0_rep_2  
 index is: 497, term type: to_deduce, before: lambda_body_@0_rep_2@0_rep_2, after: lambda_body_@0_rep_2
TARGET LIST: 
target index: 494  , change_value: %NULL%
target index: 495  , change_value: %NULL%
target index: 498  , change_value: lambda_body_@0_rep_2

lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  %MARK%  
 index is: 498, term type: deduce, before: lambda_body_@0_rep_2, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2@0_rep_2  :  %MARK%  
 index is: 499, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2@0_rep_2  :  %MARK%  ENDL  lambda_body_@0_rep_2@0_rep_2  
 index is: 500, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 501  , change_value: ENDL

lambda_body_@0_rep_2@0_rep_2  :  ENDL  %MARK%  lambda_body_@0_rep_2@0_rep_2  
 index is: 501, term type: to_deduce, before: ENDL, after: lambda_body_@0_rep_2@0_rep_2
TARGET LIST: 
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%
target index: 502  , change_value: lambda_body_@0_rep_2@0_rep_2

lambda_body_@0_rep_2@0_rep_2  :  ENDL  lambda_body_@0_rep_2@0_rep_2  %MARK%  
 index is: 502, term type: deduce, before: lambda_body_@0_rep_2@0_rep_2, after: %NULL%
TARGET LIST: 

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

cond_expr_  :  logic_or_expr_  %MARK%  cond_expr_@0_opt_2  
 index is: 504, term type: to_deduce, before: logic_or_expr_, after: cond_expr_@0_opt_2
TARGET LIST: 
target index: 505  , change_value: cond_expr_@0_opt_2
target index: 506  , change_value: %NULL%
target index: 507  , change_value: %NULL%

cond_expr_  :  logic_or_expr_  cond_expr_@0_opt_2  %MARK%  
 index is: 505, term type: deduce, before: cond_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

cond_expr_@0_opt_2  :  %MARK%  
 index is: 506, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

cond_expr_@0_opt_2  :  %MARK%  cond_postfix_  
 index is: 507, term type: to_deduce, before: %NULL%, after: cond_postfix_
TARGET LIST: 
target index: 508  , change_value: cond_postfix_
target index: 509  , change_value: %NULL%
target index: 512  , change_value: %NULL%

cond_expr_@0_opt_2  :  cond_postfix_  %MARK%  
 index is: 508, term type: deduce, before: cond_postfix_, after: %NULL%
TARGET LIST: 

cond_postfix_  :  %MARK%  :  logic_or_expr_  
 index is: 509, term type: shift, before: %NULL%, after: :
TARGET LIST: 
target index: 510  , change_value: :

cond_postfix_  :  :  %MARK%  logic_or_expr_  
 index is: 510, term type: to_deduce, before: :, after: logic_or_expr_
TARGET LIST: 
target index: 511  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

cond_postfix_  :  :  logic_or_expr_  %MARK%  
 index is: 511, term type: deduce, before: logic_or_expr_, after: %NULL%
TARGET LIST: 

cond_postfix_  :  %MARK%  ?  logic_or_expr_  :  cond_expr_  
 index is: 512, term type: shift, before: %NULL%, after: ?
TARGET LIST: 
target index: 513  , change_value: ?

cond_postfix_  :  ?  %MARK%  logic_or_expr_  :  cond_expr_  
 index is: 513, term type: to_deduce, before: ?, after: logic_or_expr_
TARGET LIST: 
target index: 514  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

cond_postfix_  :  ?  logic_or_expr_  %MARK%  :  cond_expr_  
 index is: 514, term type: shift, before: logic_or_expr_, after: :
TARGET LIST: 
target index: 515  , change_value: :

cond_postfix_  :  ?  logic_or_expr_  :  %MARK%  cond_expr_  
 index is: 515, term type: to_deduce, before: :, after: cond_expr_
TARGET LIST: 
target index: 503  , change_value: %NULL%
target index: 516  , change_value: cond_expr_

cond_postfix_  :  ?  logic_or_expr_  :  cond_expr_  %MARK%  
 index is: 516, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_or_expr_  :  logic_and_expr_  %MARK%  logic_or_expr_@0_opt_2  
 index is: 518, term type: to_deduce, before: logic_and_expr_, after: logic_or_expr_@0_opt_2
TARGET LIST: 
target index: 519  , change_value: logic_or_expr_@0_opt_2
target index: 520  , change_value: %NULL%
target index: 521  , change_value: %NULL%

logic_or_expr_  :  logic_and_expr_  logic_or_expr_@0_opt_2  %MARK%  
 index is: 519, term type: deduce, before: logic_or_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

logic_or_expr_@0_opt_2  :  %MARK%  
 index is: 520, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

logic_or_expr_@0_opt_2  :  %MARK%  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  
 index is: 521, term type: to_deduce, before: %NULL%, after: logic_or_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 522  , change_value: logic_or_expr_@0_opt_2@0_decl_1
target index: 524  , change_value: %NULL%
target index: 526  , change_value: %NULL%

logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  %MARK%  logic_or_expr_  
 index is: 522, term type: to_deduce, before: logic_or_expr_@0_opt_2@0_decl_1, after: logic_or_expr_
TARGET LIST: 
target index: 517  , change_value: %NULL%
target index: 523  , change_value: logic_or_expr_

logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  %MARK%  
 index is: 523, term type: deduce, before: logic_or_expr_, after: %NULL%
TARGET LIST: 

logic_or_expr_@0_opt_2@0_decl_1  :  %MARK%  or  
 index is: 524, term type: shift, before: %NULL%, after: or
TARGET LIST: 
target index: 525  , change_value: or

logic_or_expr_@0_opt_2@0_decl_1  :  or  %MARK%  
 index is: 525, term type: deduce, before: or, after: %NULL%
TARGET LIST: 

logic_or_expr_@0_opt_2@0_decl_1  :  %MARK%  ||  
 index is: 526, term type: shift, before: %NULL%, after: ||
TARGET LIST: 
target index: 527  , change_value: ||

logic_or_expr_@0_opt_2@0_decl_1  :  ||  %MARK%  
 index is: 527, term type: deduce, before: ||, after: %NULL%
TARGET LIST: 

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

logic_and_expr_  :  equal_expr_  %MARK%  logic_and_expr_@0_opt_2  
 index is: 529, term type: to_deduce, before: equal_expr_, after: logic_and_expr_@0_opt_2
TARGET LIST: 
target index: 530  , change_value: logic_and_expr_@0_opt_2
target index: 531  , change_value: %NULL%
target index: 532  , change_value: %NULL%

logic_and_expr_  :  equal_expr_  logic_and_expr_@0_opt_2  %MARK%  
 index is: 530, term type: deduce, before: logic_and_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

logic_and_expr_@0_opt_2  :  %MARK%  
 index is: 531, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

logic_and_expr_@0_opt_2  :  %MARK%  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  
 index is: 532, term type: to_deduce, before: %NULL%, after: logic_and_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 533  , change_value: logic_and_expr_@0_opt_2@0_decl_1
target index: 535  , change_value: %NULL%
target index: 537  , change_value: %NULL%

logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  %MARK%  logic_and_expr_  
 index is: 533, term type: to_deduce, before: logic_and_expr_@0_opt_2@0_decl_1, after: logic_and_expr_
TARGET LIST: 
target index: 528  , change_value: %NULL%
target index: 534  , change_value: logic_and_expr_

logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  %MARK%  
 index is: 534, term type: deduce, before: logic_and_expr_, after: %NULL%
TARGET LIST: 

logic_and_expr_@0_opt_2@0_decl_1  :  %MARK%  and  
 index is: 535, term type: shift, before: %NULL%, after: and
TARGET LIST: 
target index: 536  , change_value: and

logic_and_expr_@0_opt_2@0_decl_1  :  and  %MARK%  
 index is: 536, term type: deduce, before: and, after: %NULL%
TARGET LIST: 

logic_and_expr_@0_opt_2@0_decl_1  :  %MARK%  &&  
 index is: 537, term type: shift, before: %NULL%, after: &&
TARGET LIST: 
target index: 538  , change_value: &&

logic_and_expr_@0_opt_2@0_decl_1  :  &&  %MARK%  
 index is: 538, term type: deduce, before: &&, after: %NULL%
TARGET LIST: 

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

equal_expr_  :  relat_expr_  %MARK%  equal_expr_@0_opt_2  
 index is: 540, term type: to_deduce, before: relat_expr_, after: equal_expr_@0_opt_2
TARGET LIST: 
target index: 541  , change_value: equal_expr_@0_opt_2
target index: 542  , change_value: %NULL%
target index: 543  , change_value: %NULL%

equal_expr_  :  relat_expr_  equal_expr_@0_opt_2  %MARK%  
 index is: 541, term type: deduce, before: equal_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

equal_expr_@0_opt_2  :  %MARK%  
 index is: 542, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

equal_expr_@0_opt_2  :  %MARK%  equal_expr_@0_opt_2@0_decl_1  equal_expr_  
 index is: 543, term type: to_deduce, before: %NULL%, after: equal_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 544  , change_value: equal_expr_@0_opt_2@0_decl_1
target index: 546  , change_value: %NULL%
target index: 548  , change_value: %NULL%

equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  %MARK%  equal_expr_  
 index is: 544, term type: to_deduce, before: equal_expr_@0_opt_2@0_decl_1, after: equal_expr_
TARGET LIST: 
target index: 539  , change_value: %NULL%
target index: 545  , change_value: equal_expr_

equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  equal_expr_  %MARK%  
 index is: 545, term type: deduce, before: equal_expr_, after: %NULL%
TARGET LIST: 

equal_expr_@0_opt_2@0_decl_1  :  %MARK%  !=  
 index is: 546, term type: shift, before: %NULL%, after: !=
TARGET LIST: 
target index: 547  , change_value: !=

equal_expr_@0_opt_2@0_decl_1  :  !=  %MARK%  
 index is: 547, term type: deduce, before: !=, after: %NULL%
TARGET LIST: 

equal_expr_@0_opt_2@0_decl_1  :  %MARK%  ==  
 index is: 548, term type: shift, before: %NULL%, after: ==
TARGET LIST: 
target index: 549  , change_value: ==

equal_expr_@0_opt_2@0_decl_1  :  ==  %MARK%  
 index is: 549, term type: deduce, before: ==, after: %NULL%
TARGET LIST: 

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

relat_expr_  :  add_expr_  %MARK%  relat_expr_@0_opt_2  
 index is: 551, term type: to_deduce, before: add_expr_, after: relat_expr_@0_opt_2
TARGET LIST: 
target index: 552  , change_value: relat_expr_@0_opt_2
target index: 553  , change_value: %NULL%
target index: 554  , change_value: %NULL%

relat_expr_  :  add_expr_  relat_expr_@0_opt_2  %MARK%  
 index is: 552, term type: deduce, before: relat_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2  :  %MARK%  
 index is: 553, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2  :  %MARK%  relat_expr_@0_opt_2@0_decl_1  relat_expr_  
 index is: 554, term type: to_deduce, before: %NULL%, after: relat_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 555  , change_value: relat_expr_@0_opt_2@0_decl_1
target index: 557  , change_value: %NULL%
target index: 559  , change_value: %NULL%
target index: 561  , change_value: %NULL%
target index: 563  , change_value: %NULL%

relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  %MARK%  relat_expr_  
 index is: 555, term type: to_deduce, before: relat_expr_@0_opt_2@0_decl_1, after: relat_expr_
TARGET LIST: 
target index: 550  , change_value: %NULL%
target index: 556  , change_value: relat_expr_

relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  relat_expr_  %MARK%  
 index is: 556, term type: deduce, before: relat_expr_, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  <=  
 index is: 557, term type: shift, before: %NULL%, after: <=
TARGET LIST: 
target index: 558  , change_value: <=

relat_expr_@0_opt_2@0_decl_1  :  <=  %MARK%  
 index is: 558, term type: deduce, before: <=, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  >=  
 index is: 559, term type: shift, before: %NULL%, after: >=
TARGET LIST: 
target index: 560  , change_value: >=

relat_expr_@0_opt_2@0_decl_1  :  >=  %MARK%  
 index is: 560, term type: deduce, before: >=, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  <  
 index is: 561, term type: shift, before: %NULL%, after: <
TARGET LIST: 
target index: 562  , change_value: <

relat_expr_@0_opt_2@0_decl_1  :  <  %MARK%  
 index is: 562, term type: deduce, before: <, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  >  
 index is: 563, term type: shift, before: %NULL%, after: >
TARGET LIST: 
target index: 564  , change_value: >

relat_expr_@0_opt_2@0_decl_1  :  >  %MARK%  
 index is: 564, term type: deduce, before: >, after: %NULL%
TARGET LIST: 

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

add_expr_  :  mul_expr_  %MARK%  add_expr_@0_opt_2  
 index is: 566, term type: to_deduce, before: mul_expr_, after: add_expr_@0_opt_2
TARGET LIST: 
target index: 567  , change_value: add_expr_@0_opt_2
target index: 568  , change_value: %NULL%
target index: 569  , change_value: %NULL%

add_expr_  :  mul_expr_  add_expr_@0_opt_2  %MARK%  
 index is: 567, term type: deduce, before: add_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

add_expr_@0_opt_2  :  %MARK%  
 index is: 568, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

add_expr_@0_opt_2  :  %MARK%  add_expr_@0_opt_2@0_decl_1  add_expr_  
 index is: 569, term type: to_deduce, before: %NULL%, after: add_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 570  , change_value: add_expr_@0_opt_2@0_decl_1
target index: 572  , change_value: %NULL%
target index: 574  , change_value: %NULL%

add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  %MARK%  add_expr_  
 index is: 570, term type: to_deduce, before: add_expr_@0_opt_2@0_decl_1, after: add_expr_
TARGET LIST: 
target index: 565  , change_value: %NULL%
target index: 571  , change_value: add_expr_

add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  add_expr_  %MARK%  
 index is: 571, term type: deduce, before: add_expr_, after: %NULL%
TARGET LIST: 

add_expr_@0_opt_2@0_decl_1  :  %MARK%  -  
 index is: 572, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 573  , change_value: -

add_expr_@0_opt_2@0_decl_1  :  -  %MARK%  
 index is: 573, term type: deduce, before: -, after: %NULL%
TARGET LIST: 

add_expr_@0_opt_2@0_decl_1  :  %MARK%  +  
 index is: 574, term type: shift, before: %NULL%, after: +
TARGET LIST: 
target index: 575  , change_value: +

add_expr_@0_opt_2@0_decl_1  :  +  %MARK%  
 index is: 575, term type: deduce, before: +, after: %NULL%
TARGET LIST: 

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

mul_expr_  :  unary_expr_  %MARK%  mul_expr_@0_opt_2  
 index is: 577, term type: to_deduce, before: unary_expr_, after: mul_expr_@0_opt_2
TARGET LIST: 
target index: 578  , change_value: mul_expr_@0_opt_2
target index: 579  , change_value: %NULL%
target index: 580  , change_value: %NULL%

mul_expr_  :  unary_expr_  mul_expr_@0_opt_2  %MARK%  
 index is: 578, term type: deduce, before: mul_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2  :  %MARK%  
 index is: 579, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2  :  %MARK%  mul_expr_@0_opt_2@0_decl_1  mul_expr_  
 index is: 580, term type: to_deduce, before: %NULL%, after: mul_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 581  , change_value: mul_expr_@0_opt_2@0_decl_1
target index: 583  , change_value: %NULL%
target index: 585  , change_value: %NULL%
target index: 587  , change_value: %NULL%
target index: 589  , change_value: %NULL%

mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  %MARK%  mul_expr_  
 index is: 581, term type: to_deduce, before: mul_expr_@0_opt_2@0_decl_1, after: mul_expr_
TARGET LIST: 
target index: 576  , change_value: %NULL%
target index: 582  , change_value: mul_expr_

mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  mul_expr_  %MARK%  
 index is: 582, term type: deduce, before: mul_expr_, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  ^  
 index is: 583, term type: shift, before: %NULL%, after: ^
TARGET LIST: 
target index: 584  , change_value: ^

mul_expr_@0_opt_2@0_decl_1  :  ^  %MARK%  
 index is: 584, term type: deduce, before: ^, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  %  
 index is: 585, term type: shift, before: %NULL%, after: %
TARGET LIST: 
target index: 586  , change_value: %

mul_expr_@0_opt_2@0_decl_1  :  %  %MARK%  
 index is: 586, term type: deduce, before: %, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  /  
 index is: 587, term type: shift, before: %NULL%, after: /
TARGET LIST: 
target index: 588  , change_value: /

mul_expr_@0_opt_2@0_decl_1  :  /  %MARK%  
 index is: 588, term type: deduce, before: /, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  *  
 index is: 589, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 590  , change_value: *

mul_expr_@0_opt_2@0_decl_1  :  *  %MARK%  
 index is: 590, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  prim_expr_  %MARK%  unary_expr_@2_opt_2  
 index is: 592, term type: to_deduce, before: prim_expr_, after: unary_expr_@2_opt_2
TARGET LIST: 
target index: 593  , change_value: unary_expr_@2_opt_2
target index: 601  , change_value: %NULL%
target index: 602  , change_value: %NULL%

unary_expr_  :  prim_expr_  unary_expr_@2_opt_2  %MARK%  
 index is: 593, term type: deduce, before: unary_expr_@2_opt_2, after: %NULL%
TARGET LIST: 

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  unary_expr_@1_decl_1  %MARK%  unary_expr_  unary_expr_@1_opt_3  
 index is: 595, term type: to_deduce, before: unary_expr_@1_decl_1, after: unary_expr_
TARGET LIST: 
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 596  , change_value: unary_expr_
target index: 598  , change_value: %NULL%

unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  %MARK%  unary_expr_@1_opt_3  
 index is: 596, term type: to_deduce, before: unary_expr_, after: unary_expr_@1_opt_3
TARGET LIST: 
target index: 597  , change_value: unary_expr_@1_opt_3
target index: 604  , change_value: %NULL%
target index: 605  , change_value: %NULL%

unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  %MARK%  
 index is: 597, term type: deduce, before: unary_expr_@1_opt_3, after: %NULL%
TARGET LIST: 

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

unary_expr_  :  unary_op_  %MARK%  unary_expr_  
 index is: 599, term type: to_deduce, before: unary_op_, after: unary_expr_
TARGET LIST: 
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%
target index: 600  , change_value: unary_expr_

unary_expr_  :  unary_op_  unary_expr_  %MARK%  
 index is: 600, term type: deduce, before: unary_expr_, after: %NULL%
TARGET LIST: 

unary_expr_@2_opt_2  :  %MARK%  
 index is: 601, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

unary_expr_@2_opt_2  :  %MARK%  postfix_expr_  
 index is: 602, term type: to_deduce, before: %NULL%, after: postfix_expr_
TARGET LIST: 
target index: 603  , change_value: postfix_expr_
target index: 625  , change_value: %NULL%

unary_expr_@2_opt_2  :  postfix_expr_  %MARK%  
 index is: 603, term type: deduce, before: postfix_expr_, after: %NULL%
TARGET LIST: 

unary_expr_@1_opt_3  :  %MARK%  
 index is: 604, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

unary_expr_@1_opt_3  :  %MARK%  array_  
 index is: 605, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 606  , change_value: array_
target index: 696  , change_value: %NULL%

unary_expr_@1_opt_3  :  array_  %MARK%  
 index is: 606, term type: deduce, before: array_, after: %NULL%
TARGET LIST: 

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  gcnew  %MARK%  
 index is: 608, term type: deduce, before: gcnew, after: %NULL%
TARGET LIST: 

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_expr_@1_decl_1  :  new  %MARK%  
 index is: 610, term type: deduce, before: new, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  !  %MARK%  
 index is: 612, term type: deduce, before: !, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  -  %MARK%  
 index is: 614, term type: deduce, before: -, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  &  %MARK%  
 index is: 616, term type: deduce, before: &, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  *  %MARK%  
 index is: 618, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  --  %MARK%  
 index is: 620, term type: deduce, before: --, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  ++  %MARK%  
 index is: 622, term type: deduce, before: ++, after: %NULL%
TARGET LIST: 

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

unary_op_  :  typeid  %MARK%  
 index is: 624, term type: deduce, before: typeid, after: %NULL%
TARGET LIST: 

postfix_expr_  :  %MARK%  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  
 index is: 625, term type: to_deduce, before: %NULL%, after: postfix_expr_@0_decl_1
TARGET LIST: 
target index: 626  , change_value: postfix_expr_@0_decl_1
target index: 631  , change_value: %NULL%
target index: 633  , change_value: %NULL%
target index: 635  , change_value: %NULL%

postfix_expr_  :  postfix_expr_@0_decl_1  %MARK%  postfix_expr_@0_opt_2  
 index is: 626, term type: to_deduce, before: postfix_expr_@0_decl_1, after: postfix_expr_@0_opt_2
TARGET LIST: 
target index: 627  , change_value: postfix_expr_@0_opt_2
target index: 628  , change_value: %NULL%
target index: 629  , change_value: %NULL%

postfix_expr_  :  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  %MARK%  
 index is: 627, term type: deduce, before: postfix_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

postfix_expr_@0_opt_2  :  %MARK%  
 index is: 628, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

postfix_expr_@0_opt_2  :  %MARK%  postfix_expr_  
 index is: 629, term type: to_deduce, before: %NULL%, after: postfix_expr_
TARGET LIST: 
target index: 625  , change_value: %NULL%
target index: 630  , change_value: postfix_expr_

postfix_expr_@0_opt_2  :  postfix_expr_  %MARK%  
 index is: 630, term type: deduce, before: postfix_expr_, after: %NULL%
TARGET LIST: 

postfix_expr_@0_decl_1  :  %MARK%  ...  
 index is: 631, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 632  , change_value: ...

postfix_expr_@0_decl_1  :  ...  %MARK%  
 index is: 632, term type: deduce, before: ..., after: %NULL%
TARGET LIST: 

postfix_expr_@0_decl_1  :  %MARK%  --  
 index is: 633, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 634  , change_value: --

postfix_expr_@0_decl_1  :  --  %MARK%  
 index is: 634, term type: deduce, before: --, after: %NULL%
TARGET LIST: 

postfix_expr_@0_decl_1  :  %MARK%  ++  
 index is: 635, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 636  , change_value: ++

postfix_expr_@0_decl_1  :  ++  %MARK%  
 index is: 636, term type: deduce, before: ++, after: %NULL%
TARGET LIST: 

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  constant_  %MARK%  
 index is: 638, term type: deduce, before: constant_, after: %NULL%
TARGET LIST: 

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

prim_expr_  :  visit_expr_  %MARK%  
 index is: 640, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

visit_expr_  :  object_  %MARK%  visit_expr_@0_opt_2  
 index is: 642, term type: to_deduce, before: object_, after: visit_expr_@0_opt_2
TARGET LIST: 
target index: 643  , change_value: visit_expr_@0_opt_2
target index: 644  , change_value: %NULL%
target index: 645  , change_value: %NULL%

visit_expr_  :  object_  visit_expr_@0_opt_2  %MARK%  
 index is: 643, term type: deduce, before: visit_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

visit_expr_@0_opt_2  :  %MARK%  
 index is: 644, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

visit_expr_@0_opt_2  :  %MARK%  visit_expr_@0_opt_2@0_decl_1  visit_expr_  
 index is: 645, term type: to_deduce, before: %NULL%, after: visit_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 646  , change_value: visit_expr_@0_opt_2@0_decl_1
target index: 648  , change_value: %NULL%
target index: 650  , change_value: %NULL%

visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  %MARK%  visit_expr_  
 index is: 646, term type: to_deduce, before: visit_expr_@0_opt_2@0_decl_1, after: visit_expr_
TARGET LIST: 
target index: 641  , change_value: %NULL%
target index: 647  , change_value: visit_expr_

visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  visit_expr_  %MARK%  
 index is: 647, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

visit_expr_@0_opt_2@0_decl_1  :  %MARK%  .  
 index is: 648, term type: shift, before: %NULL%, after: .
TARGET LIST: 
target index: 649  , change_value: .

visit_expr_@0_opt_2@0_decl_1  :  .  %MARK%  
 index is: 649, term type: deduce, before: ., after: %NULL%
TARGET LIST: 

visit_expr_@0_opt_2@0_decl_1  :  %MARK%  ->  
 index is: 650, term type: shift, before: %NULL%, after: ->
TARGET LIST: 
target index: 651  , change_value: ->

visit_expr_@0_opt_2@0_decl_1  :  ->  %MARK%  
 index is: 651, term type: deduce, before: ->, after: %NULL%
TARGET LIST: 

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  CHAR  %MARK%  
 index is: 653, term type: deduce, before: CHAR, after: %NULL%
TARGET LIST: 

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  element_  %MARK%  
 index is: 655, term type: deduce, before: element_, after: %NULL%
TARGET LIST: 

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  global  %MARK%  
 index is: 657, term type: deduce, before: global, after: %NULL%
TARGET LIST: 

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  local  %MARK%  
 index is: 659, term type: deduce, before: local, after: %NULL%
TARGET LIST: 

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  STR  %MARK%  object_@1_opt_2  
 index is: 661, term type: to_deduce, before: STR, after: object_@1_opt_2
TARGET LIST: 
target index: 662  , change_value: object_@1_opt_2
target index: 666  , change_value: %NULL%
target index: 667  , change_value: %NULL%

object_  :  STR  object_@1_opt_2  %MARK%  
 index is: 662, term type: deduce, before: object_@1_opt_2, after: %NULL%
TARGET LIST: 

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

object_  :  array_  %MARK%  object_@0_opt_2  
 index is: 664, term type: to_deduce, before: array_, after: object_@0_opt_2
TARGET LIST: 
target index: 665  , change_value: object_@0_opt_2
target index: 669  , change_value: %NULL%
target index: 670  , change_value: %NULL%

object_  :  array_  object_@0_opt_2  %MARK%  
 index is: 665, term type: deduce, before: object_@0_opt_2, after: %NULL%
TARGET LIST: 

object_@1_opt_2  :  %MARK%  
 index is: 666, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

object_@1_opt_2  :  %MARK%  index_  
 index is: 667, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 668  , change_value: index_
target index: 710  , change_value: %NULL%

object_@1_opt_2  :  index_  %MARK%  
 index is: 668, term type: deduce, before: index_, after: %NULL%
TARGET LIST: 

object_@0_opt_2  :  %MARK%  
 index is: 669, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

object_@0_opt_2  :  %MARK%  index_  
 index is: 670, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 671  , change_value: index_
target index: 710  , change_value: %NULL%

object_@0_opt_2  :  index_  %MARK%  
 index is: 671, term type: deduce, before: index_, after: %NULL%
TARGET LIST: 

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

element_  :  element_@0_decl_1  %MARK%  element_@0_rep_2  
 index is: 673, term type: to_deduce, before: element_@0_decl_1, after: element_@0_rep_2
TARGET LIST: 
target index: 674  , change_value: element_@0_rep_2
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 679  , change_value: %NULL%

element_  :  element_@0_decl_1  element_@0_rep_2  %MARK%  
 index is: 674, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

element_@0_rep_2  :  %MARK%  
 index is: 675, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

element_@0_rep_2  :  %MARK%  index_  element_@0_rep_2  
 index is: 676, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 677  , change_value: index_
target index: 710  , change_value: %NULL%

element_@0_rep_2  :  index_  %MARK%  element_@0_rep_2  
 index is: 677, term type: to_deduce, before: index_, after: element_@0_rep_2
TARGET LIST: 
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 678  , change_value: element_@0_rep_2
target index: 679  , change_value: %NULL%

element_@0_rep_2  :  index_  element_@0_rep_2  %MARK%  
 index is: 678, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

element_@0_rep_2  :  %MARK%  fcall_  element_@0_rep_2  
 index is: 679, term type: to_deduce, before: %NULL%, after: fcall_
TARGET LIST: 
target index: 680  , change_value: fcall_
target index: 703  , change_value: %NULL%

element_@0_rep_2  :  fcall_  %MARK%  element_@0_rep_2  
 index is: 680, term type: to_deduce, before: fcall_, after: element_@0_rep_2
TARGET LIST: 
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 679  , change_value: %NULL%
target index: 681  , change_value: element_@0_rep_2

element_@0_rep_2  :  fcall_  element_@0_rep_2  %MARK%  
 index is: 681, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  (  %MARK%  single_expr_  )  
 index is: 683, term type: to_deduce, before: (, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 684  , change_value: single_expr_

element_@0_decl_1  :  (  single_expr_  %MARK%  )  
 index is: 684, term type: shift, before: single_expr_, after: )
TARGET LIST: 
target index: 685  , change_value: )

element_@0_decl_1  :  (  single_expr_  )  %MARK%  
 index is: 685, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

element_@0_decl_1  :  ID  %MARK%  
 index is: 687, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  false  %MARK%  
 index is: 689, term type: deduce, before: false, after: %NULL%
TARGET LIST: 

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  true  %MARK%  
 index is: 691, term type: deduce, before: true, after: %NULL%
TARGET LIST: 

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  null  %MARK%  
 index is: 693, term type: deduce, before: null, after: %NULL%
TARGET LIST: 

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

constant_  :  NUM  %MARK%  
 index is: 695, term type: deduce, before: NUM, after: %NULL%
TARGET LIST: 

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

array_  :  {  %MARK%  array_@0_opt_2  }  
 index is: 697, term type: to_deduce, before: {, after: array_@0_opt_2
TARGET LIST: 
target index: 698  , change_value: array_@0_opt_2
target index: 700  , change_value: %NULL%
target index: 701  , change_value: %NULL%

array_  :  {  array_@0_opt_2  %MARK%  }  
 index is: 698, term type: shift, before: array_@0_opt_2, after: }
TARGET LIST: 
target index: 699  , change_value: }

array_  :  {  array_@0_opt_2  }  %MARK%  
 index is: 699, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

array_@0_opt_2  :  %MARK%  
 index is: 700, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

array_@0_opt_2  :  %MARK%  expr_  
 index is: 701, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 702  , change_value: expr_

array_@0_opt_2  :  expr_  %MARK%  
 index is: 702, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

fcall_  :  %MARK%  (  fcall_@0_opt_2  )  
 index is: 703, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 704  , change_value: (

fcall_  :  (  %MARK%  fcall_@0_opt_2  )  
 index is: 704, term type: to_deduce, before: (, after: fcall_@0_opt_2
TARGET LIST: 
target index: 705  , change_value: fcall_@0_opt_2
target index: 707  , change_value: %NULL%
target index: 708  , change_value: %NULL%

fcall_  :  (  fcall_@0_opt_2  %MARK%  )  
 index is: 705, term type: shift, before: fcall_@0_opt_2, after: )
TARGET LIST: 
target index: 706  , change_value: )

fcall_  :  (  fcall_@0_opt_2  )  %MARK%  
 index is: 706, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

fcall_@0_opt_2  :  %MARK%  
 index is: 707, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

fcall_@0_opt_2  :  %MARK%  expr_  
 index is: 708, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 709  , change_value: expr_

fcall_@0_opt_2  :  expr_  %MARK%  
 index is: 709, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 711  , change_value: [

index_  :  [  %MARK%  basic_expr_  ]  
 index is: 711, term type: to_deduce, before: [, after: basic_expr_
TARGET LIST: 
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%
target index: 712  , change_value: basic_expr_

index_  :  [  basic_expr_  %MARK%  ]  
 index is: 712, term type: shift, before: basic_expr_, after: ]
TARGET LIST: 
target index: 713  , change_value: ]

index_  :  [  basic_expr_  ]  %MARK%  
 index is: 713, term type: deduce, before: ], after: %NULL%
TARGET LIST: 

#####
#DFA#
#####
#########
#0  TERM#
#########


##########
#FROM SET#
##########
%start%  :  %MARK%  begin_  
 index is: 0, term type: to_deduce, before: %NULL%, after: begin_
TARGET LIST: 
target index: 1  , change_value: begin_
target index: 2  , change_value: %NULL%

########
#SUBSET#
########
%start%  :  %MARK%  begin_  
 index is: 0, term type: to_deduce, before: %NULL%, after: begin_
TARGET LIST: 
target index: 1  , change_value: begin_
target index: 2  , change_value: %NULL%

begin_  :  %MARK%  stmts_  
 index is: 2, term type: to_deduce, before: %NULL%, after: stmts_
TARGET LIST: 
target index: 3  , change_value: stmts_
target index: 14  , change_value: %NULL%

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 1, target_source: begin_

index: 2, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



#########
#1  TERM#
#########


##########
#FROM SET#
##########
%start%  :  begin_  %MARK%  
 index is: 1, term type: accept, before: begin_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
%start%  :  begin_  %MARK%  
 index is: 1, term type: accept, before: begin_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#2  TERM#
#########


##########
#FROM SET#
##########
begin_  :  stmts_  %MARK%  
 index is: 3, term type: deduce, before: stmts_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
begin_  :  stmts_  %MARK%  
 index is: 3, term type: deduce, before: stmts_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#3  TERM#
#########


##########
#FROM SET#
##########
stmts_  :  stmts_@0_rep_1  %MARK%  
 index is: 15, term type: deduce, before: stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
stmts_  :  stmts_@0_rep_1  %MARK%  
 index is: 15, term type: deduce, before: stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#4  TERM#
#########


##########
#FROM SET#
##########
stmts_@0_rep_1  :  statement_  %MARK%  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 18, term type: to_deduce, before: statement_, after: stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 19  , change_value: stmts_@0_rep_1@0_rep_2
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%

########
#SUBSET#
########
stmts_@0_rep_1  :  statement_  %MARK%  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 18, term type: to_deduce, before: statement_, after: stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 19  , change_value: stmts_@0_rep_1@0_rep_2
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%

stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 21, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  stmts_@0_rep_1@0_rep_2  
 index is: 22, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 23  , change_value: ENDL

########
#TO SET#
########
index: 5, target_source: stmts_@0_rep_1@0_rep_2

index: 424, target_source: ENDL



#########
#5  TERM#
#########


##########
#FROM SET#
##########
stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  %MARK%  stmts_@0_rep_1  
 index is: 19, term type: to_deduce, before: stmts_@0_rep_1@0_rep_2, after: stmts_@0_rep_1
TARGET LIST: 
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%
target index: 20  , change_value: stmts_@0_rep_1

########
#SUBSET#
########
stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  %MARK%  stmts_@0_rep_1  
 index is: 19, term type: to_deduce, before: stmts_@0_rep_1@0_rep_2, after: stmts_@0_rep_1
TARGET LIST: 
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%
target index: 20  , change_value: stmts_@0_rep_1

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 6, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



#########
#6  TERM#
#########


##########
#FROM SET#
##########
stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  %MARK%  
 index is: 20, term type: deduce, before: stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
stmts_@0_rep_1  :  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  %MARK%  
 index is: 20, term type: deduce, before: stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#7  TERM#
#########


##########
#FROM SET#
##########
statement_  :  expr_stmt_  %MARK%  
 index is: 45, term type: deduce, before: expr_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  expr_stmt_  %MARK%  
 index is: 45, term type: deduce, before: expr_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#8  TERM#
#########


##########
#FROM SET#
##########
statement_  :  class_stmt_  %MARK%  
 index is: 47, term type: deduce, before: class_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  class_stmt_  %MARK%  
 index is: 47, term type: deduce, before: class_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


#########
#9  TERM#
#########


##########
#FROM SET#
##########
statement_  :  throw_stmt_  %MARK%  
 index is: 49, term type: deduce, before: throw_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  throw_stmt_  %MARK%  
 index is: 49, term type: deduce, before: throw_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#10  TERM#
##########


##########
#FROM SET#
##########
statement_  :  try_stmt_  %MARK%  
 index is: 51, term type: deduce, before: try_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  try_stmt_  %MARK%  
 index is: 51, term type: deduce, before: try_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#11  TERM#
##########


##########
#FROM SET#
##########
statement_  :  return_stmt_  %MARK%  
 index is: 53, term type: deduce, before: return_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  return_stmt_  %MARK%  
 index is: 53, term type: deduce, before: return_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#12  TERM#
##########


##########
#FROM SET#
##########
statement_  :  function_stmt_  %MARK%  
 index is: 55, term type: deduce, before: function_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  function_stmt_  %MARK%  
 index is: 55, term type: deduce, before: function_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#13  TERM#
##########


##########
#FROM SET#
##########
statement_  :  control_stmt_  %MARK%  
 index is: 57, term type: deduce, before: control_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  control_stmt_  %MARK%  
 index is: 57, term type: deduce, before: control_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#14  TERM#
##########


##########
#FROM SET#
##########
statement_  :  foreach_stmt_  %MARK%  
 index is: 59, term type: deduce, before: foreach_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  foreach_stmt_  %MARK%  
 index is: 59, term type: deduce, before: foreach_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#15  TERM#
##########


##########
#FROM SET#
##########
statement_  :  for_stmt_  %MARK%  
 index is: 61, term type: deduce, before: for_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  for_stmt_  %MARK%  
 index is: 61, term type: deduce, before: for_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#16  TERM#
##########


##########
#FROM SET#
##########
statement_  :  loop_stmt_  %MARK%  
 index is: 63, term type: deduce, before: loop_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  loop_stmt_  %MARK%  
 index is: 63, term type: deduce, before: loop_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#17  TERM#
##########


##########
#FROM SET#
##########
statement_  :  while_stmt_  %MARK%  
 index is: 65, term type: deduce, before: while_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  while_stmt_  %MARK%  
 index is: 65, term type: deduce, before: while_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#18  TERM#
##########


##########
#FROM SET#
##########
statement_  :  switch_stmt_  %MARK%  
 index is: 67, term type: deduce, before: switch_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  switch_stmt_  %MARK%  
 index is: 67, term type: deduce, before: switch_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#19  TERM#
##########


##########
#FROM SET#
##########
statement_  :  if_stmt_  %MARK%  
 index is: 69, term type: deduce, before: if_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  if_stmt_  %MARK%  
 index is: 69, term type: deduce, before: if_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#20  TERM#
##########


##########
#FROM SET#
##########
statement_  :  using_stmt_  %MARK%  
 index is: 71, term type: deduce, before: using_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  using_stmt_  %MARK%  
 index is: 71, term type: deduce, before: using_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#21  TERM#
##########


##########
#FROM SET#
##########
statement_  :  namespace_stmt_  %MARK%  
 index is: 73, term type: deduce, before: namespace_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  namespace_stmt_  %MARK%  
 index is: 73, term type: deduce, before: namespace_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#22  TERM#
##########


##########
#FROM SET#
##########
statement_  :  block_stmt_  %MARK%  
 index is: 75, term type: deduce, before: block_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  block_stmt_  %MARK%  
 index is: 75, term type: deduce, before: block_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#23  TERM#
##########


##########
#FROM SET#
##########
statement_  :  var_stmt_  %MARK%  
 index is: 77, term type: deduce, before: var_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  var_stmt_  %MARK%  
 index is: 77, term type: deduce, before: var_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#24  TERM#
##########


##########
#FROM SET#
##########
statement_  :  import_stmt_  %MARK%  
 index is: 79, term type: deduce, before: import_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  import_stmt_  %MARK%  
 index is: 79, term type: deduce, before: import_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#25  TERM#
##########


##########
#FROM SET#
##########
statement_  :  package_stmt_  %MARK%  
 index is: 81, term type: deduce, before: package_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  package_stmt_  %MARK%  
 index is: 81, term type: deduce, before: package_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#26  TERM#
##########


##########
#FROM SET#
##########
statement_  :  prep_stmt_  %MARK%  
 index is: 83, term type: deduce, before: prep_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
statement_  :  prep_stmt_  %MARK%  
 index is: 83, term type: deduce, before: prep_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#27  TERM#
##########


##########
#FROM SET#
##########
expr_stmt_  :  expr_  %MARK%  endline_  
 index is: 398, term type: to_deduce, before: expr_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 399  , change_value: endline_

########
#SUBSET#
########
expr_stmt_  :  expr_  %MARK%  endline_  
 index is: 398, term type: to_deduce, before: expr_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 399  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 28, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



##########
#28  TERM#
##########


##########
#FROM SET#
##########
expr_stmt_  :  expr_  endline_  %MARK%  
 index is: 399, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
expr_stmt_  :  expr_  endline_  %MARK%  
 index is: 399, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#29  TERM#
##########


##########
#FROM SET#
##########
endline_  :  ;  %MARK%  
 index is: 11, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
endline_  :  ;  %MARK%  
 index is: 11, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#30  TERM#
##########


##########
#FROM SET#
##########
endline_  :  ENDL  %MARK%  
 index is: 13, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
endline_  :  ENDL  %MARK%  
 index is: 13, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#31  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  %MARK%  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 375, term type: shift, before: class_stmt_@0_decl_1, after: ID
TARGET LIST: 
target index: 376  , change_value: ID

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  %MARK%  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 375, term type: shift, before: class_stmt_@0_decl_1, after: ID
TARGET LIST: 
target index: 376  , change_value: ID

########
#TO SET#
########
index: 32, target_source: ID



##########
#32  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  ID  %MARK%  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 376, term type: to_deduce, before: ID, after: class_stmt_@0_opt_3
TARGET LIST: 
target index: 377  , change_value: class_stmt_@0_opt_3
target index: 382  , change_value: %NULL%
target index: 383  , change_value: %NULL%

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  ID  %MARK%  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 376, term type: to_deduce, before: ID, after: class_stmt_@0_opt_3
TARGET LIST: 
target index: 377  , change_value: class_stmt_@0_opt_3
target index: 382  , change_value: %NULL%
target index: 383  , change_value: %NULL%

class_stmt_@0_opt_3  :  %MARK%  
 index is: 382, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

class_stmt_@0_opt_3  :  %MARK%  extends  visit_expr_  
 index is: 383, term type: shift, before: %NULL%, after: extends
TARGET LIST: 
target index: 384  , change_value: extends

########
#TO SET#
########
index: 33, target_source: class_stmt_@0_opt_3

index: 422, target_source: extends



##########
#33  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 377, term type: shift, before: class_stmt_@0_opt_3, after: ENDL
TARGET LIST: 
target index: 378  , change_value: ENDL

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 377, term type: shift, before: class_stmt_@0_opt_3, after: ENDL
TARGET LIST: 
target index: 378  , change_value: ENDL

########
#TO SET#
########
index: 34, target_source: ENDL



##########
#34  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 378, term type: to_deduce, before: ENDL, after: decl_stmts_
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 379  , change_value: decl_stmts_

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 378, term type: to_deduce, before: ENDL, after: decl_stmts_
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 379  , change_value: decl_stmts_

decl_stmts_  :  %MARK%  decl_stmts_@0_rep_1  
 index is: 25, term type: to_deduce, before: %NULL%, after: decl_stmts_@0_rep_1
TARGET LIST: 
target index: 26  , change_value: decl_stmts_@0_rep_1
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%

decl_stmts_@0_rep_1  :  %MARK%  
 index is: 27, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1  :  %MARK%  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 28, term type: to_deduce, before: %NULL%, after: declaration_
TARGET LIST: 
target index: 29  , change_value: declaration_
target index: 84  , change_value: %NULL%
target index: 86  , change_value: %NULL%
target index: 88  , change_value: %NULL%
target index: 90  , change_value: %NULL%
target index: 92  , change_value: %NULL%
target index: 94  , change_value: %NULL%

declaration_  :  %MARK%  class_stmt_  
 index is: 84, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 85  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

declaration_  :  %MARK%  function_stmt_  
 index is: 86, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 87  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

declaration_  :  %MARK%  using_stmt_  
 index is: 88, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 89  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

declaration_  :  %MARK%  var_stmt_  
 index is: 90, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 91  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

declaration_  :  %MARK%  namespace_stmt_  
 index is: 92, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 93  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

declaration_  :  %MARK%  prep_stmt_  
 index is: 94, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 95  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

########
#TO SET#
########
index: 35, target_source: decl_stmts_

index: 38, target_source: decl_stmts_@0_rep_1

index: 39, target_source: declaration_

index: 42, target_source: class_stmt_

index: 43, target_source: function_stmt_

index: 44, target_source: using_stmt_

index: 45, target_source: var_stmt_

index: 46, target_source: namespace_stmt_

index: 47, target_source: prep_stmt_

index: 31, target_source: class_stmt_@0_decl_1

index: 48, target_source: function

index: 309, target_source: using

index: 328, target_source: var_stmt_@0_decl_1

index: 322, target_source: namespace

index: 331, target_source: PREP

index: 333, target_source: struct

index: 334, target_source: class

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var



##########
#35  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 379, term type: shift, before: decl_stmts_, after: end
TARGET LIST: 
target index: 380  , change_value: end

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 379, term type: shift, before: decl_stmts_, after: end
TARGET LIST: 
target index: 380  , change_value: end

########
#TO SET#
########
index: 36, target_source: end



##########
#36  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 380, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 381  , change_value: ENDL

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 380, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 381  , change_value: ENDL

########
#TO SET#
########
index: 37, target_source: ENDL



##########
#37  TERM#
##########


##########
#FROM SET#
##########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 381, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
class_stmt_  :  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 381, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#38  TERM#
##########


##########
#FROM SET#
##########
decl_stmts_  :  decl_stmts_@0_rep_1  %MARK%  
 index is: 26, term type: deduce, before: decl_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
decl_stmts_  :  decl_stmts_@0_rep_1  %MARK%  
 index is: 26, term type: deduce, before: decl_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#39  TERM#
##########


##########
#FROM SET#
##########
decl_stmts_@0_rep_1  :  declaration_  %MARK%  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 29, term type: to_deduce, before: declaration_, after: decl_stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 30  , change_value: decl_stmts_@0_rep_1@0_rep_2
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%

########
#SUBSET#
########
decl_stmts_@0_rep_1  :  declaration_  %MARK%  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 29, term type: to_deduce, before: declaration_, after: decl_stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 30  , change_value: decl_stmts_@0_rep_1@0_rep_2
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%

decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 32, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  decl_stmts_@0_rep_1@0_rep_2  
 index is: 33, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 34  , change_value: ENDL

########
#TO SET#
########
index: 40, target_source: decl_stmts_@0_rep_1@0_rep_2

index: 420, target_source: ENDL



##########
#40  TERM#
##########


##########
#FROM SET#
##########
decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  %MARK%  decl_stmts_@0_rep_1  
 index is: 30, term type: to_deduce, before: decl_stmts_@0_rep_1@0_rep_2, after: decl_stmts_@0_rep_1
TARGET LIST: 
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%
target index: 31  , change_value: decl_stmts_@0_rep_1

########
#SUBSET#
########
decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  %MARK%  decl_stmts_@0_rep_1  
 index is: 30, term type: to_deduce, before: decl_stmts_@0_rep_1@0_rep_2, after: decl_stmts_@0_rep_1
TARGET LIST: 
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%
target index: 31  , change_value: decl_stmts_@0_rep_1

decl_stmts_@0_rep_1  :  %MARK%  
 index is: 27, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1  :  %MARK%  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 28, term type: to_deduce, before: %NULL%, after: declaration_
TARGET LIST: 
target index: 29  , change_value: declaration_
target index: 84  , change_value: %NULL%
target index: 86  , change_value: %NULL%
target index: 88  , change_value: %NULL%
target index: 90  , change_value: %NULL%
target index: 92  , change_value: %NULL%
target index: 94  , change_value: %NULL%

declaration_  :  %MARK%  class_stmt_  
 index is: 84, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 85  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

declaration_  :  %MARK%  function_stmt_  
 index is: 86, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 87  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

declaration_  :  %MARK%  using_stmt_  
 index is: 88, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 89  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

declaration_  :  %MARK%  var_stmt_  
 index is: 90, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 91  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

declaration_  :  %MARK%  namespace_stmt_  
 index is: 92, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 93  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

declaration_  :  %MARK%  prep_stmt_  
 index is: 94, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 95  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

########
#TO SET#
########
index: 41, target_source: decl_stmts_@0_rep_1

index: 39, target_source: declaration_

index: 42, target_source: class_stmt_

index: 43, target_source: function_stmt_

index: 44, target_source: using_stmt_

index: 45, target_source: var_stmt_

index: 46, target_source: namespace_stmt_

index: 47, target_source: prep_stmt_

index: 31, target_source: class_stmt_@0_decl_1

index: 48, target_source: function

index: 309, target_source: using

index: 328, target_source: var_stmt_@0_decl_1

index: 322, target_source: namespace

index: 331, target_source: PREP

index: 333, target_source: struct

index: 334, target_source: class

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var



##########
#41  TERM#
##########


##########
#FROM SET#
##########
decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  %MARK%  
 index is: 31, term type: deduce, before: decl_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
decl_stmts_@0_rep_1  :  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  %MARK%  
 index is: 31, term type: deduce, before: decl_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#42  TERM#
##########


##########
#FROM SET#
##########
declaration_  :  class_stmt_  %MARK%  
 index is: 85, term type: deduce, before: class_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
declaration_  :  class_stmt_  %MARK%  
 index is: 85, term type: deduce, before: class_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#43  TERM#
##########


##########
#FROM SET#
##########
declaration_  :  function_stmt_  %MARK%  
 index is: 87, term type: deduce, before: function_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
declaration_  :  function_stmt_  %MARK%  
 index is: 87, term type: deduce, before: function_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#44  TERM#
##########


##########
#FROM SET#
##########
declaration_  :  using_stmt_  %MARK%  
 index is: 89, term type: deduce, before: using_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
declaration_  :  using_stmt_  %MARK%  
 index is: 89, term type: deduce, before: using_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#45  TERM#
##########


##########
#FROM SET#
##########
declaration_  :  var_stmt_  %MARK%  
 index is: 91, term type: deduce, before: var_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
declaration_  :  var_stmt_  %MARK%  
 index is: 91, term type: deduce, before: var_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#46  TERM#
##########


##########
#FROM SET#
##########
declaration_  :  namespace_stmt_  %MARK%  
 index is: 93, term type: deduce, before: namespace_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
declaration_  :  namespace_stmt_  %MARK%  
 index is: 93, term type: deduce, before: namespace_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#47  TERM#
##########


##########
#FROM SET#
##########
declaration_  :  prep_stmt_  %MARK%  
 index is: 95, term type: deduce, before: prep_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
declaration_  :  prep_stmt_  %MARK%  
 index is: 95, term type: deduce, before: prep_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#48  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  %MARK%  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 315, term type: shift, before: function, after: ID
TARGET LIST: 
target index: 316  , change_value: ID

########
#SUBSET#
########
function_stmt_  :  function  %MARK%  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 315, term type: shift, before: function, after: ID
TARGET LIST: 
target index: 316  , change_value: ID

########
#TO SET#
########
index: 49, target_source: ID



##########
#49  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  ID  %MARK%  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 316, term type: shift, before: ID, after: (
TARGET LIST: 
target index: 317  , change_value: (

########
#SUBSET#
########
function_stmt_  :  function  ID  %MARK%  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 316, term type: shift, before: ID, after: (
TARGET LIST: 
target index: 317  , change_value: (

########
#TO SET#
########
index: 50, target_source: (



##########
#50  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  ID  (  %MARK%  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 317, term type: to_deduce, before: (, after: function_stmt_@0_opt_4
TARGET LIST: 
target index: 318  , change_value: function_stmt_@0_opt_4
target index: 325  , change_value: %NULL%
target index: 326  , change_value: %NULL%

########
#SUBSET#
########
function_stmt_  :  function  ID  (  %MARK%  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 317, term type: to_deduce, before: (, after: function_stmt_@0_opt_4
TARGET LIST: 
target index: 318  , change_value: function_stmt_@0_opt_4
target index: 325  , change_value: %NULL%
target index: 326  , change_value: %NULL%

function_stmt_@0_opt_4  :  %MARK%  
 index is: 325, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

function_stmt_@0_opt_4  :  %MARK%  argument_list_  
 index is: 326, term type: to_deduce, before: %NULL%, after: argument_list_
TARGET LIST: 
target index: 327  , change_value: argument_list_
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%

argument_list_  :  %MARK%  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 467, term type: to_deduce, before: %NULL%, after: argument_list_@1_opt_1
TARGET LIST: 
target index: 468  , change_value: argument_list_@1_opt_1
target index: 484  , change_value: %NULL%
target index: 485  , change_value: %NULL%

argument_list_  :  %MARK%  ...  ID  
 index is: 473, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 474  , change_value: ...

argument_list_@1_opt_1  :  %MARK%  
 index is: 484, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_1  :  %MARK%  =  
 index is: 485, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 486  , change_value: =

########
#TO SET#
########
index: 51, target_source: function_stmt_@0_opt_4

index: 419, target_source: argument_list_

index: 367, target_source: argument_list_@1_opt_1

index: 375, target_source: ...

index: 377, target_source: =



##########
#51  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  %MARK%  )  function_stmt_@0_opt_6  function_body_  
 index is: 318, term type: shift, before: function_stmt_@0_opt_4, after: )
TARGET LIST: 
target index: 319  , change_value: )

########
#SUBSET#
########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  %MARK%  )  function_stmt_@0_opt_6  function_body_  
 index is: 318, term type: shift, before: function_stmt_@0_opt_4, after: )
TARGET LIST: 
target index: 319  , change_value: )

########
#TO SET#
########
index: 52, target_source: )



##########
#52  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  %MARK%  function_stmt_@0_opt_6  function_body_  
 index is: 319, term type: to_deduce, before: ), after: function_stmt_@0_opt_6
TARGET LIST: 
target index: 320  , change_value: function_stmt_@0_opt_6
target index: 322  , change_value: %NULL%
target index: 323  , change_value: %NULL%

########
#SUBSET#
########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  %MARK%  function_stmt_@0_opt_6  function_body_  
 index is: 319, term type: to_deduce, before: ), after: function_stmt_@0_opt_6
TARGET LIST: 
target index: 320  , change_value: function_stmt_@0_opt_6
target index: 322  , change_value: %NULL%
target index: 323  , change_value: %NULL%

function_stmt_@0_opt_6  :  %MARK%  
 index is: 322, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

function_stmt_@0_opt_6  :  %MARK%  override  
 index is: 323, term type: shift, before: %NULL%, after: override
TARGET LIST: 
target index: 324  , change_value: override

########
#TO SET#
########
index: 53, target_source: function_stmt_@0_opt_6

index: 418, target_source: override



##########
#53  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  %MARK%  function_body_  
 index is: 320, term type: to_deduce, before: function_stmt_@0_opt_6, after: function_body_
TARGET LIST: 
target index: 321  , change_value: function_body_
target index: 328  , change_value: %NULL%

########
#SUBSET#
########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  %MARK%  function_body_  
 index is: 320, term type: to_deduce, before: function_stmt_@0_opt_6, after: function_body_
TARGET LIST: 
target index: 321  , change_value: function_body_
target index: 328  , change_value: %NULL%

function_body_  :  %MARK%  function_body_@0_decl_1  
 index is: 328, term type: to_deduce, before: %NULL%, after: function_body_@0_decl_1
TARGET LIST: 
target index: 329  , change_value: function_body_@0_decl_1
target index: 330  , change_value: %NULL%
target index: 335  , change_value: %NULL%

function_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 330, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 331  , change_value: ENDL

function_body_@0_decl_1  :  %MARK%  {  stmts_  }  
 index is: 335, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 336  , change_value: {

########
#TO SET#
########
index: 54, target_source: function_body_

index: 55, target_source: function_body_@0_decl_1

index: 56, target_source: ENDL

index: 415, target_source: {



##########
#54  TERM#
##########


##########
#FROM SET#
##########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  %MARK%  
 index is: 321, term type: deduce, before: function_body_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
function_stmt_  :  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  %MARK%  
 index is: 321, term type: deduce, before: function_body_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#55  TERM#
##########


##########
#FROM SET#
##########
function_body_  :  function_body_@0_decl_1  %MARK%  
 index is: 329, term type: deduce, before: function_body_@0_decl_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
function_body_  :  function_body_@0_decl_1  %MARK%  
 index is: 329, term type: deduce, before: function_body_@0_decl_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#56  TERM#
##########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 331, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 332  , change_value: stmts_

########
#SUBSET#
########
function_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 331, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 332  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 57, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



##########
#57  TERM#
##########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 332, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 333  , change_value: end

########
#SUBSET#
########
function_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 332, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 333  , change_value: end

########
#TO SET#
########
index: 58, target_source: end



##########
#58  TERM#
##########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 333, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 334  , change_value: ENDL

########
#SUBSET#
########
function_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 333, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 334  , change_value: ENDL

########
#TO SET#
########
index: 59, target_source: ENDL



##########
#59  TERM#
##########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 334, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
function_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 334, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#60  TERM#
##########


##########
#FROM SET#
##########
throw_stmt_  :  throw  %MARK%  throw_stmt_@0_opt_2  endline_  
 index is: 368, term type: to_deduce, before: throw, after: throw_stmt_@0_opt_2
TARGET LIST: 
target index: 369  , change_value: throw_stmt_@0_opt_2
target index: 371  , change_value: %NULL%
target index: 372  , change_value: %NULL%

########
#SUBSET#
########
throw_stmt_  :  throw  %MARK%  throw_stmt_@0_opt_2  endline_  
 index is: 368, term type: to_deduce, before: throw, after: throw_stmt_@0_opt_2
TARGET LIST: 
target index: 369  , change_value: throw_stmt_@0_opt_2
target index: 371  , change_value: %NULL%
target index: 372  , change_value: %NULL%

throw_stmt_@0_opt_2  :  %MARK%  
 index is: 371, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

throw_stmt_@0_opt_2  :  %MARK%  expr_  
 index is: 372, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 373  , change_value: expr_
target index: 403  , change_value: %NULL%

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 61, target_source: throw_stmt_@0_opt_2

index: 63, target_source: expr_

index: 64, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



##########
#61  TERM#
##########


##########
#FROM SET#
##########
throw_stmt_  :  throw  throw_stmt_@0_opt_2  %MARK%  endline_  
 index is: 369, term type: to_deduce, before: throw_stmt_@0_opt_2, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 370  , change_value: endline_

########
#SUBSET#
########
throw_stmt_  :  throw  throw_stmt_@0_opt_2  %MARK%  endline_  
 index is: 369, term type: to_deduce, before: throw_stmt_@0_opt_2, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 370  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 62, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



##########
#62  TERM#
##########


##########
#FROM SET#
##########
throw_stmt_  :  throw  throw_stmt_@0_opt_2  endline_  %MARK%  
 index is: 370, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
throw_stmt_  :  throw  throw_stmt_@0_opt_2  endline_  %MARK%  
 index is: 370, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#63  TERM#
##########


##########
#FROM SET#
##########
throw_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 373, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
throw_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 373, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#64  TERM#
##########


##########
#FROM SET#
##########
expr_  :  single_expr_  %MARK%  expr_@0_opt_2  
 index is: 404, term type: to_deduce, before: single_expr_, after: expr_@0_opt_2
TARGET LIST: 
target index: 405  , change_value: expr_@0_opt_2
target index: 406  , change_value: %NULL%
target index: 407  , change_value: %NULL%

########
#SUBSET#
########
expr_  :  single_expr_  %MARK%  expr_@0_opt_2  
 index is: 404, term type: to_deduce, before: single_expr_, after: expr_@0_opt_2
TARGET LIST: 
target index: 405  , change_value: expr_@0_opt_2
target index: 406  , change_value: %NULL%
target index: 407  , change_value: %NULL%

expr_@0_opt_2  :  %MARK%  
 index is: 406, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

expr_@0_opt_2  :  %MARK%  ,  expr_  
 index is: 407, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 408  , change_value: ,

########
#TO SET#
########
index: 65, target_source: expr_@0_opt_2

index: 66, target_source: ,



##########
#65  TERM#
##########


##########
#FROM SET#
##########
expr_  :  single_expr_  expr_@0_opt_2  %MARK%  
 index is: 405, term type: deduce, before: expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
expr_  :  single_expr_  expr_@0_opt_2  %MARK%  
 index is: 405, term type: deduce, before: expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#66  TERM#
##########


##########
#FROM SET#
##########
expr_@0_opt_2  :  ,  %MARK%  expr_  
 index is: 408, term type: to_deduce, before: ,, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 409  , change_value: expr_

########
#SUBSET#
########
expr_@0_opt_2  :  ,  %MARK%  expr_  
 index is: 408, term type: to_deduce, before: ,, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 409  , change_value: expr_

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 67, target_source: expr_

index: 64, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



##########
#67  TERM#
##########


##########
#FROM SET#
##########
expr_@0_opt_2  :  ,  expr_  %MARK%  
 index is: 409, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
expr_@0_opt_2  :  ,  expr_  %MARK%  
 index is: 409, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#68  TERM#
##########


##########
#FROM SET#
##########
single_expr_  :  basic_expr_  %MARK%  
 index is: 411, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
single_expr_  :  basic_expr_  %MARK%  
 index is: 411, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#69  TERM#
##########


##########
#FROM SET#
##########
single_expr_  :  lambda_expr_  %MARK%  
 index is: 413, term type: deduce, before: lambda_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
single_expr_  :  lambda_expr_  %MARK%  
 index is: 413, term type: deduce, before: lambda_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#70  TERM#
##########


##########
#FROM SET#
##########
basic_expr_  :  cond_expr_  %MARK%  basic_expr_@1_opt_2  
 index is: 415, term type: to_deduce, before: cond_expr_, after: basic_expr_@1_opt_2
TARGET LIST: 
target index: 416  , change_value: basic_expr_@1_opt_2
target index: 421  , change_value: %NULL%
target index: 422  , change_value: %NULL%

########
#SUBSET#
########
basic_expr_  :  cond_expr_  %MARK%  basic_expr_@1_opt_2  
 index is: 415, term type: to_deduce, before: cond_expr_, after: basic_expr_@1_opt_2
TARGET LIST: 
target index: 416  , change_value: basic_expr_@1_opt_2
target index: 421  , change_value: %NULL%
target index: 422  , change_value: %NULL%

basic_expr_@1_opt_2  :  %MARK%  
 index is: 421, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

basic_expr_@1_opt_2  :  %MARK%  asi_op_  single_expr_  
 index is: 422, term type: to_deduce, before: %NULL%, after: asi_op_
TARGET LIST: 
target index: 423  , change_value: asi_op_
target index: 425  , change_value: %NULL%
target index: 427  , change_value: %NULL%
target index: 429  , change_value: %NULL%
target index: 431  , change_value: %NULL%
target index: 433  , change_value: %NULL%
target index: 435  , change_value: %NULL%
target index: 437  , change_value: %NULL%
target index: 439  , change_value: %NULL%

asi_op_  :  %MARK%  ^=  
 index is: 425, term type: shift, before: %NULL%, after: ^=
TARGET LIST: 
target index: 426  , change_value: ^=

asi_op_  :  %MARK%  %=  
 index is: 427, term type: shift, before: %NULL%, after: %=
TARGET LIST: 
target index: 428  , change_value: %=

asi_op_  :  %MARK%  /=  
 index is: 429, term type: shift, before: %NULL%, after: /=
TARGET LIST: 
target index: 430  , change_value: /=

asi_op_  :  %MARK%  *=  
 index is: 431, term type: shift, before: %NULL%, after: *=
TARGET LIST: 
target index: 432  , change_value: *=

asi_op_  :  %MARK%  -=  
 index is: 433, term type: shift, before: %NULL%, after: -=
TARGET LIST: 
target index: 434  , change_value: -=

asi_op_  :  %MARK%  +=  
 index is: 435, term type: shift, before: %NULL%, after: +=
TARGET LIST: 
target index: 436  , change_value: +=

asi_op_  :  %MARK%  :=  
 index is: 437, term type: shift, before: %NULL%, after: :=
TARGET LIST: 
target index: 438  , change_value: :=

asi_op_  :  %MARK%  =  
 index is: 439, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 440  , change_value: =

########
#TO SET#
########
index: 71, target_source: basic_expr_@1_opt_2

index: 72, target_source: asi_op_

index: 407, target_source: ^=

index: 408, target_source: %=

index: 409, target_source: /=

index: 410, target_source: *=

index: 411, target_source: -=

index: 412, target_source: +=

index: 413, target_source: :=

index: 414, target_source: =



##########
#71  TERM#
##########


##########
#FROM SET#
##########
basic_expr_  :  cond_expr_  basic_expr_@1_opt_2  %MARK%  
 index is: 416, term type: deduce, before: basic_expr_@1_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
basic_expr_  :  cond_expr_  basic_expr_@1_opt_2  %MARK%  
 index is: 416, term type: deduce, before: basic_expr_@1_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#72  TERM#
##########


##########
#FROM SET#
##########
basic_expr_@1_opt_2  :  asi_op_  %MARK%  single_expr_  
 index is: 423, term type: to_deduce, before: asi_op_, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 424  , change_value: single_expr_

########
#SUBSET#
########
basic_expr_@1_opt_2  :  asi_op_  %MARK%  single_expr_  
 index is: 423, term type: to_deduce, before: asi_op_, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 424  , change_value: single_expr_

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 73, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



##########
#73  TERM#
##########


##########
#FROM SET#
##########
basic_expr_@1_opt_2  :  asi_op_  single_expr_  %MARK%  
 index is: 424, term type: deduce, before: single_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
basic_expr_@1_opt_2  :  asi_op_  single_expr_  %MARK%  
 index is: 424, term type: deduce, before: single_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#74  TERM#
##########


##########
#FROM SET#
##########
basic_expr_  :  var_bind_  %MARK%  =  cond_expr_  
 index is: 418, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 419  , change_value: =

########
#SUBSET#
########
basic_expr_  :  var_bind_  %MARK%  =  cond_expr_  
 index is: 418, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 419  , change_value: =

########
#TO SET#
########
index: 75, target_source: =



##########
#75  TERM#
##########


##########
#FROM SET#
##########
basic_expr_  :  var_bind_  =  %MARK%  cond_expr_  
 index is: 419, term type: to_deduce, before: =, after: cond_expr_
TARGET LIST: 
target index: 420  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

########
#SUBSET#
########
basic_expr_  :  var_bind_  =  %MARK%  cond_expr_  
 index is: 419, term type: to_deduce, before: =, after: cond_expr_
TARGET LIST: 
target index: 420  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 76, target_source: cond_expr_

index: 77, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



##########
#76  TERM#
##########


##########
#FROM SET#
##########
basic_expr_  :  var_bind_  =  cond_expr_  %MARK%  
 index is: 420, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
basic_expr_  :  var_bind_  =  cond_expr_  %MARK%  
 index is: 420, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#77  TERM#
##########


##########
#FROM SET#
##########
cond_expr_  :  logic_or_expr_  %MARK%  cond_expr_@0_opt_2  
 index is: 504, term type: to_deduce, before: logic_or_expr_, after: cond_expr_@0_opt_2
TARGET LIST: 
target index: 505  , change_value: cond_expr_@0_opt_2
target index: 506  , change_value: %NULL%
target index: 507  , change_value: %NULL%

########
#SUBSET#
########
cond_expr_  :  logic_or_expr_  %MARK%  cond_expr_@0_opt_2  
 index is: 504, term type: to_deduce, before: logic_or_expr_, after: cond_expr_@0_opt_2
TARGET LIST: 
target index: 505  , change_value: cond_expr_@0_opt_2
target index: 506  , change_value: %NULL%
target index: 507  , change_value: %NULL%

cond_expr_@0_opt_2  :  %MARK%  
 index is: 506, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

cond_expr_@0_opt_2  :  %MARK%  cond_postfix_  
 index is: 507, term type: to_deduce, before: %NULL%, after: cond_postfix_
TARGET LIST: 
target index: 508  , change_value: cond_postfix_
target index: 509  , change_value: %NULL%
target index: 512  , change_value: %NULL%

cond_postfix_  :  %MARK%  :  logic_or_expr_  
 index is: 509, term type: shift, before: %NULL%, after: :
TARGET LIST: 
target index: 510  , change_value: :

cond_postfix_  :  %MARK%  ?  logic_or_expr_  :  cond_expr_  
 index is: 512, term type: shift, before: %NULL%, after: ?
TARGET LIST: 
target index: 513  , change_value: ?

########
#TO SET#
########
index: 78, target_source: cond_expr_@0_opt_2

index: 79, target_source: cond_postfix_

index: 80, target_source: :

index: 403, target_source: ?



##########
#78  TERM#
##########


##########
#FROM SET#
##########
cond_expr_  :  logic_or_expr_  cond_expr_@0_opt_2  %MARK%  
 index is: 505, term type: deduce, before: cond_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
cond_expr_  :  logic_or_expr_  cond_expr_@0_opt_2  %MARK%  
 index is: 505, term type: deduce, before: cond_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#79  TERM#
##########


##########
#FROM SET#
##########
cond_expr_@0_opt_2  :  cond_postfix_  %MARK%  
 index is: 508, term type: deduce, before: cond_postfix_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
cond_expr_@0_opt_2  :  cond_postfix_  %MARK%  
 index is: 508, term type: deduce, before: cond_postfix_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#80  TERM#
##########


##########
#FROM SET#
##########
cond_postfix_  :  :  %MARK%  logic_or_expr_  
 index is: 510, term type: to_deduce, before: :, after: logic_or_expr_
TARGET LIST: 
target index: 511  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

########
#SUBSET#
########
cond_postfix_  :  :  %MARK%  logic_or_expr_  
 index is: 510, term type: to_deduce, before: :, after: logic_or_expr_
TARGET LIST: 
target index: 511  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 81, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



##########
#81  TERM#
##########


##########
#FROM SET#
##########
cond_postfix_  :  :  logic_or_expr_  %MARK%  
 index is: 511, term type: deduce, before: logic_or_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
cond_postfix_  :  :  logic_or_expr_  %MARK%  
 index is: 511, term type: deduce, before: logic_or_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#82  TERM#
##########


##########
#FROM SET#
##########
logic_or_expr_  :  logic_and_expr_  %MARK%  logic_or_expr_@0_opt_2  
 index is: 518, term type: to_deduce, before: logic_and_expr_, after: logic_or_expr_@0_opt_2
TARGET LIST: 
target index: 519  , change_value: logic_or_expr_@0_opt_2
target index: 520  , change_value: %NULL%
target index: 521  , change_value: %NULL%

########
#SUBSET#
########
logic_or_expr_  :  logic_and_expr_  %MARK%  logic_or_expr_@0_opt_2  
 index is: 518, term type: to_deduce, before: logic_and_expr_, after: logic_or_expr_@0_opt_2
TARGET LIST: 
target index: 519  , change_value: logic_or_expr_@0_opt_2
target index: 520  , change_value: %NULL%
target index: 521  , change_value: %NULL%

logic_or_expr_@0_opt_2  :  %MARK%  
 index is: 520, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

logic_or_expr_@0_opt_2  :  %MARK%  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  
 index is: 521, term type: to_deduce, before: %NULL%, after: logic_or_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 522  , change_value: logic_or_expr_@0_opt_2@0_decl_1
target index: 524  , change_value: %NULL%
target index: 526  , change_value: %NULL%

logic_or_expr_@0_opt_2@0_decl_1  :  %MARK%  or  
 index is: 524, term type: shift, before: %NULL%, after: or
TARGET LIST: 
target index: 525  , change_value: or

logic_or_expr_@0_opt_2@0_decl_1  :  %MARK%  ||  
 index is: 526, term type: shift, before: %NULL%, after: ||
TARGET LIST: 
target index: 527  , change_value: ||

########
#TO SET#
########
index: 83, target_source: logic_or_expr_@0_opt_2

index: 84, target_source: logic_or_expr_@0_opt_2@0_decl_1

index: 401, target_source: or

index: 402, target_source: ||



##########
#83  TERM#
##########


##########
#FROM SET#
##########
logic_or_expr_  :  logic_and_expr_  logic_or_expr_@0_opt_2  %MARK%  
 index is: 519, term type: deduce, before: logic_or_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_or_expr_  :  logic_and_expr_  logic_or_expr_@0_opt_2  %MARK%  
 index is: 519, term type: deduce, before: logic_or_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#84  TERM#
##########


##########
#FROM SET#
##########
logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  %MARK%  logic_or_expr_  
 index is: 522, term type: to_deduce, before: logic_or_expr_@0_opt_2@0_decl_1, after: logic_or_expr_
TARGET LIST: 
target index: 517  , change_value: %NULL%
target index: 523  , change_value: logic_or_expr_

########
#SUBSET#
########
logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  %MARK%  logic_or_expr_  
 index is: 522, term type: to_deduce, before: logic_or_expr_@0_opt_2@0_decl_1, after: logic_or_expr_
TARGET LIST: 
target index: 517  , change_value: %NULL%
target index: 523  , change_value: logic_or_expr_

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 85, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



##########
#85  TERM#
##########


##########
#FROM SET#
##########
logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  %MARK%  
 index is: 523, term type: deduce, before: logic_or_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_or_expr_@0_opt_2  :  logic_or_expr_@0_opt_2@0_decl_1  logic_or_expr_  %MARK%  
 index is: 523, term type: deduce, before: logic_or_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#86  TERM#
##########


##########
#FROM SET#
##########
logic_and_expr_  :  equal_expr_  %MARK%  logic_and_expr_@0_opt_2  
 index is: 529, term type: to_deduce, before: equal_expr_, after: logic_and_expr_@0_opt_2
TARGET LIST: 
target index: 530  , change_value: logic_and_expr_@0_opt_2
target index: 531  , change_value: %NULL%
target index: 532  , change_value: %NULL%

########
#SUBSET#
########
logic_and_expr_  :  equal_expr_  %MARK%  logic_and_expr_@0_opt_2  
 index is: 529, term type: to_deduce, before: equal_expr_, after: logic_and_expr_@0_opt_2
TARGET LIST: 
target index: 530  , change_value: logic_and_expr_@0_opt_2
target index: 531  , change_value: %NULL%
target index: 532  , change_value: %NULL%

logic_and_expr_@0_opt_2  :  %MARK%  
 index is: 531, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

logic_and_expr_@0_opt_2  :  %MARK%  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  
 index is: 532, term type: to_deduce, before: %NULL%, after: logic_and_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 533  , change_value: logic_and_expr_@0_opt_2@0_decl_1
target index: 535  , change_value: %NULL%
target index: 537  , change_value: %NULL%

logic_and_expr_@0_opt_2@0_decl_1  :  %MARK%  and  
 index is: 535, term type: shift, before: %NULL%, after: and
TARGET LIST: 
target index: 536  , change_value: and

logic_and_expr_@0_opt_2@0_decl_1  :  %MARK%  &&  
 index is: 537, term type: shift, before: %NULL%, after: &&
TARGET LIST: 
target index: 538  , change_value: &&

########
#TO SET#
########
index: 87, target_source: logic_and_expr_@0_opt_2

index: 88, target_source: logic_and_expr_@0_opt_2@0_decl_1

index: 399, target_source: and

index: 400, target_source: &&



##########
#87  TERM#
##########


##########
#FROM SET#
##########
logic_and_expr_  :  equal_expr_  logic_and_expr_@0_opt_2  %MARK%  
 index is: 530, term type: deduce, before: logic_and_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_and_expr_  :  equal_expr_  logic_and_expr_@0_opt_2  %MARK%  
 index is: 530, term type: deduce, before: logic_and_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#88  TERM#
##########


##########
#FROM SET#
##########
logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  %MARK%  logic_and_expr_  
 index is: 533, term type: to_deduce, before: logic_and_expr_@0_opt_2@0_decl_1, after: logic_and_expr_
TARGET LIST: 
target index: 528  , change_value: %NULL%
target index: 534  , change_value: logic_and_expr_

########
#SUBSET#
########
logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  %MARK%  logic_and_expr_  
 index is: 533, term type: to_deduce, before: logic_and_expr_@0_opt_2@0_decl_1, after: logic_and_expr_
TARGET LIST: 
target index: 528  , change_value: %NULL%
target index: 534  , change_value: logic_and_expr_

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 89, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



##########
#89  TERM#
##########


##########
#FROM SET#
##########
logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  %MARK%  
 index is: 534, term type: deduce, before: logic_and_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_and_expr_@0_opt_2  :  logic_and_expr_@0_opt_2@0_decl_1  logic_and_expr_  %MARK%  
 index is: 534, term type: deduce, before: logic_and_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#90  TERM#
##########


##########
#FROM SET#
##########
equal_expr_  :  relat_expr_  %MARK%  equal_expr_@0_opt_2  
 index is: 540, term type: to_deduce, before: relat_expr_, after: equal_expr_@0_opt_2
TARGET LIST: 
target index: 541  , change_value: equal_expr_@0_opt_2
target index: 542  , change_value: %NULL%
target index: 543  , change_value: %NULL%

########
#SUBSET#
########
equal_expr_  :  relat_expr_  %MARK%  equal_expr_@0_opt_2  
 index is: 540, term type: to_deduce, before: relat_expr_, after: equal_expr_@0_opt_2
TARGET LIST: 
target index: 541  , change_value: equal_expr_@0_opt_2
target index: 542  , change_value: %NULL%
target index: 543  , change_value: %NULL%

equal_expr_@0_opt_2  :  %MARK%  
 index is: 542, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

equal_expr_@0_opt_2  :  %MARK%  equal_expr_@0_opt_2@0_decl_1  equal_expr_  
 index is: 543, term type: to_deduce, before: %NULL%, after: equal_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 544  , change_value: equal_expr_@0_opt_2@0_decl_1
target index: 546  , change_value: %NULL%
target index: 548  , change_value: %NULL%

equal_expr_@0_opt_2@0_decl_1  :  %MARK%  !=  
 index is: 546, term type: shift, before: %NULL%, after: !=
TARGET LIST: 
target index: 547  , change_value: !=

equal_expr_@0_opt_2@0_decl_1  :  %MARK%  ==  
 index is: 548, term type: shift, before: %NULL%, after: ==
TARGET LIST: 
target index: 549  , change_value: ==

########
#TO SET#
########
index: 91, target_source: equal_expr_@0_opt_2

index: 92, target_source: equal_expr_@0_opt_2@0_decl_1

index: 397, target_source: !=

index: 398, target_source: ==



##########
#91  TERM#
##########


##########
#FROM SET#
##########
equal_expr_  :  relat_expr_  equal_expr_@0_opt_2  %MARK%  
 index is: 541, term type: deduce, before: equal_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
equal_expr_  :  relat_expr_  equal_expr_@0_opt_2  %MARK%  
 index is: 541, term type: deduce, before: equal_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#92  TERM#
##########


##########
#FROM SET#
##########
equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  %MARK%  equal_expr_  
 index is: 544, term type: to_deduce, before: equal_expr_@0_opt_2@0_decl_1, after: equal_expr_
TARGET LIST: 
target index: 539  , change_value: %NULL%
target index: 545  , change_value: equal_expr_

########
#SUBSET#
########
equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  %MARK%  equal_expr_  
 index is: 544, term type: to_deduce, before: equal_expr_@0_opt_2@0_decl_1, after: equal_expr_
TARGET LIST: 
target index: 539  , change_value: %NULL%
target index: 545  , change_value: equal_expr_

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 93, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



##########
#93  TERM#
##########


##########
#FROM SET#
##########
equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  equal_expr_  %MARK%  
 index is: 545, term type: deduce, before: equal_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
equal_expr_@0_opt_2  :  equal_expr_@0_opt_2@0_decl_1  equal_expr_  %MARK%  
 index is: 545, term type: deduce, before: equal_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#94  TERM#
##########


##########
#FROM SET#
##########
relat_expr_  :  add_expr_  %MARK%  relat_expr_@0_opt_2  
 index is: 551, term type: to_deduce, before: add_expr_, after: relat_expr_@0_opt_2
TARGET LIST: 
target index: 552  , change_value: relat_expr_@0_opt_2
target index: 553  , change_value: %NULL%
target index: 554  , change_value: %NULL%

########
#SUBSET#
########
relat_expr_  :  add_expr_  %MARK%  relat_expr_@0_opt_2  
 index is: 551, term type: to_deduce, before: add_expr_, after: relat_expr_@0_opt_2
TARGET LIST: 
target index: 552  , change_value: relat_expr_@0_opt_2
target index: 553  , change_value: %NULL%
target index: 554  , change_value: %NULL%

relat_expr_@0_opt_2  :  %MARK%  
 index is: 553, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

relat_expr_@0_opt_2  :  %MARK%  relat_expr_@0_opt_2@0_decl_1  relat_expr_  
 index is: 554, term type: to_deduce, before: %NULL%, after: relat_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 555  , change_value: relat_expr_@0_opt_2@0_decl_1
target index: 557  , change_value: %NULL%
target index: 559  , change_value: %NULL%
target index: 561  , change_value: %NULL%
target index: 563  , change_value: %NULL%

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  <=  
 index is: 557, term type: shift, before: %NULL%, after: <=
TARGET LIST: 
target index: 558  , change_value: <=

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  >=  
 index is: 559, term type: shift, before: %NULL%, after: >=
TARGET LIST: 
target index: 560  , change_value: >=

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  <  
 index is: 561, term type: shift, before: %NULL%, after: <
TARGET LIST: 
target index: 562  , change_value: <

relat_expr_@0_opt_2@0_decl_1  :  %MARK%  >  
 index is: 563, term type: shift, before: %NULL%, after: >
TARGET LIST: 
target index: 564  , change_value: >

########
#TO SET#
########
index: 95, target_source: relat_expr_@0_opt_2

index: 96, target_source: relat_expr_@0_opt_2@0_decl_1

index: 393, target_source: <=

index: 394, target_source: >=

index: 395, target_source: <

index: 396, target_source: >



##########
#95  TERM#
##########


##########
#FROM SET#
##########
relat_expr_  :  add_expr_  relat_expr_@0_opt_2  %MARK%  
 index is: 552, term type: deduce, before: relat_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
relat_expr_  :  add_expr_  relat_expr_@0_opt_2  %MARK%  
 index is: 552, term type: deduce, before: relat_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#96  TERM#
##########


##########
#FROM SET#
##########
relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  %MARK%  relat_expr_  
 index is: 555, term type: to_deduce, before: relat_expr_@0_opt_2@0_decl_1, after: relat_expr_
TARGET LIST: 
target index: 550  , change_value: %NULL%
target index: 556  , change_value: relat_expr_

########
#SUBSET#
########
relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  %MARK%  relat_expr_  
 index is: 555, term type: to_deduce, before: relat_expr_@0_opt_2@0_decl_1, after: relat_expr_
TARGET LIST: 
target index: 550  , change_value: %NULL%
target index: 556  , change_value: relat_expr_

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 97, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



##########
#97  TERM#
##########


##########
#FROM SET#
##########
relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  relat_expr_  %MARK%  
 index is: 556, term type: deduce, before: relat_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
relat_expr_@0_opt_2  :  relat_expr_@0_opt_2@0_decl_1  relat_expr_  %MARK%  
 index is: 556, term type: deduce, before: relat_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


##########
#98  TERM#
##########


##########
#FROM SET#
##########
add_expr_  :  mul_expr_  %MARK%  add_expr_@0_opt_2  
 index is: 566, term type: to_deduce, before: mul_expr_, after: add_expr_@0_opt_2
TARGET LIST: 
target index: 567  , change_value: add_expr_@0_opt_2
target index: 568  , change_value: %NULL%
target index: 569  , change_value: %NULL%

########
#SUBSET#
########
add_expr_  :  mul_expr_  %MARK%  add_expr_@0_opt_2  
 index is: 566, term type: to_deduce, before: mul_expr_, after: add_expr_@0_opt_2
TARGET LIST: 
target index: 567  , change_value: add_expr_@0_opt_2
target index: 568  , change_value: %NULL%
target index: 569  , change_value: %NULL%

add_expr_@0_opt_2  :  %MARK%  
 index is: 568, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

add_expr_@0_opt_2  :  %MARK%  add_expr_@0_opt_2@0_decl_1  add_expr_  
 index is: 569, term type: to_deduce, before: %NULL%, after: add_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 570  , change_value: add_expr_@0_opt_2@0_decl_1
target index: 572  , change_value: %NULL%
target index: 574  , change_value: %NULL%

add_expr_@0_opt_2@0_decl_1  :  %MARK%  -  
 index is: 572, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 573  , change_value: -

add_expr_@0_opt_2@0_decl_1  :  %MARK%  +  
 index is: 574, term type: shift, before: %NULL%, after: +
TARGET LIST: 
target index: 575  , change_value: +

########
#TO SET#
########
index: 99, target_source: add_expr_@0_opt_2

index: 100, target_source: add_expr_@0_opt_2@0_decl_1

index: 391, target_source: -

index: 392, target_source: +



##########
#99  TERM#
##########


##########
#FROM SET#
##########
add_expr_  :  mul_expr_  add_expr_@0_opt_2  %MARK%  
 index is: 567, term type: deduce, before: add_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
add_expr_  :  mul_expr_  add_expr_@0_opt_2  %MARK%  
 index is: 567, term type: deduce, before: add_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#100  TERM#
###########


##########
#FROM SET#
##########
add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  %MARK%  add_expr_  
 index is: 570, term type: to_deduce, before: add_expr_@0_opt_2@0_decl_1, after: add_expr_
TARGET LIST: 
target index: 565  , change_value: %NULL%
target index: 571  , change_value: add_expr_

########
#SUBSET#
########
add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  %MARK%  add_expr_  
 index is: 570, term type: to_deduce, before: add_expr_@0_opt_2@0_decl_1, after: add_expr_
TARGET LIST: 
target index: 565  , change_value: %NULL%
target index: 571  , change_value: add_expr_

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 101, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#101  TERM#
###########


##########
#FROM SET#
##########
add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  add_expr_  %MARK%  
 index is: 571, term type: deduce, before: add_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
add_expr_@0_opt_2  :  add_expr_@0_opt_2@0_decl_1  add_expr_  %MARK%  
 index is: 571, term type: deduce, before: add_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#102  TERM#
###########


##########
#FROM SET#
##########
mul_expr_  :  unary_expr_  %MARK%  mul_expr_@0_opt_2  
 index is: 577, term type: to_deduce, before: unary_expr_, after: mul_expr_@0_opt_2
TARGET LIST: 
target index: 578  , change_value: mul_expr_@0_opt_2
target index: 579  , change_value: %NULL%
target index: 580  , change_value: %NULL%

########
#SUBSET#
########
mul_expr_  :  unary_expr_  %MARK%  mul_expr_@0_opt_2  
 index is: 577, term type: to_deduce, before: unary_expr_, after: mul_expr_@0_opt_2
TARGET LIST: 
target index: 578  , change_value: mul_expr_@0_opt_2
target index: 579  , change_value: %NULL%
target index: 580  , change_value: %NULL%

mul_expr_@0_opt_2  :  %MARK%  
 index is: 579, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

mul_expr_@0_opt_2  :  %MARK%  mul_expr_@0_opt_2@0_decl_1  mul_expr_  
 index is: 580, term type: to_deduce, before: %NULL%, after: mul_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 581  , change_value: mul_expr_@0_opt_2@0_decl_1
target index: 583  , change_value: %NULL%
target index: 585  , change_value: %NULL%
target index: 587  , change_value: %NULL%
target index: 589  , change_value: %NULL%

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  ^  
 index is: 583, term type: shift, before: %NULL%, after: ^
TARGET LIST: 
target index: 584  , change_value: ^

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  %  
 index is: 585, term type: shift, before: %NULL%, after: %
TARGET LIST: 
target index: 586  , change_value: %

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  /  
 index is: 587, term type: shift, before: %NULL%, after: /
TARGET LIST: 
target index: 588  , change_value: /

mul_expr_@0_opt_2@0_decl_1  :  %MARK%  *  
 index is: 589, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 590  , change_value: *

########
#TO SET#
########
index: 103, target_source: mul_expr_@0_opt_2

index: 104, target_source: mul_expr_@0_opt_2@0_decl_1

index: 387, target_source: ^

index: 388, target_source: %

index: 389, target_source: /

index: 390, target_source: *



###########
#103  TERM#
###########


##########
#FROM SET#
##########
mul_expr_  :  unary_expr_  mul_expr_@0_opt_2  %MARK%  
 index is: 578, term type: deduce, before: mul_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
mul_expr_  :  unary_expr_  mul_expr_@0_opt_2  %MARK%  
 index is: 578, term type: deduce, before: mul_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#104  TERM#
###########


##########
#FROM SET#
##########
mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  %MARK%  mul_expr_  
 index is: 581, term type: to_deduce, before: mul_expr_@0_opt_2@0_decl_1, after: mul_expr_
TARGET LIST: 
target index: 576  , change_value: %NULL%
target index: 582  , change_value: mul_expr_

########
#SUBSET#
########
mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  %MARK%  mul_expr_  
 index is: 581, term type: to_deduce, before: mul_expr_@0_opt_2@0_decl_1, after: mul_expr_
TARGET LIST: 
target index: 576  , change_value: %NULL%
target index: 582  , change_value: mul_expr_

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 105, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#105  TERM#
###########


##########
#FROM SET#
##########
mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  mul_expr_  %MARK%  
 index is: 582, term type: deduce, before: mul_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
mul_expr_@0_opt_2  :  mul_expr_@0_opt_2@0_decl_1  mul_expr_  %MARK%  
 index is: 582, term type: deduce, before: mul_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#106  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  prim_expr_  %MARK%  unary_expr_@2_opt_2  
 index is: 592, term type: to_deduce, before: prim_expr_, after: unary_expr_@2_opt_2
TARGET LIST: 
target index: 593  , change_value: unary_expr_@2_opt_2
target index: 601  , change_value: %NULL%
target index: 602  , change_value: %NULL%

########
#SUBSET#
########
unary_expr_  :  prim_expr_  %MARK%  unary_expr_@2_opt_2  
 index is: 592, term type: to_deduce, before: prim_expr_, after: unary_expr_@2_opt_2
TARGET LIST: 
target index: 593  , change_value: unary_expr_@2_opt_2
target index: 601  , change_value: %NULL%
target index: 602  , change_value: %NULL%

unary_expr_@2_opt_2  :  %MARK%  
 index is: 601, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

unary_expr_@2_opt_2  :  %MARK%  postfix_expr_  
 index is: 602, term type: to_deduce, before: %NULL%, after: postfix_expr_
TARGET LIST: 
target index: 603  , change_value: postfix_expr_
target index: 625  , change_value: %NULL%

postfix_expr_  :  %MARK%  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  
 index is: 625, term type: to_deduce, before: %NULL%, after: postfix_expr_@0_decl_1
TARGET LIST: 
target index: 626  , change_value: postfix_expr_@0_decl_1
target index: 631  , change_value: %NULL%
target index: 633  , change_value: %NULL%
target index: 635  , change_value: %NULL%

postfix_expr_@0_decl_1  :  %MARK%  ...  
 index is: 631, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 632  , change_value: ...

postfix_expr_@0_decl_1  :  %MARK%  --  
 index is: 633, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 634  , change_value: --

postfix_expr_@0_decl_1  :  %MARK%  ++  
 index is: 635, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 636  , change_value: ++

########
#TO SET#
########
index: 107, target_source: unary_expr_@2_opt_2

index: 108, target_source: postfix_expr_

index: 109, target_source: postfix_expr_@0_decl_1

index: 112, target_source: ...

index: 113, target_source: --

index: 114, target_source: ++



###########
#107  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  prim_expr_  unary_expr_@2_opt_2  %MARK%  
 index is: 593, term type: deduce, before: unary_expr_@2_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_  :  prim_expr_  unary_expr_@2_opt_2  %MARK%  
 index is: 593, term type: deduce, before: unary_expr_@2_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#108  TERM#
###########


##########
#FROM SET#
##########
unary_expr_@2_opt_2  :  postfix_expr_  %MARK%  
 index is: 603, term type: deduce, before: postfix_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_@2_opt_2  :  postfix_expr_  %MARK%  
 index is: 603, term type: deduce, before: postfix_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#109  TERM#
###########


##########
#FROM SET#
##########
postfix_expr_  :  postfix_expr_@0_decl_1  %MARK%  postfix_expr_@0_opt_2  
 index is: 626, term type: to_deduce, before: postfix_expr_@0_decl_1, after: postfix_expr_@0_opt_2
TARGET LIST: 
target index: 627  , change_value: postfix_expr_@0_opt_2
target index: 628  , change_value: %NULL%
target index: 629  , change_value: %NULL%

########
#SUBSET#
########
postfix_expr_  :  postfix_expr_@0_decl_1  %MARK%  postfix_expr_@0_opt_2  
 index is: 626, term type: to_deduce, before: postfix_expr_@0_decl_1, after: postfix_expr_@0_opt_2
TARGET LIST: 
target index: 627  , change_value: postfix_expr_@0_opt_2
target index: 628  , change_value: %NULL%
target index: 629  , change_value: %NULL%

postfix_expr_@0_opt_2  :  %MARK%  
 index is: 628, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

postfix_expr_@0_opt_2  :  %MARK%  postfix_expr_  
 index is: 629, term type: to_deduce, before: %NULL%, after: postfix_expr_
TARGET LIST: 
target index: 625  , change_value: %NULL%
target index: 630  , change_value: postfix_expr_

postfix_expr_  :  %MARK%  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  
 index is: 625, term type: to_deduce, before: %NULL%, after: postfix_expr_@0_decl_1
TARGET LIST: 
target index: 626  , change_value: postfix_expr_@0_decl_1
target index: 631  , change_value: %NULL%
target index: 633  , change_value: %NULL%
target index: 635  , change_value: %NULL%

postfix_expr_@0_decl_1  :  %MARK%  ...  
 index is: 631, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 632  , change_value: ...

postfix_expr_@0_decl_1  :  %MARK%  --  
 index is: 633, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 634  , change_value: --

postfix_expr_@0_decl_1  :  %MARK%  ++  
 index is: 635, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 636  , change_value: ++

########
#TO SET#
########
index: 110, target_source: postfix_expr_@0_opt_2

index: 111, target_source: postfix_expr_

index: 109, target_source: postfix_expr_@0_decl_1

index: 112, target_source: ...

index: 113, target_source: --

index: 114, target_source: ++



###########
#110  TERM#
###########


##########
#FROM SET#
##########
postfix_expr_  :  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  %MARK%  
 index is: 627, term type: deduce, before: postfix_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
postfix_expr_  :  postfix_expr_@0_decl_1  postfix_expr_@0_opt_2  %MARK%  
 index is: 627, term type: deduce, before: postfix_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#111  TERM#
###########


##########
#FROM SET#
##########
postfix_expr_@0_opt_2  :  postfix_expr_  %MARK%  
 index is: 630, term type: deduce, before: postfix_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
postfix_expr_@0_opt_2  :  postfix_expr_  %MARK%  
 index is: 630, term type: deduce, before: postfix_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#112  TERM#
###########


##########
#FROM SET#
##########
postfix_expr_@0_decl_1  :  ...  %MARK%  
 index is: 632, term type: deduce, before: ..., after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
postfix_expr_@0_decl_1  :  ...  %MARK%  
 index is: 632, term type: deduce, before: ..., after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#113  TERM#
###########


##########
#FROM SET#
##########
postfix_expr_@0_decl_1  :  --  %MARK%  
 index is: 634, term type: deduce, before: --, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
postfix_expr_@0_decl_1  :  --  %MARK%  
 index is: 634, term type: deduce, before: --, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#114  TERM#
###########


##########
#FROM SET#
##########
postfix_expr_@0_decl_1  :  ++  %MARK%  
 index is: 636, term type: deduce, before: ++, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
postfix_expr_@0_decl_1  :  ++  %MARK%  
 index is: 636, term type: deduce, before: ++, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#115  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  unary_expr_@1_decl_1  %MARK%  unary_expr_  unary_expr_@1_opt_3  
 index is: 595, term type: to_deduce, before: unary_expr_@1_decl_1, after: unary_expr_
TARGET LIST: 
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 596  , change_value: unary_expr_
target index: 598  , change_value: %NULL%

########
#SUBSET#
########
unary_expr_  :  unary_expr_@1_decl_1  %MARK%  unary_expr_  unary_expr_@1_opt_3  
 index is: 595, term type: to_deduce, before: unary_expr_@1_decl_1, after: unary_expr_
TARGET LIST: 
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 596  , change_value: unary_expr_
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 116, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#116  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  %MARK%  unary_expr_@1_opt_3  
 index is: 596, term type: to_deduce, before: unary_expr_, after: unary_expr_@1_opt_3
TARGET LIST: 
target index: 597  , change_value: unary_expr_@1_opt_3
target index: 604  , change_value: %NULL%
target index: 605  , change_value: %NULL%

########
#SUBSET#
########
unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  %MARK%  unary_expr_@1_opt_3  
 index is: 596, term type: to_deduce, before: unary_expr_, after: unary_expr_@1_opt_3
TARGET LIST: 
target index: 597  , change_value: unary_expr_@1_opt_3
target index: 604  , change_value: %NULL%
target index: 605  , change_value: %NULL%

unary_expr_@1_opt_3  :  %MARK%  
 index is: 604, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

unary_expr_@1_opt_3  :  %MARK%  array_  
 index is: 605, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 606  , change_value: array_
target index: 696  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

########
#TO SET#
########
index: 117, target_source: unary_expr_@1_opt_3

index: 118, target_source: array_

index: 119, target_source: {



###########
#117  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  %MARK%  
 index is: 597, term type: deduce, before: unary_expr_@1_opt_3, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_  :  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  %MARK%  
 index is: 597, term type: deduce, before: unary_expr_@1_opt_3, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#118  TERM#
###########


##########
#FROM SET#
##########
unary_expr_@1_opt_3  :  array_  %MARK%  
 index is: 606, term type: deduce, before: array_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_@1_opt_3  :  array_  %MARK%  
 index is: 606, term type: deduce, before: array_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#119  TERM#
###########


##########
#FROM SET#
##########
array_  :  {  %MARK%  array_@0_opt_2  }  
 index is: 697, term type: to_deduce, before: {, after: array_@0_opt_2
TARGET LIST: 
target index: 698  , change_value: array_@0_opt_2
target index: 700  , change_value: %NULL%
target index: 701  , change_value: %NULL%

########
#SUBSET#
########
array_  :  {  %MARK%  array_@0_opt_2  }  
 index is: 697, term type: to_deduce, before: {, after: array_@0_opt_2
TARGET LIST: 
target index: 698  , change_value: array_@0_opt_2
target index: 700  , change_value: %NULL%
target index: 701  , change_value: %NULL%

array_@0_opt_2  :  %MARK%  
 index is: 700, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

array_@0_opt_2  :  %MARK%  expr_  
 index is: 701, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 702  , change_value: expr_

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 120, target_source: array_@0_opt_2

index: 122, target_source: expr_

index: 64, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#120  TERM#
###########


##########
#FROM SET#
##########
array_  :  {  array_@0_opt_2  %MARK%  }  
 index is: 698, term type: shift, before: array_@0_opt_2, after: }
TARGET LIST: 
target index: 699  , change_value: }

########
#SUBSET#
########
array_  :  {  array_@0_opt_2  %MARK%  }  
 index is: 698, term type: shift, before: array_@0_opt_2, after: }
TARGET LIST: 
target index: 699  , change_value: }

########
#TO SET#
########
index: 121, target_source: }



###########
#121  TERM#
###########


##########
#FROM SET#
##########
array_  :  {  array_@0_opt_2  }  %MARK%  
 index is: 699, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
array_  :  {  array_@0_opt_2  }  %MARK%  
 index is: 699, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#122  TERM#
###########


##########
#FROM SET#
##########
array_@0_opt_2  :  expr_  %MARK%  
 index is: 702, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
array_@0_opt_2  :  expr_  %MARK%  
 index is: 702, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#123  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  %MARK%  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 442, term type: to_deduce, before: [, after: lambda_expr_@0_opt_2
TARGET LIST: 
target index: 443  , change_value: lambda_expr_@0_opt_2
target index: 452  , change_value: %NULL%
target index: 453  , change_value: %NULL%

########
#SUBSET#
########
lambda_expr_  :  [  %MARK%  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 442, term type: to_deduce, before: [, after: lambda_expr_@0_opt_2
TARGET LIST: 
target index: 443  , change_value: lambda_expr_@0_opt_2
target index: 452  , change_value: %NULL%
target index: 453  , change_value: %NULL%

lambda_expr_@0_opt_2  :  %MARK%  
 index is: 452, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_expr_@0_opt_2  :  %MARK%  capture_list_  
 index is: 453, term type: to_deduce, before: %NULL%, after: capture_list_
TARGET LIST: 
target index: 454  , change_value: capture_list_
target index: 455  , change_value: %NULL%

capture_list_  :  %MARK%  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  
 index is: 455, term type: to_deduce, before: %NULL%, after: capture_list_@0_opt_1
TARGET LIST: 
target index: 456  , change_value: capture_list_@0_opt_1
target index: 464  , change_value: %NULL%
target index: 465  , change_value: %NULL%

capture_list_@0_opt_1  :  %MARK%  
 index is: 464, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_@0_opt_1  :  %MARK%  =  
 index is: 465, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 466  , change_value: =

########
#TO SET#
########
index: 124, target_source: lambda_expr_@0_opt_2

index: 379, target_source: capture_list_

index: 380, target_source: capture_list_@0_opt_1

index: 386, target_source: =



###########
#124  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  lambda_expr_@0_opt_2  %MARK%  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 443, term type: shift, before: lambda_expr_@0_opt_2, after: ]
TARGET LIST: 
target index: 444  , change_value: ]

########
#SUBSET#
########
lambda_expr_  :  [  lambda_expr_@0_opt_2  %MARK%  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 443, term type: shift, before: lambda_expr_@0_opt_2, after: ]
TARGET LIST: 
target index: 444  , change_value: ]

########
#TO SET#
########
index: 125, target_source: ]



###########
#125  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  %MARK%  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 444, term type: shift, before: ], after: (
TARGET LIST: 
target index: 445  , change_value: (

########
#SUBSET#
########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  %MARK%  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 444, term type: shift, before: ], after: (
TARGET LIST: 
target index: 445  , change_value: (

########
#TO SET#
########
index: 126, target_source: (



###########
#126  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  %MARK%  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 445, term type: to_deduce, before: (, after: lambda_expr_@0_opt_5
TARGET LIST: 
target index: 446  , change_value: lambda_expr_@0_opt_5
target index: 449  , change_value: %NULL%
target index: 450  , change_value: %NULL%

########
#SUBSET#
########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  %MARK%  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 445, term type: to_deduce, before: (, after: lambda_expr_@0_opt_5
TARGET LIST: 
target index: 446  , change_value: lambda_expr_@0_opt_5
target index: 449  , change_value: %NULL%
target index: 450  , change_value: %NULL%

lambda_expr_@0_opt_5  :  %MARK%  
 index is: 449, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_expr_@0_opt_5  :  %MARK%  argument_list_  
 index is: 450, term type: to_deduce, before: %NULL%, after: argument_list_
TARGET LIST: 
target index: 451  , change_value: argument_list_
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%

argument_list_  :  %MARK%  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 467, term type: to_deduce, before: %NULL%, after: argument_list_@1_opt_1
TARGET LIST: 
target index: 468  , change_value: argument_list_@1_opt_1
target index: 484  , change_value: %NULL%
target index: 485  , change_value: %NULL%

argument_list_  :  %MARK%  ...  ID  
 index is: 473, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 474  , change_value: ...

argument_list_@1_opt_1  :  %MARK%  
 index is: 484, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_1  :  %MARK%  =  
 index is: 485, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 486  , change_value: =

########
#TO SET#
########
index: 127, target_source: lambda_expr_@0_opt_5

index: 366, target_source: argument_list_

index: 367, target_source: argument_list_@1_opt_1

index: 375, target_source: ...

index: 377, target_source: =



###########
#127  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  %MARK%  )  lambda_body_  
 index is: 446, term type: shift, before: lambda_expr_@0_opt_5, after: )
TARGET LIST: 
target index: 447  , change_value: )

########
#SUBSET#
########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  %MARK%  )  lambda_body_  
 index is: 446, term type: shift, before: lambda_expr_@0_opt_5, after: )
TARGET LIST: 
target index: 447  , change_value: )

########
#TO SET#
########
index: 128, target_source: )



###########
#128  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  %MARK%  lambda_body_  
 index is: 447, term type: to_deduce, before: ), after: lambda_body_
TARGET LIST: 
target index: 448  , change_value: lambda_body_
target index: 487  , change_value: %NULL%
target index: 490  , change_value: %NULL%

########
#SUBSET#
########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  %MARK%  lambda_body_  
 index is: 447, term type: to_deduce, before: ), after: lambda_body_
TARGET LIST: 
target index: 448  , change_value: lambda_body_
target index: 487  , change_value: %NULL%
target index: 490  , change_value: %NULL%

lambda_body_  :  %MARK%  ->  cond_expr_  
 index is: 487, term type: shift, before: %NULL%, after: ->
TARGET LIST: 
target index: 488  , change_value: ->

lambda_body_  :  %MARK%  {  lambda_body_@0_rep_2  }  
 index is: 490, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 491  , change_value: {

########
#TO SET#
########
index: 129, target_source: lambda_body_

index: 130, target_source: ->

index: 195, target_source: {



###########
#129  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  %MARK%  
 index is: 448, term type: deduce, before: lambda_body_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_expr_  :  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  %MARK%  
 index is: 448, term type: deduce, before: lambda_body_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#130  TERM#
###########


##########
#FROM SET#
##########
lambda_body_  :  ->  %MARK%  cond_expr_  
 index is: 488, term type: to_deduce, before: ->, after: cond_expr_
TARGET LIST: 
target index: 489  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

########
#SUBSET#
########
lambda_body_  :  ->  %MARK%  cond_expr_  
 index is: 488, term type: to_deduce, before: ->, after: cond_expr_
TARGET LIST: 
target index: 489  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 131, target_source: cond_expr_

index: 77, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#131  TERM#
###########


##########
#FROM SET#
##########
lambda_body_  :  ->  cond_expr_  %MARK%  
 index is: 489, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_body_  :  ->  cond_expr_  %MARK%  
 index is: 489, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#132  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  unary_op_  %MARK%  unary_expr_  
 index is: 599, term type: to_deduce, before: unary_op_, after: unary_expr_
TARGET LIST: 
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%
target index: 600  , change_value: unary_expr_

########
#SUBSET#
########
unary_expr_  :  unary_op_  %MARK%  unary_expr_  
 index is: 599, term type: to_deduce, before: unary_op_, after: unary_expr_
TARGET LIST: 
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%
target index: 600  , change_value: unary_expr_

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 133, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#133  TERM#
###########


##########
#FROM SET#
##########
unary_expr_  :  unary_op_  unary_expr_  %MARK%  
 index is: 600, term type: deduce, before: unary_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_  :  unary_op_  unary_expr_  %MARK%  
 index is: 600, term type: deduce, before: unary_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#134  TERM#
###########


##########
#FROM SET#
##########
prim_expr_  :  constant_  %MARK%  
 index is: 638, term type: deduce, before: constant_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
prim_expr_  :  constant_  %MARK%  
 index is: 638, term type: deduce, before: constant_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#135  TERM#
###########


##########
#FROM SET#
##########
prim_expr_  :  visit_expr_  %MARK%  
 index is: 640, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
prim_expr_  :  visit_expr_  %MARK%  
 index is: 640, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#136  TERM#
###########


##########
#FROM SET#
##########
unary_expr_@1_decl_1  :  gcnew  %MARK%  
 index is: 608, term type: deduce, before: gcnew, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_@1_decl_1  :  gcnew  %MARK%  
 index is: 608, term type: deduce, before: gcnew, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#137  TERM#
###########


##########
#FROM SET#
##########
unary_expr_@1_decl_1  :  new  %MARK%  
 index is: 610, term type: deduce, before: new, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_expr_@1_decl_1  :  new  %MARK%  
 index is: 610, term type: deduce, before: new, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#138  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  !  %MARK%  
 index is: 612, term type: deduce, before: !, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  !  %MARK%  
 index is: 612, term type: deduce, before: !, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#139  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  -  %MARK%  
 index is: 614, term type: deduce, before: -, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  -  %MARK%  
 index is: 614, term type: deduce, before: -, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#140  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  &  %MARK%  
 index is: 616, term type: deduce, before: &, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  &  %MARK%  
 index is: 616, term type: deduce, before: &, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#141  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  *  %MARK%  
 index is: 618, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  *  %MARK%  
 index is: 618, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#142  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  --  %MARK%  
 index is: 620, term type: deduce, before: --, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  --  %MARK%  
 index is: 620, term type: deduce, before: --, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#143  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  ++  %MARK%  
 index is: 622, term type: deduce, before: ++, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  ++  %MARK%  
 index is: 622, term type: deduce, before: ++, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#144  TERM#
###########


##########
#FROM SET#
##########
unary_op_  :  typeid  %MARK%  
 index is: 624, term type: deduce, before: typeid, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
unary_op_  :  typeid  %MARK%  
 index is: 624, term type: deduce, before: typeid, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#145  TERM#
###########


##########
#FROM SET#
##########
constant_  :  false  %MARK%  
 index is: 689, term type: deduce, before: false, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
constant_  :  false  %MARK%  
 index is: 689, term type: deduce, before: false, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#146  TERM#
###########


##########
#FROM SET#
##########
constant_  :  true  %MARK%  
 index is: 691, term type: deduce, before: true, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
constant_  :  true  %MARK%  
 index is: 691, term type: deduce, before: true, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#147  TERM#
###########


##########
#FROM SET#
##########
constant_  :  null  %MARK%  
 index is: 693, term type: deduce, before: null, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
constant_  :  null  %MARK%  
 index is: 693, term type: deduce, before: null, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#148  TERM#
###########


##########
#FROM SET#
##########
constant_  :  NUM  %MARK%  
 index is: 695, term type: deduce, before: NUM, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
constant_  :  NUM  %MARK%  
 index is: 695, term type: deduce, before: NUM, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#149  TERM#
###########


##########
#FROM SET#
##########
visit_expr_  :  object_  %MARK%  visit_expr_@0_opt_2  
 index is: 642, term type: to_deduce, before: object_, after: visit_expr_@0_opt_2
TARGET LIST: 
target index: 643  , change_value: visit_expr_@0_opt_2
target index: 644  , change_value: %NULL%
target index: 645  , change_value: %NULL%

########
#SUBSET#
########
visit_expr_  :  object_  %MARK%  visit_expr_@0_opt_2  
 index is: 642, term type: to_deduce, before: object_, after: visit_expr_@0_opt_2
TARGET LIST: 
target index: 643  , change_value: visit_expr_@0_opt_2
target index: 644  , change_value: %NULL%
target index: 645  , change_value: %NULL%

visit_expr_@0_opt_2  :  %MARK%  
 index is: 644, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

visit_expr_@0_opt_2  :  %MARK%  visit_expr_@0_opt_2@0_decl_1  visit_expr_  
 index is: 645, term type: to_deduce, before: %NULL%, after: visit_expr_@0_opt_2@0_decl_1
TARGET LIST: 
target index: 646  , change_value: visit_expr_@0_opt_2@0_decl_1
target index: 648  , change_value: %NULL%
target index: 650  , change_value: %NULL%

visit_expr_@0_opt_2@0_decl_1  :  %MARK%  .  
 index is: 648, term type: shift, before: %NULL%, after: .
TARGET LIST: 
target index: 649  , change_value: .

visit_expr_@0_opt_2@0_decl_1  :  %MARK%  ->  
 index is: 650, term type: shift, before: %NULL%, after: ->
TARGET LIST: 
target index: 651  , change_value: ->

########
#TO SET#
########
index: 150, target_source: visit_expr_@0_opt_2

index: 151, target_source: visit_expr_@0_opt_2@0_decl_1

index: 193, target_source: .

index: 194, target_source: ->



###########
#150  TERM#
###########


##########
#FROM SET#
##########
visit_expr_  :  object_  visit_expr_@0_opt_2  %MARK%  
 index is: 643, term type: deduce, before: visit_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
visit_expr_  :  object_  visit_expr_@0_opt_2  %MARK%  
 index is: 643, term type: deduce, before: visit_expr_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#151  TERM#
###########


##########
#FROM SET#
##########
visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  %MARK%  visit_expr_  
 index is: 646, term type: to_deduce, before: visit_expr_@0_opt_2@0_decl_1, after: visit_expr_
TARGET LIST: 
target index: 641  , change_value: %NULL%
target index: 647  , change_value: visit_expr_

########
#SUBSET#
########
visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  %MARK%  visit_expr_  
 index is: 646, term type: to_deduce, before: visit_expr_@0_opt_2@0_decl_1, after: visit_expr_
TARGET LIST: 
target index: 641  , change_value: %NULL%
target index: 647  , change_value: visit_expr_

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 152, target_source: visit_expr_

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#152  TERM#
###########


##########
#FROM SET#
##########
visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  visit_expr_  %MARK%  
 index is: 647, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
visit_expr_@0_opt_2  :  visit_expr_@0_opt_2@0_decl_1  visit_expr_  %MARK%  
 index is: 647, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#153  TERM#
###########


##########
#FROM SET#
##########
object_  :  CHAR  %MARK%  
 index is: 653, term type: deduce, before: CHAR, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_  :  CHAR  %MARK%  
 index is: 653, term type: deduce, before: CHAR, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#154  TERM#
###########


##########
#FROM SET#
##########
object_  :  element_  %MARK%  
 index is: 655, term type: deduce, before: element_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_  :  element_  %MARK%  
 index is: 655, term type: deduce, before: element_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#155  TERM#
###########


##########
#FROM SET#
##########
object_  :  global  %MARK%  
 index is: 657, term type: deduce, before: global, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_  :  global  %MARK%  
 index is: 657, term type: deduce, before: global, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#156  TERM#
###########


##########
#FROM SET#
##########
object_  :  local  %MARK%  
 index is: 659, term type: deduce, before: local, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_  :  local  %MARK%  
 index is: 659, term type: deduce, before: local, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#157  TERM#
###########


##########
#FROM SET#
##########
object_  :  STR  %MARK%  object_@1_opt_2  
 index is: 661, term type: to_deduce, before: STR, after: object_@1_opt_2
TARGET LIST: 
target index: 662  , change_value: object_@1_opt_2
target index: 666  , change_value: %NULL%
target index: 667  , change_value: %NULL%

########
#SUBSET#
########
object_  :  STR  %MARK%  object_@1_opt_2  
 index is: 661, term type: to_deduce, before: STR, after: object_@1_opt_2
TARGET LIST: 
target index: 662  , change_value: object_@1_opt_2
target index: 666  , change_value: %NULL%
target index: 667  , change_value: %NULL%

object_@1_opt_2  :  %MARK%  
 index is: 666, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

object_@1_opt_2  :  %MARK%  index_  
 index is: 667, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 668  , change_value: index_
target index: 710  , change_value: %NULL%

index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 711  , change_value: [

########
#TO SET#
########
index: 158, target_source: object_@1_opt_2

index: 159, target_source: index_

index: 160, target_source: [



###########
#158  TERM#
###########


##########
#FROM SET#
##########
object_  :  STR  object_@1_opt_2  %MARK%  
 index is: 662, term type: deduce, before: object_@1_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_  :  STR  object_@1_opt_2  %MARK%  
 index is: 662, term type: deduce, before: object_@1_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#159  TERM#
###########


##########
#FROM SET#
##########
object_@1_opt_2  :  index_  %MARK%  
 index is: 668, term type: deduce, before: index_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_@1_opt_2  :  index_  %MARK%  
 index is: 668, term type: deduce, before: index_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#160  TERM#
###########


##########
#FROM SET#
##########
index_  :  [  %MARK%  basic_expr_  ]  
 index is: 711, term type: to_deduce, before: [, after: basic_expr_
TARGET LIST: 
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%
target index: 712  , change_value: basic_expr_

########
#SUBSET#
########
index_  :  [  %MARK%  basic_expr_  ]  
 index is: 711, term type: to_deduce, before: [, after: basic_expr_
TARGET LIST: 
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%
target index: 712  , change_value: basic_expr_

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 161, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#161  TERM#
###########


##########
#FROM SET#
##########
index_  :  [  basic_expr_  %MARK%  ]  
 index is: 712, term type: shift, before: basic_expr_, after: ]
TARGET LIST: 
target index: 713  , change_value: ]

########
#SUBSET#
########
index_  :  [  basic_expr_  %MARK%  ]  
 index is: 712, term type: shift, before: basic_expr_, after: ]
TARGET LIST: 
target index: 713  , change_value: ]

########
#TO SET#
########
index: 162, target_source: ]



###########
#162  TERM#
###########


##########
#FROM SET#
##########
index_  :  [  basic_expr_  ]  %MARK%  
 index is: 713, term type: deduce, before: ], after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
index_  :  [  basic_expr_  ]  %MARK%  
 index is: 713, term type: deduce, before: ], after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#163  TERM#
###########


##########
#FROM SET#
##########
var_bind_  :  (  %MARK%  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 147, term type: to_deduce, before: (, after: var_bind_list_
TARGET LIST: 
target index: 148  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

element_@0_decl_1  :  (  %MARK%  single_expr_  )  
 index is: 683, term type: to_deduce, before: (, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 684  , change_value: single_expr_

########
#SUBSET#
########
var_bind_  :  (  %MARK%  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 147, term type: to_deduce, before: (, after: var_bind_list_
TARGET LIST: 
target index: 148  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

element_@0_decl_1  :  (  %MARK%  single_expr_  )  
 index is: 683, term type: to_deduce, before: (, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 684  , change_value: single_expr_

var_bind_list_  :  %MARK%  var_bind_  
 index is: 156, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 157  , change_value: var_bind_

var_bind_list_  :  %MARK%  ...  
 index is: 158, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 159  , change_value: ...

var_bind_list_  :  %MARK%  ID  
 index is: 160, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 161  , change_value: ID

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 164, target_source: var_bind_list_

index: 174, target_source: single_expr_

index: 176, target_source: var_bind_

index: 171, target_source: ...

index: 177, target_source: ID

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 163, target_source: (

index: 70, target_source: cond_expr_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {



###########
#164  TERM#
###########


##########
#FROM SET#
##########
var_bind_  :  (  var_bind_list_  %MARK%  var_bind_@0_rep_3  )  
 index is: 148, term type: to_deduce, before: var_bind_list_, after: var_bind_@0_rep_3
TARGET LIST: 
target index: 149  , change_value: var_bind_@0_rep_3
target index: 151  , change_value: %NULL%
target index: 152  , change_value: %NULL%

########
#SUBSET#
########
var_bind_  :  (  var_bind_list_  %MARK%  var_bind_@0_rep_3  )  
 index is: 148, term type: to_deduce, before: var_bind_list_, after: var_bind_@0_rep_3
TARGET LIST: 
target index: 149  , change_value: var_bind_@0_rep_3
target index: 151  , change_value: %NULL%
target index: 152  , change_value: %NULL%

var_bind_@0_rep_3  :  %MARK%  
 index is: 151, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

var_bind_@0_rep_3  :  %MARK%  ,  var_bind_list_  var_bind_@0_rep_3  
 index is: 152, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 153  , change_value: ,

########
#TO SET#
########
index: 165, target_source: var_bind_@0_rep_3

index: 167, target_source: ,



###########
#165  TERM#
###########


##########
#FROM SET#
##########
var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  %MARK%  )  
 index is: 149, term type: shift, before: var_bind_@0_rep_3, after: )
TARGET LIST: 
target index: 150  , change_value: )

########
#SUBSET#
########
var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  %MARK%  )  
 index is: 149, term type: shift, before: var_bind_@0_rep_3, after: )
TARGET LIST: 
target index: 150  , change_value: )

########
#TO SET#
########
index: 166, target_source: )



###########
#166  TERM#
###########


##########
#FROM SET#
##########
var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  )  %MARK%  
 index is: 150, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_bind_  :  (  var_bind_list_  var_bind_@0_rep_3  )  %MARK%  
 index is: 150, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#167  TERM#
###########


##########
#FROM SET#
##########
var_bind_@0_rep_3  :  ,  %MARK%  var_bind_list_  var_bind_@0_rep_3  
 index is: 153, term type: to_deduce, before: ,, after: var_bind_list_
TARGET LIST: 
target index: 154  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

########
#SUBSET#
########
var_bind_@0_rep_3  :  ,  %MARK%  var_bind_list_  var_bind_@0_rep_3  
 index is: 153, term type: to_deduce, before: ,, after: var_bind_list_
TARGET LIST: 
target index: 154  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

var_bind_list_  :  %MARK%  var_bind_  
 index is: 156, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 157  , change_value: var_bind_

var_bind_list_  :  %MARK%  ...  
 index is: 158, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 159  , change_value: ...

var_bind_list_  :  %MARK%  ID  
 index is: 160, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 161  , change_value: ID

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

########
#TO SET#
########
index: 168, target_source: var_bind_list_

index: 170, target_source: var_bind_

index: 171, target_source: ...

index: 172, target_source: ID

index: 173, target_source: (



###########
#168  TERM#
###########


##########
#FROM SET#
##########
var_bind_@0_rep_3  :  ,  var_bind_list_  %MARK%  var_bind_@0_rep_3  
 index is: 154, term type: to_deduce, before: var_bind_list_, after: var_bind_@0_rep_3
TARGET LIST: 
target index: 151  , change_value: %NULL%
target index: 152  , change_value: %NULL%
target index: 155  , change_value: var_bind_@0_rep_3

########
#SUBSET#
########
var_bind_@0_rep_3  :  ,  var_bind_list_  %MARK%  var_bind_@0_rep_3  
 index is: 154, term type: to_deduce, before: var_bind_list_, after: var_bind_@0_rep_3
TARGET LIST: 
target index: 151  , change_value: %NULL%
target index: 152  , change_value: %NULL%
target index: 155  , change_value: var_bind_@0_rep_3

var_bind_@0_rep_3  :  %MARK%  
 index is: 151, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

var_bind_@0_rep_3  :  %MARK%  ,  var_bind_list_  var_bind_@0_rep_3  
 index is: 152, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 153  , change_value: ,

########
#TO SET#
########
index: 169, target_source: var_bind_@0_rep_3

index: 167, target_source: ,



###########
#169  TERM#
###########


##########
#FROM SET#
##########
var_bind_@0_rep_3  :  ,  var_bind_list_  var_bind_@0_rep_3  %MARK%  
 index is: 155, term type: deduce, before: var_bind_@0_rep_3, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_bind_@0_rep_3  :  ,  var_bind_list_  var_bind_@0_rep_3  %MARK%  
 index is: 155, term type: deduce, before: var_bind_@0_rep_3, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#170  TERM#
###########


##########
#FROM SET#
##########
var_bind_list_  :  var_bind_  %MARK%  
 index is: 157, term type: deduce, before: var_bind_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_bind_list_  :  var_bind_  %MARK%  
 index is: 157, term type: deduce, before: var_bind_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#171  TERM#
###########


##########
#FROM SET#
##########
var_bind_list_  :  ...  %MARK%  
 index is: 159, term type: deduce, before: ..., after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_bind_list_  :  ...  %MARK%  
 index is: 159, term type: deduce, before: ..., after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#172  TERM#
###########


##########
#FROM SET#
##########
var_bind_list_  :  ID  %MARK%  
 index is: 161, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_bind_list_  :  ID  %MARK%  
 index is: 161, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#173  TERM#
###########


##########
#FROM SET#
##########
var_bind_  :  (  %MARK%  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 147, term type: to_deduce, before: (, after: var_bind_list_
TARGET LIST: 
target index: 148  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

########
#SUBSET#
########
var_bind_  :  (  %MARK%  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 147, term type: to_deduce, before: (, after: var_bind_list_
TARGET LIST: 
target index: 148  , change_value: var_bind_list_
target index: 156  , change_value: %NULL%
target index: 158  , change_value: %NULL%
target index: 160  , change_value: %NULL%

var_bind_list_  :  %MARK%  var_bind_  
 index is: 156, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 157  , change_value: var_bind_

var_bind_list_  :  %MARK%  ...  
 index is: 158, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 159  , change_value: ...

var_bind_list_  :  %MARK%  ID  
 index is: 160, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 161  , change_value: ID

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

########
#TO SET#
########
index: 164, target_source: var_bind_list_

index: 170, target_source: var_bind_

index: 171, target_source: ...

index: 172, target_source: ID

index: 173, target_source: (



###########
#174  TERM#
###########


##########
#FROM SET#
##########
element_@0_decl_1  :  (  single_expr_  %MARK%  )  
 index is: 684, term type: shift, before: single_expr_, after: )
TARGET LIST: 
target index: 685  , change_value: )

########
#SUBSET#
########
element_@0_decl_1  :  (  single_expr_  %MARK%  )  
 index is: 684, term type: shift, before: single_expr_, after: )
TARGET LIST: 
target index: 685  , change_value: )

########
#TO SET#
########
index: 175, target_source: )



###########
#175  TERM#
###########


##########
#FROM SET#
##########
element_@0_decl_1  :  (  single_expr_  )  %MARK%  
 index is: 685, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
element_@0_decl_1  :  (  single_expr_  )  %MARK%  
 index is: 685, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#176  TERM#
###########


##########
#FROM SET#
##########
var_bind_list_  :  var_bind_  %MARK%  
 index is: 157, term type: deduce, before: var_bind_, after: %NULL%
TARGET LIST: 

basic_expr_  :  var_bind_  %MARK%  =  cond_expr_  
 index is: 418, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 419  , change_value: =

########
#SUBSET#
########
var_bind_list_  :  var_bind_  %MARK%  
 index is: 157, term type: deduce, before: var_bind_, after: %NULL%
TARGET LIST: 

basic_expr_  :  var_bind_  %MARK%  =  cond_expr_  
 index is: 418, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 419  , change_value: =

########
#TO SET#
########
index: 75, target_source: =



###########
#177  TERM#
###########


##########
#FROM SET#
##########
var_bind_list_  :  ID  %MARK%  
 index is: 161, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

element_@0_decl_1  :  ID  %MARK%  
 index is: 687, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_bind_list_  :  ID  %MARK%  
 index is: 161, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

element_@0_decl_1  :  ID  %MARK%  
 index is: 687, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#178  TERM#
###########


##########
#FROM SET#
##########
object_  :  array_  %MARK%  object_@0_opt_2  
 index is: 664, term type: to_deduce, before: array_, after: object_@0_opt_2
TARGET LIST: 
target index: 665  , change_value: object_@0_opt_2
target index: 669  , change_value: %NULL%
target index: 670  , change_value: %NULL%

########
#SUBSET#
########
object_  :  array_  %MARK%  object_@0_opt_2  
 index is: 664, term type: to_deduce, before: array_, after: object_@0_opt_2
TARGET LIST: 
target index: 665  , change_value: object_@0_opt_2
target index: 669  , change_value: %NULL%
target index: 670  , change_value: %NULL%

object_@0_opt_2  :  %MARK%  
 index is: 669, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

object_@0_opt_2  :  %MARK%  index_  
 index is: 670, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 671  , change_value: index_
target index: 710  , change_value: %NULL%

index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 711  , change_value: [

########
#TO SET#
########
index: 179, target_source: object_@0_opt_2

index: 180, target_source: index_

index: 160, target_source: [



###########
#179  TERM#
###########


##########
#FROM SET#
##########
object_  :  array_  object_@0_opt_2  %MARK%  
 index is: 665, term type: deduce, before: object_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_  :  array_  object_@0_opt_2  %MARK%  
 index is: 665, term type: deduce, before: object_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#180  TERM#
###########


##########
#FROM SET#
##########
object_@0_opt_2  :  index_  %MARK%  
 index is: 671, term type: deduce, before: index_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
object_@0_opt_2  :  index_  %MARK%  
 index is: 671, term type: deduce, before: index_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#181  TERM#
###########


##########
#FROM SET#
##########
element_  :  element_@0_decl_1  %MARK%  element_@0_rep_2  
 index is: 673, term type: to_deduce, before: element_@0_decl_1, after: element_@0_rep_2
TARGET LIST: 
target index: 674  , change_value: element_@0_rep_2
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 679  , change_value: %NULL%

########
#SUBSET#
########
element_  :  element_@0_decl_1  %MARK%  element_@0_rep_2  
 index is: 673, term type: to_deduce, before: element_@0_decl_1, after: element_@0_rep_2
TARGET LIST: 
target index: 674  , change_value: element_@0_rep_2
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 679  , change_value: %NULL%

element_@0_rep_2  :  %MARK%  
 index is: 675, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

element_@0_rep_2  :  %MARK%  index_  element_@0_rep_2  
 index is: 676, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 677  , change_value: index_
target index: 710  , change_value: %NULL%

element_@0_rep_2  :  %MARK%  fcall_  element_@0_rep_2  
 index is: 679, term type: to_deduce, before: %NULL%, after: fcall_
TARGET LIST: 
target index: 680  , change_value: fcall_
target index: 703  , change_value: %NULL%

index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 711  , change_value: [

fcall_  :  %MARK%  (  fcall_@0_opt_2  )  
 index is: 703, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 704  , change_value: (

########
#TO SET#
########
index: 182, target_source: element_@0_rep_2

index: 183, target_source: index_

index: 185, target_source: fcall_

index: 160, target_source: [

index: 187, target_source: (



###########
#182  TERM#
###########


##########
#FROM SET#
##########
element_  :  element_@0_decl_1  element_@0_rep_2  %MARK%  
 index is: 674, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
element_  :  element_@0_decl_1  element_@0_rep_2  %MARK%  
 index is: 674, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#183  TERM#
###########


##########
#FROM SET#
##########
element_@0_rep_2  :  index_  %MARK%  element_@0_rep_2  
 index is: 677, term type: to_deduce, before: index_, after: element_@0_rep_2
TARGET LIST: 
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 678  , change_value: element_@0_rep_2
target index: 679  , change_value: %NULL%

########
#SUBSET#
########
element_@0_rep_2  :  index_  %MARK%  element_@0_rep_2  
 index is: 677, term type: to_deduce, before: index_, after: element_@0_rep_2
TARGET LIST: 
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 678  , change_value: element_@0_rep_2
target index: 679  , change_value: %NULL%

element_@0_rep_2  :  %MARK%  
 index is: 675, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

element_@0_rep_2  :  %MARK%  index_  element_@0_rep_2  
 index is: 676, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 677  , change_value: index_
target index: 710  , change_value: %NULL%

element_@0_rep_2  :  %MARK%  fcall_  element_@0_rep_2  
 index is: 679, term type: to_deduce, before: %NULL%, after: fcall_
TARGET LIST: 
target index: 680  , change_value: fcall_
target index: 703  , change_value: %NULL%

index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 711  , change_value: [

fcall_  :  %MARK%  (  fcall_@0_opt_2  )  
 index is: 703, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 704  , change_value: (

########
#TO SET#
########
index: 184, target_source: element_@0_rep_2

index: 183, target_source: index_

index: 185, target_source: fcall_

index: 160, target_source: [

index: 187, target_source: (



###########
#184  TERM#
###########


##########
#FROM SET#
##########
element_@0_rep_2  :  index_  element_@0_rep_2  %MARK%  
 index is: 678, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
element_@0_rep_2  :  index_  element_@0_rep_2  %MARK%  
 index is: 678, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#185  TERM#
###########


##########
#FROM SET#
##########
element_@0_rep_2  :  fcall_  %MARK%  element_@0_rep_2  
 index is: 680, term type: to_deduce, before: fcall_, after: element_@0_rep_2
TARGET LIST: 
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 679  , change_value: %NULL%
target index: 681  , change_value: element_@0_rep_2

########
#SUBSET#
########
element_@0_rep_2  :  fcall_  %MARK%  element_@0_rep_2  
 index is: 680, term type: to_deduce, before: fcall_, after: element_@0_rep_2
TARGET LIST: 
target index: 675  , change_value: %NULL%
target index: 676  , change_value: %NULL%
target index: 679  , change_value: %NULL%
target index: 681  , change_value: element_@0_rep_2

element_@0_rep_2  :  %MARK%  
 index is: 675, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

element_@0_rep_2  :  %MARK%  index_  element_@0_rep_2  
 index is: 676, term type: to_deduce, before: %NULL%, after: index_
TARGET LIST: 
target index: 677  , change_value: index_
target index: 710  , change_value: %NULL%

element_@0_rep_2  :  %MARK%  fcall_  element_@0_rep_2  
 index is: 679, term type: to_deduce, before: %NULL%, after: fcall_
TARGET LIST: 
target index: 680  , change_value: fcall_
target index: 703  , change_value: %NULL%

index_  :  %MARK%  [  basic_expr_  ]  
 index is: 710, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 711  , change_value: [

fcall_  :  %MARK%  (  fcall_@0_opt_2  )  
 index is: 703, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 704  , change_value: (

########
#TO SET#
########
index: 186, target_source: element_@0_rep_2

index: 183, target_source: index_

index: 185, target_source: fcall_

index: 160, target_source: [

index: 187, target_source: (



###########
#186  TERM#
###########


##########
#FROM SET#
##########
element_@0_rep_2  :  fcall_  element_@0_rep_2  %MARK%  
 index is: 681, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
element_@0_rep_2  :  fcall_  element_@0_rep_2  %MARK%  
 index is: 681, term type: deduce, before: element_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#187  TERM#
###########


##########
#FROM SET#
##########
fcall_  :  (  %MARK%  fcall_@0_opt_2  )  
 index is: 704, term type: to_deduce, before: (, after: fcall_@0_opt_2
TARGET LIST: 
target index: 705  , change_value: fcall_@0_opt_2
target index: 707  , change_value: %NULL%
target index: 708  , change_value: %NULL%

########
#SUBSET#
########
fcall_  :  (  %MARK%  fcall_@0_opt_2  )  
 index is: 704, term type: to_deduce, before: (, after: fcall_@0_opt_2
TARGET LIST: 
target index: 705  , change_value: fcall_@0_opt_2
target index: 707  , change_value: %NULL%
target index: 708  , change_value: %NULL%

fcall_@0_opt_2  :  %MARK%  
 index is: 707, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

fcall_@0_opt_2  :  %MARK%  expr_  
 index is: 708, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 403  , change_value: %NULL%
target index: 709  , change_value: expr_

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 188, target_source: fcall_@0_opt_2

index: 190, target_source: expr_

index: 64, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#188  TERM#
###########


##########
#FROM SET#
##########
fcall_  :  (  fcall_@0_opt_2  %MARK%  )  
 index is: 705, term type: shift, before: fcall_@0_opt_2, after: )
TARGET LIST: 
target index: 706  , change_value: )

########
#SUBSET#
########
fcall_  :  (  fcall_@0_opt_2  %MARK%  )  
 index is: 705, term type: shift, before: fcall_@0_opt_2, after: )
TARGET LIST: 
target index: 706  , change_value: )

########
#TO SET#
########
index: 189, target_source: )



###########
#189  TERM#
###########


##########
#FROM SET#
##########
fcall_  :  (  fcall_@0_opt_2  )  %MARK%  
 index is: 706, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
fcall_  :  (  fcall_@0_opt_2  )  %MARK%  
 index is: 706, term type: deduce, before: ), after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#190  TERM#
###########


##########
#FROM SET#
##########
fcall_@0_opt_2  :  expr_  %MARK%  
 index is: 709, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
fcall_@0_opt_2  :  expr_  %MARK%  
 index is: 709, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#191  TERM#
###########


##########
#FROM SET#
##########
element_@0_decl_1  :  ID  %MARK%  
 index is: 687, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
element_@0_decl_1  :  ID  %MARK%  
 index is: 687, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#192  TERM#
###########


##########
#FROM SET#
##########
element_@0_decl_1  :  (  %MARK%  single_expr_  )  
 index is: 683, term type: to_deduce, before: (, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 684  , change_value: single_expr_

########
#SUBSET#
########
element_@0_decl_1  :  (  %MARK%  single_expr_  )  
 index is: 683, term type: to_deduce, before: (, after: single_expr_
TARGET LIST: 
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%
target index: 684  , change_value: single_expr_

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 174, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#193  TERM#
###########


##########
#FROM SET#
##########
visit_expr_@0_opt_2@0_decl_1  :  .  %MARK%  
 index is: 649, term type: deduce, before: ., after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
visit_expr_@0_opt_2@0_decl_1  :  .  %MARK%  
 index is: 649, term type: deduce, before: ., after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#194  TERM#
###########


##########
#FROM SET#
##########
visit_expr_@0_opt_2@0_decl_1  :  ->  %MARK%  
 index is: 651, term type: deduce, before: ->, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
visit_expr_@0_opt_2@0_decl_1  :  ->  %MARK%  
 index is: 651, term type: deduce, before: ->, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#195  TERM#
###########


##########
#FROM SET#
##########
lambda_body_  :  {  %MARK%  lambda_body_@0_rep_2  }  
 index is: 491, term type: to_deduce, before: {, after: lambda_body_@0_rep_2
TARGET LIST: 
target index: 492  , change_value: lambda_body_@0_rep_2
target index: 494  , change_value: %NULL%
target index: 495  , change_value: %NULL%

########
#SUBSET#
########
lambda_body_  :  {  %MARK%  lambda_body_@0_rep_2  }  
 index is: 491, term type: to_deduce, before: {, after: lambda_body_@0_rep_2
TARGET LIST: 
target index: 492  , change_value: lambda_body_@0_rep_2
target index: 494  , change_value: %NULL%
target index: 495  , change_value: %NULL%

lambda_body_@0_rep_2  :  %MARK%  
 index is: 494, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2  :  %MARK%  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 495, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%
target index: 496  , change_value: statement_

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 196, target_source: lambda_body_@0_rep_2

index: 198, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#196  TERM#
###########


##########
#FROM SET#
##########
lambda_body_  :  {  lambda_body_@0_rep_2  %MARK%  }  
 index is: 492, term type: shift, before: lambda_body_@0_rep_2, after: }
TARGET LIST: 
target index: 493  , change_value: }

########
#SUBSET#
########
lambda_body_  :  {  lambda_body_@0_rep_2  %MARK%  }  
 index is: 492, term type: shift, before: lambda_body_@0_rep_2, after: }
TARGET LIST: 
target index: 493  , change_value: }

########
#TO SET#
########
index: 197, target_source: }



###########
#197  TERM#
###########


##########
#FROM SET#
##########
lambda_body_  :  {  lambda_body_@0_rep_2  }  %MARK%  
 index is: 493, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_body_  :  {  lambda_body_@0_rep_2  }  %MARK%  
 index is: 493, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#198  TERM#
###########


##########
#FROM SET#
##########
lambda_body_@0_rep_2  :  statement_  %MARK%  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 496, term type: to_deduce, before: statement_, after: lambda_body_@0_rep_2@0_rep_2
TARGET LIST: 
target index: 497  , change_value: lambda_body_@0_rep_2@0_rep_2
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%

########
#SUBSET#
########
lambda_body_@0_rep_2  :  statement_  %MARK%  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 496, term type: to_deduce, before: statement_, after: lambda_body_@0_rep_2@0_rep_2
TARGET LIST: 
target index: 497  , change_value: lambda_body_@0_rep_2@0_rep_2
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%

lambda_body_@0_rep_2@0_rep_2  :  %MARK%  
 index is: 499, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2@0_rep_2  :  %MARK%  ENDL  lambda_body_@0_rep_2@0_rep_2  
 index is: 500, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 501  , change_value: ENDL

########
#TO SET#
########
index: 199, target_source: lambda_body_@0_rep_2@0_rep_2

index: 364, target_source: ENDL



###########
#199  TERM#
###########


##########
#FROM SET#
##########
lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  %MARK%  lambda_body_@0_rep_2  
 index is: 497, term type: to_deduce, before: lambda_body_@0_rep_2@0_rep_2, after: lambda_body_@0_rep_2
TARGET LIST: 
target index: 494  , change_value: %NULL%
target index: 495  , change_value: %NULL%
target index: 498  , change_value: lambda_body_@0_rep_2

########
#SUBSET#
########
lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  %MARK%  lambda_body_@0_rep_2  
 index is: 497, term type: to_deduce, before: lambda_body_@0_rep_2@0_rep_2, after: lambda_body_@0_rep_2
TARGET LIST: 
target index: 494  , change_value: %NULL%
target index: 495  , change_value: %NULL%
target index: 498  , change_value: lambda_body_@0_rep_2

lambda_body_@0_rep_2  :  %MARK%  
 index is: 494, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2  :  %MARK%  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  
 index is: 495, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%
target index: 496  , change_value: statement_

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 200, target_source: lambda_body_@0_rep_2

index: 198, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#200  TERM#
###########


##########
#FROM SET#
##########
lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  %MARK%  
 index is: 498, term type: deduce, before: lambda_body_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_body_@0_rep_2  :  statement_  lambda_body_@0_rep_2@0_rep_2  lambda_body_@0_rep_2  %MARK%  
 index is: 498, term type: deduce, before: lambda_body_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#201  TERM#
###########


##########
#FROM SET#
##########
try_stmt_  :  try  %MARK%  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 347, term type: shift, before: try, after: ENDL
TARGET LIST: 
target index: 348  , change_value: ENDL

########
#SUBSET#
########
try_stmt_  :  try  %MARK%  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 347, term type: shift, before: try, after: ENDL
TARGET LIST: 
target index: 348  , change_value: ENDL

########
#TO SET#
########
index: 202, target_source: ENDL



###########
#202  TERM#
###########


##########
#FROM SET#
##########
try_stmt_  :  try  ENDL  %MARK%  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 348, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 349  , change_value: stmts_

########
#SUBSET#
########
try_stmt_  :  try  ENDL  %MARK%  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 348, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 349  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 203, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#203  TERM#
###########


##########
#FROM SET#
##########
try_stmt_  :  try  ENDL  stmts_  %MARK%  try_stmt_@0_rep_4  end  ENDL  
 index is: 349, term type: to_deduce, before: stmts_, after: try_stmt_@0_rep_4
TARGET LIST: 
target index: 350  , change_value: try_stmt_@0_rep_4
target index: 353  , change_value: %NULL%
target index: 354  , change_value: %NULL%

########
#SUBSET#
########
try_stmt_  :  try  ENDL  stmts_  %MARK%  try_stmt_@0_rep_4  end  ENDL  
 index is: 349, term type: to_deduce, before: stmts_, after: try_stmt_@0_rep_4
TARGET LIST: 
target index: 350  , change_value: try_stmt_@0_rep_4
target index: 353  , change_value: %NULL%
target index: 354  , change_value: %NULL%

try_stmt_@0_rep_4  :  %MARK%  
 index is: 353, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

try_stmt_@0_rep_4  :  %MARK%  catch_stmt_  stmts_  try_stmt_@0_rep_4  
 index is: 354, term type: to_deduce, before: %NULL%, after: catch_stmt_
TARGET LIST: 
target index: 355  , change_value: catch_stmt_
target index: 358  , change_value: %NULL%

catch_stmt_  :  %MARK%  catch  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 358, term type: shift, before: %NULL%, after: catch
TARGET LIST: 
target index: 359  , change_value: catch

########
#TO SET#
########
index: 204, target_source: try_stmt_@0_rep_4

index: 207, target_source: catch_stmt_

index: 210, target_source: catch



###########
#204  TERM#
###########


##########
#FROM SET#
##########
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  %MARK%  end  ENDL  
 index is: 350, term type: shift, before: try_stmt_@0_rep_4, after: end
TARGET LIST: 
target index: 351  , change_value: end

########
#SUBSET#
########
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  %MARK%  end  ENDL  
 index is: 350, term type: shift, before: try_stmt_@0_rep_4, after: end
TARGET LIST: 
target index: 351  , change_value: end

########
#TO SET#
########
index: 205, target_source: end



###########
#205  TERM#
###########


##########
#FROM SET#
##########
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  %MARK%  ENDL  
 index is: 351, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 352  , change_value: ENDL

########
#SUBSET#
########
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  %MARK%  ENDL  
 index is: 351, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 352  , change_value: ENDL

########
#TO SET#
########
index: 206, target_source: ENDL



###########
#206  TERM#
###########


##########
#FROM SET#
##########
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  %MARK%  
 index is: 352, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
try_stmt_  :  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  %MARK%  
 index is: 352, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#207  TERM#
###########


##########
#FROM SET#
##########
try_stmt_@0_rep_4  :  catch_stmt_  %MARK%  stmts_  try_stmt_@0_rep_4  
 index is: 355, term type: to_deduce, before: catch_stmt_, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 356  , change_value: stmts_

########
#SUBSET#
########
try_stmt_@0_rep_4  :  catch_stmt_  %MARK%  stmts_  try_stmt_@0_rep_4  
 index is: 355, term type: to_deduce, before: catch_stmt_, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 356  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 208, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#208  TERM#
###########


##########
#FROM SET#
##########
try_stmt_@0_rep_4  :  catch_stmt_  stmts_  %MARK%  try_stmt_@0_rep_4  
 index is: 356, term type: to_deduce, before: stmts_, after: try_stmt_@0_rep_4
TARGET LIST: 
target index: 353  , change_value: %NULL%
target index: 354  , change_value: %NULL%
target index: 357  , change_value: try_stmt_@0_rep_4

########
#SUBSET#
########
try_stmt_@0_rep_4  :  catch_stmt_  stmts_  %MARK%  try_stmt_@0_rep_4  
 index is: 356, term type: to_deduce, before: stmts_, after: try_stmt_@0_rep_4
TARGET LIST: 
target index: 353  , change_value: %NULL%
target index: 354  , change_value: %NULL%
target index: 357  , change_value: try_stmt_@0_rep_4

try_stmt_@0_rep_4  :  %MARK%  
 index is: 353, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

try_stmt_@0_rep_4  :  %MARK%  catch_stmt_  stmts_  try_stmt_@0_rep_4  
 index is: 354, term type: to_deduce, before: %NULL%, after: catch_stmt_
TARGET LIST: 
target index: 355  , change_value: catch_stmt_
target index: 358  , change_value: %NULL%

catch_stmt_  :  %MARK%  catch  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 358, term type: shift, before: %NULL%, after: catch
TARGET LIST: 
target index: 359  , change_value: catch

########
#TO SET#
########
index: 209, target_source: try_stmt_@0_rep_4

index: 207, target_source: catch_stmt_

index: 210, target_source: catch



###########
#209  TERM#
###########


##########
#FROM SET#
##########
try_stmt_@0_rep_4  :  catch_stmt_  stmts_  try_stmt_@0_rep_4  %MARK%  
 index is: 357, term type: deduce, before: try_stmt_@0_rep_4, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
try_stmt_@0_rep_4  :  catch_stmt_  stmts_  try_stmt_@0_rep_4  %MARK%  
 index is: 357, term type: deduce, before: try_stmt_@0_rep_4, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#210  TERM#
###########


##########
#FROM SET#
##########
catch_stmt_  :  catch  %MARK%  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 359, term type: shift, before: catch, after: ID
TARGET LIST: 
target index: 360  , change_value: ID

########
#SUBSET#
########
catch_stmt_  :  catch  %MARK%  ID  catch_stmt_@0_opt_3  ENDL  
 index is: 359, term type: shift, before: catch, after: ID
TARGET LIST: 
target index: 360  , change_value: ID

########
#TO SET#
########
index: 211, target_source: ID



###########
#211  TERM#
###########


##########
#FROM SET#
##########
catch_stmt_  :  catch  ID  %MARK%  catch_stmt_@0_opt_3  ENDL  
 index is: 360, term type: to_deduce, before: ID, after: catch_stmt_@0_opt_3
TARGET LIST: 
target index: 361  , change_value: catch_stmt_@0_opt_3
target index: 363  , change_value: %NULL%
target index: 364  , change_value: %NULL%

########
#SUBSET#
########
catch_stmt_  :  catch  ID  %MARK%  catch_stmt_@0_opt_3  ENDL  
 index is: 360, term type: to_deduce, before: ID, after: catch_stmt_@0_opt_3
TARGET LIST: 
target index: 361  , change_value: catch_stmt_@0_opt_3
target index: 363  , change_value: %NULL%
target index: 364  , change_value: %NULL%

catch_stmt_@0_opt_3  :  %MARK%  
 index is: 363, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

catch_stmt_@0_opt_3  :  %MARK%  :  visit_expr_  
 index is: 364, term type: shift, before: %NULL%, after: :
TARGET LIST: 
target index: 365  , change_value: :

########
#TO SET#
########
index: 212, target_source: catch_stmt_@0_opt_3

index: 214, target_source: :



###########
#212  TERM#
###########


##########
#FROM SET#
##########
catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  %MARK%  ENDL  
 index is: 361, term type: shift, before: catch_stmt_@0_opt_3, after: ENDL
TARGET LIST: 
target index: 362  , change_value: ENDL

########
#SUBSET#
########
catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  %MARK%  ENDL  
 index is: 361, term type: shift, before: catch_stmt_@0_opt_3, after: ENDL
TARGET LIST: 
target index: 362  , change_value: ENDL

########
#TO SET#
########
index: 213, target_source: ENDL



###########
#213  TERM#
###########


##########
#FROM SET#
##########
catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  ENDL  %MARK%  
 index is: 362, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
catch_stmt_  :  catch  ID  catch_stmt_@0_opt_3  ENDL  %MARK%  
 index is: 362, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#214  TERM#
###########


##########
#FROM SET#
##########
catch_stmt_@0_opt_3  :  :  %MARK%  visit_expr_  
 index is: 365, term type: to_deduce, before: :, after: visit_expr_
TARGET LIST: 
target index: 366  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

########
#SUBSET#
########
catch_stmt_@0_opt_3  :  :  %MARK%  visit_expr_  
 index is: 365, term type: to_deduce, before: :, after: visit_expr_
TARGET LIST: 
target index: 366  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 215, target_source: visit_expr_

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#215  TERM#
###########


##########
#FROM SET#
##########
catch_stmt_@0_opt_3  :  :  visit_expr_  %MARK%  
 index is: 366, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
catch_stmt_@0_opt_3  :  :  visit_expr_  %MARK%  
 index is: 366, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#216  TERM#
###########


##########
#FROM SET#
##########
return_stmt_  :  return  %MARK%  return_stmt_@0_opt_2  endline_  
 index is: 340, term type: to_deduce, before: return, after: return_stmt_@0_opt_2
TARGET LIST: 
target index: 341  , change_value: return_stmt_@0_opt_2
target index: 343  , change_value: %NULL%
target index: 344  , change_value: %NULL%

########
#SUBSET#
########
return_stmt_  :  return  %MARK%  return_stmt_@0_opt_2  endline_  
 index is: 340, term type: to_deduce, before: return, after: return_stmt_@0_opt_2
TARGET LIST: 
target index: 341  , change_value: return_stmt_@0_opt_2
target index: 343  , change_value: %NULL%
target index: 344  , change_value: %NULL%

return_stmt_@0_opt_2  :  %MARK%  
 index is: 343, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

return_stmt_@0_opt_2  :  %MARK%  expr_  
 index is: 344, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 345  , change_value: expr_
target index: 403  , change_value: %NULL%

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 217, target_source: return_stmt_@0_opt_2

index: 219, target_source: expr_

index: 64, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#217  TERM#
###########


##########
#FROM SET#
##########
return_stmt_  :  return  return_stmt_@0_opt_2  %MARK%  endline_  
 index is: 341, term type: to_deduce, before: return_stmt_@0_opt_2, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 342  , change_value: endline_

########
#SUBSET#
########
return_stmt_  :  return  return_stmt_@0_opt_2  %MARK%  endline_  
 index is: 341, term type: to_deduce, before: return_stmt_@0_opt_2, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 342  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 218, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



###########
#218  TERM#
###########


##########
#FROM SET#
##########
return_stmt_  :  return  return_stmt_@0_opt_2  endline_  %MARK%  
 index is: 342, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
return_stmt_  :  return  return_stmt_@0_opt_2  endline_  %MARK%  
 index is: 342, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#219  TERM#
###########


##########
#FROM SET#
##########
return_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 345, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
return_stmt_@0_opt_2  :  expr_  %MARK%  
 index is: 345, term type: deduce, before: expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#220  TERM#
###########


##########
#FROM SET#
##########
control_stmt_  :  control_stmt_@0_decl_1  %MARK%  endline_  
 index is: 391, term type: to_deduce, before: control_stmt_@0_decl_1, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 392  , change_value: endline_

########
#SUBSET#
########
control_stmt_  :  control_stmt_@0_decl_1  %MARK%  endline_  
 index is: 391, term type: to_deduce, before: control_stmt_@0_decl_1, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 392  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 221, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



###########
#221  TERM#
###########


##########
#FROM SET#
##########
control_stmt_  :  control_stmt_@0_decl_1  endline_  %MARK%  
 index is: 392, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
control_stmt_  :  control_stmt_@0_decl_1  endline_  %MARK%  
 index is: 392, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#222  TERM#
###########


##########
#FROM SET#
##########
foreach_stmt_  :  foreach  %MARK%  ID  in  basic_expr_  for_body_  
 index is: 298, term type: shift, before: foreach, after: ID
TARGET LIST: 
target index: 299  , change_value: ID

########
#SUBSET#
########
foreach_stmt_  :  foreach  %MARK%  ID  in  basic_expr_  for_body_  
 index is: 298, term type: shift, before: foreach, after: ID
TARGET LIST: 
target index: 299  , change_value: ID

########
#TO SET#
########
index: 223, target_source: ID



###########
#223  TERM#
###########


##########
#FROM SET#
##########
foreach_stmt_  :  foreach  ID  %MARK%  in  basic_expr_  for_body_  
 index is: 299, term type: shift, before: ID, after: in
TARGET LIST: 
target index: 300  , change_value: in

########
#SUBSET#
########
foreach_stmt_  :  foreach  ID  %MARK%  in  basic_expr_  for_body_  
 index is: 299, term type: shift, before: ID, after: in
TARGET LIST: 
target index: 300  , change_value: in

########
#TO SET#
########
index: 224, target_source: in



###########
#224  TERM#
###########


##########
#FROM SET#
##########
foreach_stmt_  :  foreach  ID  in  %MARK%  basic_expr_  for_body_  
 index is: 300, term type: to_deduce, before: in, after: basic_expr_
TARGET LIST: 
target index: 301  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
foreach_stmt_  :  foreach  ID  in  %MARK%  basic_expr_  for_body_  
 index is: 300, term type: to_deduce, before: in, after: basic_expr_
TARGET LIST: 
target index: 301  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 225, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#225  TERM#
###########


##########
#FROM SET#
##########
foreach_stmt_  :  foreach  ID  in  basic_expr_  %MARK%  for_body_  
 index is: 301, term type: to_deduce, before: basic_expr_, after: for_body_
TARGET LIST: 
target index: 302  , change_value: for_body_
target index: 303  , change_value: %NULL%

########
#SUBSET#
########
foreach_stmt_  :  foreach  ID  in  basic_expr_  %MARK%  for_body_  
 index is: 301, term type: to_deduce, before: basic_expr_, after: for_body_
TARGET LIST: 
target index: 302  , change_value: for_body_
target index: 303  , change_value: %NULL%

for_body_  :  %MARK%  for_body_@0_decl_1  
 index is: 303, term type: to_deduce, before: %NULL%, after: for_body_@0_decl_1
TARGET LIST: 
target index: 304  , change_value: for_body_@0_decl_1
target index: 305  , change_value: %NULL%
target index: 310  , change_value: %NULL%

for_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 305, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 306  , change_value: ENDL

for_body_@0_decl_1  :  %MARK%  do  basic_expr_  endline_  
 index is: 310, term type: shift, before: %NULL%, after: do
TARGET LIST: 
target index: 311  , change_value: do

########
#TO SET#
########
index: 226, target_source: for_body_

index: 227, target_source: for_body_@0_decl_1

index: 228, target_source: ENDL

index: 239, target_source: do



###########
#226  TERM#
###########


##########
#FROM SET#
##########
foreach_stmt_  :  foreach  ID  in  basic_expr_  for_body_  %MARK%  
 index is: 302, term type: deduce, before: for_body_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
foreach_stmt_  :  foreach  ID  in  basic_expr_  for_body_  %MARK%  
 index is: 302, term type: deduce, before: for_body_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#227  TERM#
###########


##########
#FROM SET#
##########
for_body_  :  for_body_@0_decl_1  %MARK%  
 index is: 304, term type: deduce, before: for_body_@0_decl_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_body_  :  for_body_@0_decl_1  %MARK%  
 index is: 304, term type: deduce, before: for_body_@0_decl_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#228  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 306, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 307  , change_value: stmts_

########
#SUBSET#
########
for_body_@0_decl_1  :  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 306, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 307  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 229, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#229  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 307, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 308  , change_value: end

########
#SUBSET#
########
for_body_@0_decl_1  :  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 307, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 308  , change_value: end

########
#TO SET#
########
index: 230, target_source: end



###########
#230  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 308, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 309  , change_value: ENDL

########
#SUBSET#
########
for_body_@0_decl_1  :  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 308, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 309  , change_value: ENDL

########
#TO SET#
########
index: 231, target_source: ENDL



###########
#231  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 309, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_body_@0_decl_1  :  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 309, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#232  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  %MARK%  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 273, term type: to_deduce, before: for, after: for_stmt_@0_opt_2
TARGET LIST: 
target index: 274  , change_value: for_stmt_@0_opt_2
target index: 294  , change_value: %NULL%
target index: 295  , change_value: %NULL%

########
#SUBSET#
########
for_stmt_  :  for  %MARK%  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 273, term type: to_deduce, before: for, after: for_stmt_@0_opt_2
TARGET LIST: 
target index: 274  , change_value: for_stmt_@0_opt_2
target index: 294  , change_value: %NULL%
target index: 295  , change_value: %NULL%

for_stmt_@0_opt_2  :  %MARK%  
 index is: 294, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_2  :  %MARK%  var_def_  
 index is: 295, term type: to_deduce, before: %NULL%, after: var_def_
TARGET LIST: 
target index: 130  , change_value: %NULL%
target index: 132  , change_value: %NULL%
target index: 296  , change_value: var_def_

var_def_  :  %MARK%  var_list_  
 index is: 130, term type: to_deduce, before: %NULL%, after: var_list_
TARGET LIST: 
target index: 131  , change_value: var_list_
target index: 162  , change_value: %NULL%

var_def_  :  %MARK%  var_bind_  =  basic_expr_  
 index is: 132, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 133  , change_value: var_bind_
target index: 146  , change_value: %NULL%

var_list_  :  %MARK%  ID  =  single_expr_  var_list_@0_opt_4  
 index is: 162, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 163  , change_value: ID

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

########
#TO SET#
########
index: 233, target_source: for_stmt_@0_opt_2

index: 248, target_source: var_def_

index: 249, target_source: var_list_

index: 250, target_source: var_bind_

index: 253, target_source: ID

index: 173, target_source: (



###########
#233  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  for_stmt_@0_opt_2  %MARK%  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 274, term type: to_deduce, before: for_stmt_@0_opt_2, after: for_stmt_@0_decl_3
TARGET LIST: 
target index: 275  , change_value: for_stmt_@0_decl_3
target index: 290  , change_value: %NULL%
target index: 292  , change_value: %NULL%

########
#SUBSET#
########
for_stmt_  :  for  for_stmt_@0_opt_2  %MARK%  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 274, term type: to_deduce, before: for_stmt_@0_opt_2, after: for_stmt_@0_decl_3
TARGET LIST: 
target index: 275  , change_value: for_stmt_@0_decl_3
target index: 290  , change_value: %NULL%
target index: 292  , change_value: %NULL%

for_stmt_@0_decl_3  :  %MARK%  ,  
 index is: 290, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 291  , change_value: ,

for_stmt_@0_decl_3  :  %MARK%  ;  
 index is: 292, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 293  , change_value: ;

########
#TO SET#
########
index: 234, target_source: for_stmt_@0_decl_3

index: 246, target_source: ,

index: 247, target_source: ;



###########
#234  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  %MARK%  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 275, term type: to_deduce, before: for_stmt_@0_decl_3, after: for_stmt_@0_opt_4
TARGET LIST: 
target index: 276  , change_value: for_stmt_@0_opt_4
target index: 287  , change_value: %NULL%
target index: 288  , change_value: %NULL%

########
#SUBSET#
########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  %MARK%  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 275, term type: to_deduce, before: for_stmt_@0_decl_3, after: for_stmt_@0_opt_4
TARGET LIST: 
target index: 276  , change_value: for_stmt_@0_opt_4
target index: 287  , change_value: %NULL%
target index: 288  , change_value: %NULL%

for_stmt_@0_opt_4  :  %MARK%  
 index is: 287, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_4  :  %MARK%  basic_expr_  
 index is: 288, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 289  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 235, target_source: for_stmt_@0_opt_4

index: 245, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#235  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  %MARK%  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 276, term type: to_deduce, before: for_stmt_@0_opt_4, after: for_stmt_@0_decl_5
TARGET LIST: 
target index: 277  , change_value: for_stmt_@0_decl_5
target index: 283  , change_value: %NULL%
target index: 285  , change_value: %NULL%

########
#SUBSET#
########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  %MARK%  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 276, term type: to_deduce, before: for_stmt_@0_opt_4, after: for_stmt_@0_decl_5
TARGET LIST: 
target index: 277  , change_value: for_stmt_@0_decl_5
target index: 283  , change_value: %NULL%
target index: 285  , change_value: %NULL%

for_stmt_@0_decl_5  :  %MARK%  ,  
 index is: 283, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 284  , change_value: ,

for_stmt_@0_decl_5  :  %MARK%  ;  
 index is: 285, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 286  , change_value: ;

########
#TO SET#
########
index: 236, target_source: for_stmt_@0_decl_5

index: 243, target_source: ,

index: 244, target_source: ;



###########
#236  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  %MARK%  for_stmt_@0_opt_6  for_body_  
 index is: 277, term type: to_deduce, before: for_stmt_@0_decl_5, after: for_stmt_@0_opt_6
TARGET LIST: 
target index: 278  , change_value: for_stmt_@0_opt_6
target index: 280  , change_value: %NULL%
target index: 281  , change_value: %NULL%

########
#SUBSET#
########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  %MARK%  for_stmt_@0_opt_6  for_body_  
 index is: 277, term type: to_deduce, before: for_stmt_@0_decl_5, after: for_stmt_@0_opt_6
TARGET LIST: 
target index: 278  , change_value: for_stmt_@0_opt_6
target index: 280  , change_value: %NULL%
target index: 281  , change_value: %NULL%

for_stmt_@0_opt_6  :  %MARK%  
 index is: 280, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

for_stmt_@0_opt_6  :  %MARK%  basic_expr_  
 index is: 281, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 282  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 237, target_source: for_stmt_@0_opt_6

index: 242, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#237  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  %MARK%  for_body_  
 index is: 278, term type: to_deduce, before: for_stmt_@0_opt_6, after: for_body_
TARGET LIST: 
target index: 279  , change_value: for_body_
target index: 303  , change_value: %NULL%

########
#SUBSET#
########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  %MARK%  for_body_  
 index is: 278, term type: to_deduce, before: for_stmt_@0_opt_6, after: for_body_
TARGET LIST: 
target index: 279  , change_value: for_body_
target index: 303  , change_value: %NULL%

for_body_  :  %MARK%  for_body_@0_decl_1  
 index is: 303, term type: to_deduce, before: %NULL%, after: for_body_@0_decl_1
TARGET LIST: 
target index: 304  , change_value: for_body_@0_decl_1
target index: 305  , change_value: %NULL%
target index: 310  , change_value: %NULL%

for_body_@0_decl_1  :  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 305, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 306  , change_value: ENDL

for_body_@0_decl_1  :  %MARK%  do  basic_expr_  endline_  
 index is: 310, term type: shift, before: %NULL%, after: do
TARGET LIST: 
target index: 311  , change_value: do

########
#TO SET#
########
index: 238, target_source: for_body_

index: 227, target_source: for_body_@0_decl_1

index: 228, target_source: ENDL

index: 239, target_source: do



###########
#238  TERM#
###########


##########
#FROM SET#
##########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  %MARK%  
 index is: 279, term type: deduce, before: for_body_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_  :  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  %MARK%  
 index is: 279, term type: deduce, before: for_body_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#239  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  do  %MARK%  basic_expr_  endline_  
 index is: 311, term type: to_deduce, before: do, after: basic_expr_
TARGET LIST: 
target index: 312  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
for_body_@0_decl_1  :  do  %MARK%  basic_expr_  endline_  
 index is: 311, term type: to_deduce, before: do, after: basic_expr_
TARGET LIST: 
target index: 312  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 240, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#240  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  do  basic_expr_  %MARK%  endline_  
 index is: 312, term type: to_deduce, before: basic_expr_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 313  , change_value: endline_

########
#SUBSET#
########
for_body_@0_decl_1  :  do  basic_expr_  %MARK%  endline_  
 index is: 312, term type: to_deduce, before: basic_expr_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 313  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 241, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



###########
#241  TERM#
###########


##########
#FROM SET#
##########
for_body_@0_decl_1  :  do  basic_expr_  endline_  %MARK%  
 index is: 313, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_body_@0_decl_1  :  do  basic_expr_  endline_  %MARK%  
 index is: 313, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#242  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_opt_6  :  basic_expr_  %MARK%  
 index is: 282, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_opt_6  :  basic_expr_  %MARK%  
 index is: 282, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#243  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_decl_5  :  ,  %MARK%  
 index is: 284, term type: deduce, before: ,, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_decl_5  :  ,  %MARK%  
 index is: 284, term type: deduce, before: ,, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#244  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_decl_5  :  ;  %MARK%  
 index is: 286, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_decl_5  :  ;  %MARK%  
 index is: 286, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#245  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_opt_4  :  basic_expr_  %MARK%  
 index is: 289, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_opt_4  :  basic_expr_  %MARK%  
 index is: 289, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#246  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_decl_3  :  ,  %MARK%  
 index is: 291, term type: deduce, before: ,, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_decl_3  :  ,  %MARK%  
 index is: 291, term type: deduce, before: ,, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#247  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_decl_3  :  ;  %MARK%  
 index is: 293, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_decl_3  :  ;  %MARK%  
 index is: 293, term type: deduce, before: ;, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#248  TERM#
###########


##########
#FROM SET#
##########
for_stmt_@0_opt_2  :  var_def_  %MARK%  
 index is: 296, term type: deduce, before: var_def_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
for_stmt_@0_opt_2  :  var_def_  %MARK%  
 index is: 296, term type: deduce, before: var_def_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#249  TERM#
###########


##########
#FROM SET#
##########
var_def_  :  var_list_  %MARK%  
 index is: 131, term type: deduce, before: var_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_def_  :  var_list_  %MARK%  
 index is: 131, term type: deduce, before: var_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#250  TERM#
###########


##########
#FROM SET#
##########
var_def_  :  var_bind_  %MARK%  =  basic_expr_  
 index is: 133, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 134  , change_value: =

########
#SUBSET#
########
var_def_  :  var_bind_  %MARK%  =  basic_expr_  
 index is: 133, term type: shift, before: var_bind_, after: =
TARGET LIST: 
target index: 134  , change_value: =

########
#TO SET#
########
index: 251, target_source: =



###########
#251  TERM#
###########


##########
#FROM SET#
##########
var_def_  :  var_bind_  =  %MARK%  basic_expr_  
 index is: 134, term type: to_deduce, before: =, after: basic_expr_
TARGET LIST: 
target index: 135  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
var_def_  :  var_bind_  =  %MARK%  basic_expr_  
 index is: 134, term type: to_deduce, before: =, after: basic_expr_
TARGET LIST: 
target index: 135  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 252, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#252  TERM#
###########


##########
#FROM SET#
##########
var_def_  :  var_bind_  =  basic_expr_  %MARK%  
 index is: 135, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_def_  :  var_bind_  =  basic_expr_  %MARK%  
 index is: 135, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#253  TERM#
###########


##########
#FROM SET#
##########
var_list_  :  ID  %MARK%  =  single_expr_  var_list_@0_opt_4  
 index is: 163, term type: shift, before: ID, after: =
TARGET LIST: 
target index: 164  , change_value: =

########
#SUBSET#
########
var_list_  :  ID  %MARK%  =  single_expr_  var_list_@0_opt_4  
 index is: 163, term type: shift, before: ID, after: =
TARGET LIST: 
target index: 164  , change_value: =

########
#TO SET#
########
index: 254, target_source: =



###########
#254  TERM#
###########


##########
#FROM SET#
##########
var_list_  :  ID  =  %MARK%  single_expr_  var_list_@0_opt_4  
 index is: 164, term type: to_deduce, before: =, after: single_expr_
TARGET LIST: 
target index: 165  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

########
#SUBSET#
########
var_list_  :  ID  =  %MARK%  single_expr_  var_list_@0_opt_4  
 index is: 164, term type: to_deduce, before: =, after: single_expr_
TARGET LIST: 
target index: 165  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 255, target_source: single_expr_

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#255  TERM#
###########


##########
#FROM SET#
##########
var_list_  :  ID  =  single_expr_  %MARK%  var_list_@0_opt_4  
 index is: 165, term type: to_deduce, before: single_expr_, after: var_list_@0_opt_4
TARGET LIST: 
target index: 166  , change_value: var_list_@0_opt_4
target index: 167  , change_value: %NULL%
target index: 168  , change_value: %NULL%

########
#SUBSET#
########
var_list_  :  ID  =  single_expr_  %MARK%  var_list_@0_opt_4  
 index is: 165, term type: to_deduce, before: single_expr_, after: var_list_@0_opt_4
TARGET LIST: 
target index: 166  , change_value: var_list_@0_opt_4
target index: 167  , change_value: %NULL%
target index: 168  , change_value: %NULL%

var_list_@0_opt_4  :  %MARK%  
 index is: 167, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

var_list_@0_opt_4  :  %MARK%  ,  var_list_  
 index is: 168, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 169  , change_value: ,

########
#TO SET#
########
index: 256, target_source: var_list_@0_opt_4

index: 257, target_source: ,



###########
#256  TERM#
###########


##########
#FROM SET#
##########
var_list_  :  ID  =  single_expr_  var_list_@0_opt_4  %MARK%  
 index is: 166, term type: deduce, before: var_list_@0_opt_4, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_list_  :  ID  =  single_expr_  var_list_@0_opt_4  %MARK%  
 index is: 166, term type: deduce, before: var_list_@0_opt_4, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#257  TERM#
###########


##########
#FROM SET#
##########
var_list_@0_opt_4  :  ,  %MARK%  var_list_  
 index is: 169, term type: to_deduce, before: ,, after: var_list_
TARGET LIST: 
target index: 162  , change_value: %NULL%
target index: 170  , change_value: var_list_

########
#SUBSET#
########
var_list_@0_opt_4  :  ,  %MARK%  var_list_  
 index is: 169, term type: to_deduce, before: ,, after: var_list_
TARGET LIST: 
target index: 162  , change_value: %NULL%
target index: 170  , change_value: var_list_

var_list_  :  %MARK%  ID  =  single_expr_  var_list_@0_opt_4  
 index is: 162, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 163  , change_value: ID

########
#TO SET#
########
index: 258, target_source: var_list_

index: 253, target_source: ID



###########
#258  TERM#
###########


##########
#FROM SET#
##########
var_list_@0_opt_4  :  ,  var_list_  %MARK%  
 index is: 170, term type: deduce, before: var_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_list_@0_opt_4  :  ,  var_list_  %MARK%  
 index is: 170, term type: deduce, before: var_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#259  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_  :  loop  %MARK%  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 258, term type: shift, before: loop, after: ENDL
TARGET LIST: 
target index: 259  , change_value: ENDL

########
#SUBSET#
########
loop_stmt_  :  loop  %MARK%  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 258, term type: shift, before: loop, after: ENDL
TARGET LIST: 
target index: 259  , change_value: ENDL

########
#TO SET#
########
index: 260, target_source: ENDL



###########
#260  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_  :  loop  ENDL  %MARK%  stmts_  loop_stmt_@0_decl_4  
 index is: 259, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 260  , change_value: stmts_

########
#SUBSET#
########
loop_stmt_  :  loop  ENDL  %MARK%  stmts_  loop_stmt_@0_decl_4  
 index is: 259, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 260  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 261, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#261  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_  :  loop  ENDL  stmts_  %MARK%  loop_stmt_@0_decl_4  
 index is: 260, term type: to_deduce, before: stmts_, after: loop_stmt_@0_decl_4
TARGET LIST: 
target index: 261  , change_value: loop_stmt_@0_decl_4
target index: 262  , change_value: %NULL%
target index: 264  , change_value: %NULL%
target index: 266  , change_value: %NULL%

########
#SUBSET#
########
loop_stmt_  :  loop  ENDL  stmts_  %MARK%  loop_stmt_@0_decl_4  
 index is: 260, term type: to_deduce, before: stmts_, after: loop_stmt_@0_decl_4
TARGET LIST: 
target index: 261  , change_value: loop_stmt_@0_decl_4
target index: 262  , change_value: %NULL%
target index: 264  , change_value: %NULL%
target index: 266  , change_value: %NULL%

loop_stmt_@0_decl_4  :  %MARK%  ENDL  
 index is: 262, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 263  , change_value: ENDL

loop_stmt_@0_decl_4  :  %MARK%  end  
 index is: 264, term type: shift, before: %NULL%, after: end
TARGET LIST: 
target index: 265  , change_value: end

loop_stmt_@0_decl_4  :  %MARK%  until_stmt_  
 index is: 266, term type: to_deduce, before: %NULL%, after: until_stmt_
TARGET LIST: 
target index: 267  , change_value: until_stmt_
target index: 268  , change_value: %NULL%

until_stmt_  :  %MARK%  until  basic_expr_  ENDL  
 index is: 268, term type: shift, before: %NULL%, after: until
TARGET LIST: 
target index: 269  , change_value: until

########
#TO SET#
########
index: 262, target_source: loop_stmt_@0_decl_4

index: 263, target_source: ENDL

index: 264, target_source: end

index: 265, target_source: until_stmt_

index: 266, target_source: until



###########
#262  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_  :  loop  ENDL  stmts_  loop_stmt_@0_decl_4  %MARK%  
 index is: 261, term type: deduce, before: loop_stmt_@0_decl_4, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
loop_stmt_  :  loop  ENDL  stmts_  loop_stmt_@0_decl_4  %MARK%  
 index is: 261, term type: deduce, before: loop_stmt_@0_decl_4, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#263  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_@0_decl_4  :  ENDL  %MARK%  
 index is: 263, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
loop_stmt_@0_decl_4  :  ENDL  %MARK%  
 index is: 263, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#264  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_@0_decl_4  :  end  %MARK%  
 index is: 265, term type: deduce, before: end, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
loop_stmt_@0_decl_4  :  end  %MARK%  
 index is: 265, term type: deduce, before: end, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#265  TERM#
###########


##########
#FROM SET#
##########
loop_stmt_@0_decl_4  :  until_stmt_  %MARK%  
 index is: 267, term type: deduce, before: until_stmt_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
loop_stmt_@0_decl_4  :  until_stmt_  %MARK%  
 index is: 267, term type: deduce, before: until_stmt_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#266  TERM#
###########


##########
#FROM SET#
##########
until_stmt_  :  until  %MARK%  basic_expr_  ENDL  
 index is: 269, term type: to_deduce, before: until, after: basic_expr_
TARGET LIST: 
target index: 270  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
until_stmt_  :  until  %MARK%  basic_expr_  ENDL  
 index is: 269, term type: to_deduce, before: until, after: basic_expr_
TARGET LIST: 
target index: 270  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 267, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#267  TERM#
###########


##########
#FROM SET#
##########
until_stmt_  :  until  basic_expr_  %MARK%  ENDL  
 index is: 270, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 271  , change_value: ENDL

########
#SUBSET#
########
until_stmt_  :  until  basic_expr_  %MARK%  ENDL  
 index is: 270, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 271  , change_value: ENDL

########
#TO SET#
########
index: 268, target_source: ENDL



###########
#268  TERM#
###########


##########
#FROM SET#
##########
until_stmt_  :  until  basic_expr_  ENDL  %MARK%  
 index is: 271, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
until_stmt_  :  until  basic_expr_  ENDL  %MARK%  
 index is: 271, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#269  TERM#
###########


##########
#FROM SET#
##########
while_stmt_  :  while  %MARK%  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 251, term type: to_deduce, before: while, after: basic_expr_
TARGET LIST: 
target index: 252  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
while_stmt_  :  while  %MARK%  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 251, term type: to_deduce, before: while, after: basic_expr_
TARGET LIST: 
target index: 252  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 270, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#270  TERM#
###########


##########
#FROM SET#
##########
while_stmt_  :  while  basic_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 252, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 253  , change_value: ENDL

########
#SUBSET#
########
while_stmt_  :  while  basic_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 252, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 253  , change_value: ENDL

########
#TO SET#
########
index: 271, target_source: ENDL



###########
#271  TERM#
###########


##########
#FROM SET#
##########
while_stmt_  :  while  basic_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 253, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 254  , change_value: stmts_

########
#SUBSET#
########
while_stmt_  :  while  basic_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 253, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 254  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 272, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#272  TERM#
###########


##########
#FROM SET#
##########
while_stmt_  :  while  basic_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 254, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 255  , change_value: end

########
#SUBSET#
########
while_stmt_  :  while  basic_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 254, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 255  , change_value: end

########
#TO SET#
########
index: 273, target_source: end



###########
#273  TERM#
###########


##########
#FROM SET#
##########
while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 255, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 256  , change_value: ENDL

########
#SUBSET#
########
while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 255, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 256  , change_value: ENDL

########
#TO SET#
########
index: 274, target_source: ENDL



###########
#274  TERM#
###########


##########
#FROM SET#
##########
while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 256, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
while_stmt_  :  while  basic_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 256, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#275  TERM#
###########


##########
#FROM SET#
##########
switch_stmt_  :  switch  %MARK%  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 217, term type: to_deduce, before: switch, after: basic_expr_
TARGET LIST: 
target index: 218  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
switch_stmt_  :  switch  %MARK%  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 217, term type: to_deduce, before: switch, after: basic_expr_
TARGET LIST: 
target index: 218  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 276, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#276  TERM#
###########


##########
#FROM SET#
##########
switch_stmt_  :  switch  basic_expr_  %MARK%  ENDL  switch_stmts_  end  ENDL  
 index is: 218, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 219  , change_value: ENDL

########
#SUBSET#
########
switch_stmt_  :  switch  basic_expr_  %MARK%  ENDL  switch_stmts_  end  ENDL  
 index is: 218, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 219  , change_value: ENDL

########
#TO SET#
########
index: 277, target_source: ENDL



###########
#277  TERM#
###########


##########
#FROM SET#
##########
switch_stmt_  :  switch  basic_expr_  ENDL  %MARK%  switch_stmts_  end  ENDL  
 index is: 219, term type: to_deduce, before: ENDL, after: switch_stmts_
TARGET LIST: 
target index: 220  , change_value: switch_stmts_
target index: 223  , change_value: %NULL%

########
#SUBSET#
########
switch_stmt_  :  switch  basic_expr_  ENDL  %MARK%  switch_stmts_  end  ENDL  
 index is: 219, term type: to_deduce, before: ENDL, after: switch_stmts_
TARGET LIST: 
target index: 220  , change_value: switch_stmts_
target index: 223  , change_value: %NULL%

switch_stmts_  :  %MARK%  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  
 index is: 223, term type: to_deduce, before: %NULL%, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 224  , change_value: switch_stmts_@0_rep_1
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 234  , change_value: %NULL%

switch_stmts_@0_rep_1  :  %MARK%  
 index is: 230, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_1  :  %MARK%  switch_default_  switch_stmts_@0_rep_1  
 index is: 231, term type: to_deduce, before: %NULL%, after: switch_default_
TARGET LIST: 
target index: 232  , change_value: switch_default_
target index: 244  , change_value: %NULL%

switch_stmts_@0_rep_1  :  %MARK%  switch_case_  switch_stmts_@0_rep_1  
 index is: 234, term type: to_deduce, before: %NULL%, after: switch_case_
TARGET LIST: 
target index: 235  , change_value: switch_case_
target index: 237  , change_value: %NULL%

switch_default_  :  %MARK%  default  ENDL  stmts_  end  ENDL  
 index is: 244, term type: shift, before: %NULL%, after: default
TARGET LIST: 
target index: 245  , change_value: default

switch_case_  :  %MARK%  case  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 237, term type: shift, before: %NULL%, after: case
TARGET LIST: 
target index: 238  , change_value: case

########
#TO SET#
########
index: 278, target_source: switch_stmts_

index: 281, target_source: switch_stmts_@0_rep_1

index: 285, target_source: switch_default_

index: 287, target_source: switch_case_

index: 289, target_source: default

index: 358, target_source: case



###########
#278  TERM#
###########


##########
#FROM SET#
##########
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  %MARK%  end  ENDL  
 index is: 220, term type: shift, before: switch_stmts_, after: end
TARGET LIST: 
target index: 221  , change_value: end

########
#SUBSET#
########
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  %MARK%  end  ENDL  
 index is: 220, term type: shift, before: switch_stmts_, after: end
TARGET LIST: 
target index: 221  , change_value: end

########
#TO SET#
########
index: 279, target_source: end



###########
#279  TERM#
###########


##########
#FROM SET#
##########
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  %MARK%  ENDL  
 index is: 221, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 222  , change_value: ENDL

########
#SUBSET#
########
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  %MARK%  ENDL  
 index is: 221, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 222  , change_value: ENDL

########
#TO SET#
########
index: 280, target_source: ENDL



###########
#280  TERM#
###########


##########
#FROM SET#
##########
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  %MARK%  
 index is: 222, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_stmt_  :  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  %MARK%  
 index is: 222, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#281  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_  :  switch_stmts_@0_rep_1  %MARK%  switch_stmts_@0_rep_2  
 index is: 224, term type: to_deduce, before: switch_stmts_@0_rep_1, after: switch_stmts_@0_rep_2
TARGET LIST: 
target index: 225  , change_value: switch_stmts_@0_rep_2
target index: 226  , change_value: %NULL%
target index: 227  , change_value: %NULL%

########
#SUBSET#
########
switch_stmts_  :  switch_stmts_@0_rep_1  %MARK%  switch_stmts_@0_rep_2  
 index is: 224, term type: to_deduce, before: switch_stmts_@0_rep_1, after: switch_stmts_@0_rep_2
TARGET LIST: 
target index: 225  , change_value: switch_stmts_@0_rep_2
target index: 226  , change_value: %NULL%
target index: 227  , change_value: %NULL%

switch_stmts_@0_rep_2  :  %MARK%  
 index is: 226, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_2  :  %MARK%  ENDL  switch_stmts_@0_rep_2  
 index is: 227, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 228  , change_value: ENDL

########
#TO SET#
########
index: 282, target_source: switch_stmts_@0_rep_2

index: 283, target_source: ENDL



###########
#282  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_  :  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  %MARK%  
 index is: 225, term type: deduce, before: switch_stmts_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_stmts_  :  switch_stmts_@0_rep_1  switch_stmts_@0_rep_2  %MARK%  
 index is: 225, term type: deduce, before: switch_stmts_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#283  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_@0_rep_2  :  ENDL  %MARK%  switch_stmts_@0_rep_2  
 index is: 228, term type: to_deduce, before: ENDL, after: switch_stmts_@0_rep_2
TARGET LIST: 
target index: 226  , change_value: %NULL%
target index: 227  , change_value: %NULL%
target index: 229  , change_value: switch_stmts_@0_rep_2

########
#SUBSET#
########
switch_stmts_@0_rep_2  :  ENDL  %MARK%  switch_stmts_@0_rep_2  
 index is: 228, term type: to_deduce, before: ENDL, after: switch_stmts_@0_rep_2
TARGET LIST: 
target index: 226  , change_value: %NULL%
target index: 227  , change_value: %NULL%
target index: 229  , change_value: switch_stmts_@0_rep_2

switch_stmts_@0_rep_2  :  %MARK%  
 index is: 226, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_2  :  %MARK%  ENDL  switch_stmts_@0_rep_2  
 index is: 227, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 228  , change_value: ENDL

########
#TO SET#
########
index: 284, target_source: switch_stmts_@0_rep_2

index: 283, target_source: ENDL



###########
#284  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_@0_rep_2  :  ENDL  switch_stmts_@0_rep_2  %MARK%  
 index is: 229, term type: deduce, before: switch_stmts_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_stmts_@0_rep_2  :  ENDL  switch_stmts_@0_rep_2  %MARK%  
 index is: 229, term type: deduce, before: switch_stmts_@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#285  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_@0_rep_1  :  switch_default_  %MARK%  switch_stmts_@0_rep_1  
 index is: 232, term type: to_deduce, before: switch_default_, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 233  , change_value: switch_stmts_@0_rep_1
target index: 234  , change_value: %NULL%

########
#SUBSET#
########
switch_stmts_@0_rep_1  :  switch_default_  %MARK%  switch_stmts_@0_rep_1  
 index is: 232, term type: to_deduce, before: switch_default_, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 233  , change_value: switch_stmts_@0_rep_1
target index: 234  , change_value: %NULL%

switch_stmts_@0_rep_1  :  %MARK%  
 index is: 230, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_1  :  %MARK%  switch_default_  switch_stmts_@0_rep_1  
 index is: 231, term type: to_deduce, before: %NULL%, after: switch_default_
TARGET LIST: 
target index: 232  , change_value: switch_default_
target index: 244  , change_value: %NULL%

switch_stmts_@0_rep_1  :  %MARK%  switch_case_  switch_stmts_@0_rep_1  
 index is: 234, term type: to_deduce, before: %NULL%, after: switch_case_
TARGET LIST: 
target index: 235  , change_value: switch_case_
target index: 237  , change_value: %NULL%

switch_default_  :  %MARK%  default  ENDL  stmts_  end  ENDL  
 index is: 244, term type: shift, before: %NULL%, after: default
TARGET LIST: 
target index: 245  , change_value: default

switch_case_  :  %MARK%  case  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 237, term type: shift, before: %NULL%, after: case
TARGET LIST: 
target index: 238  , change_value: case

########
#TO SET#
########
index: 286, target_source: switch_stmts_@0_rep_1

index: 285, target_source: switch_default_

index: 287, target_source: switch_case_

index: 289, target_source: default

index: 358, target_source: case



###########
#286  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_@0_rep_1  :  switch_default_  switch_stmts_@0_rep_1  %MARK%  
 index is: 233, term type: deduce, before: switch_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_stmts_@0_rep_1  :  switch_default_  switch_stmts_@0_rep_1  %MARK%  
 index is: 233, term type: deduce, before: switch_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#287  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_@0_rep_1  :  switch_case_  %MARK%  switch_stmts_@0_rep_1  
 index is: 235, term type: to_deduce, before: switch_case_, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 234  , change_value: %NULL%
target index: 236  , change_value: switch_stmts_@0_rep_1

########
#SUBSET#
########
switch_stmts_@0_rep_1  :  switch_case_  %MARK%  switch_stmts_@0_rep_1  
 index is: 235, term type: to_deduce, before: switch_case_, after: switch_stmts_@0_rep_1
TARGET LIST: 
target index: 230  , change_value: %NULL%
target index: 231  , change_value: %NULL%
target index: 234  , change_value: %NULL%
target index: 236  , change_value: switch_stmts_@0_rep_1

switch_stmts_@0_rep_1  :  %MARK%  
 index is: 230, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

switch_stmts_@0_rep_1  :  %MARK%  switch_default_  switch_stmts_@0_rep_1  
 index is: 231, term type: to_deduce, before: %NULL%, after: switch_default_
TARGET LIST: 
target index: 232  , change_value: switch_default_
target index: 244  , change_value: %NULL%

switch_stmts_@0_rep_1  :  %MARK%  switch_case_  switch_stmts_@0_rep_1  
 index is: 234, term type: to_deduce, before: %NULL%, after: switch_case_
TARGET LIST: 
target index: 235  , change_value: switch_case_
target index: 237  , change_value: %NULL%

switch_default_  :  %MARK%  default  ENDL  stmts_  end  ENDL  
 index is: 244, term type: shift, before: %NULL%, after: default
TARGET LIST: 
target index: 245  , change_value: default

switch_case_  :  %MARK%  case  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 237, term type: shift, before: %NULL%, after: case
TARGET LIST: 
target index: 238  , change_value: case

########
#TO SET#
########
index: 288, target_source: switch_stmts_@0_rep_1

index: 285, target_source: switch_default_

index: 287, target_source: switch_case_

index: 289, target_source: default

index: 358, target_source: case



###########
#288  TERM#
###########


##########
#FROM SET#
##########
switch_stmts_@0_rep_1  :  switch_case_  switch_stmts_@0_rep_1  %MARK%  
 index is: 236, term type: deduce, before: switch_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_stmts_@0_rep_1  :  switch_case_  switch_stmts_@0_rep_1  %MARK%  
 index is: 236, term type: deduce, before: switch_stmts_@0_rep_1, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#289  TERM#
###########


##########
#FROM SET#
##########
switch_default_  :  default  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 245, term type: shift, before: default, after: ENDL
TARGET LIST: 
target index: 246  , change_value: ENDL

########
#SUBSET#
########
switch_default_  :  default  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 245, term type: shift, before: default, after: ENDL
TARGET LIST: 
target index: 246  , change_value: ENDL

########
#TO SET#
########
index: 290, target_source: ENDL



###########
#290  TERM#
###########


##########
#FROM SET#
##########
switch_default_  :  default  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 246, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 247  , change_value: stmts_

########
#SUBSET#
########
switch_default_  :  default  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 246, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 247  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 291, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#291  TERM#
###########


##########
#FROM SET#
##########
switch_default_  :  default  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 247, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 248  , change_value: end

########
#SUBSET#
########
switch_default_  :  default  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 247, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 248  , change_value: end

########
#TO SET#
########
index: 292, target_source: end



###########
#292  TERM#
###########


##########
#FROM SET#
##########
switch_default_  :  default  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 248, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 249  , change_value: ENDL

########
#SUBSET#
########
switch_default_  :  default  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 248, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 249  , change_value: ENDL

########
#TO SET#
########
index: 293, target_source: ENDL



###########
#293  TERM#
###########


##########
#FROM SET#
##########
switch_default_  :  default  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 249, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_default_  :  default  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 249, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#294  TERM#
###########


##########
#FROM SET#
##########
if_stmt_  :  if  %MARK%  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 196, term type: to_deduce, before: if, after: basic_expr_
TARGET LIST: 
target index: 197  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
if_stmt_  :  if  %MARK%  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 196, term type: to_deduce, before: if, after: basic_expr_
TARGET LIST: 
target index: 197  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 295, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#295  TERM#
###########


##########
#FROM SET#
##########
if_stmt_  :  if  basic_expr_  %MARK%  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 197, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 198  , change_value: ENDL

########
#SUBSET#
########
if_stmt_  :  if  basic_expr_  %MARK%  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 197, term type: shift, before: basic_expr_, after: ENDL
TARGET LIST: 
target index: 198  , change_value: ENDL

########
#TO SET#
########
index: 296, target_source: ENDL



###########
#296  TERM#
###########


##########
#FROM SET#
##########
if_stmt_  :  if  basic_expr_  ENDL  %MARK%  stmts_  if_stmt_@0_rep_5  
 index is: 198, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 199  , change_value: stmts_

########
#SUBSET#
########
if_stmt_  :  if  basic_expr_  ENDL  %MARK%  stmts_  if_stmt_@0_rep_5  
 index is: 198, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 199  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 297, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#297  TERM#
###########


##########
#FROM SET#
##########
if_stmt_  :  if  basic_expr_  ENDL  stmts_  %MARK%  if_stmt_@0_rep_5  
 index is: 199, term type: to_deduce, before: stmts_, after: if_stmt_@0_rep_5
TARGET LIST: 
target index: 200  , change_value: if_stmt_@0_rep_5
target index: 201  , change_value: %NULL%
target index: 202  , change_value: %NULL%

########
#SUBSET#
########
if_stmt_  :  if  basic_expr_  ENDL  stmts_  %MARK%  if_stmt_@0_rep_5  
 index is: 199, term type: to_deduce, before: stmts_, after: if_stmt_@0_rep_5
TARGET LIST: 
target index: 200  , change_value: if_stmt_@0_rep_5
target index: 201  , change_value: %NULL%
target index: 202  , change_value: %NULL%

if_stmt_@0_rep_5  :  %MARK%  
 index is: 201, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

if_stmt_@0_rep_5  :  %MARK%  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 202, term type: to_deduce, before: %NULL%, after: else_stmt_
TARGET LIST: 
target index: 203  , change_value: else_stmt_
target index: 208  , change_value: %NULL%

else_stmt_  :  %MARK%  else  else_stmt_@0_opt_2  ENDL  
 index is: 208, term type: shift, before: %NULL%, after: else
TARGET LIST: 
target index: 209  , change_value: else

########
#TO SET#
########
index: 298, target_source: if_stmt_@0_rep_5

index: 299, target_source: else_stmt_

index: 304, target_source: else



###########
#298  TERM#
###########


##########
#FROM SET#
##########
if_stmt_  :  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  %MARK%  
 index is: 200, term type: deduce, before: if_stmt_@0_rep_5, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
if_stmt_  :  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  %MARK%  
 index is: 200, term type: deduce, before: if_stmt_@0_rep_5, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#299  TERM#
###########


##########
#FROM SET#
##########
if_stmt_@0_rep_5  :  else_stmt_  %MARK%  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 203, term type: to_deduce, before: else_stmt_, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 204  , change_value: stmts_

########
#SUBSET#
########
if_stmt_@0_rep_5  :  else_stmt_  %MARK%  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 203, term type: to_deduce, before: else_stmt_, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 204  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 300, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#300  TERM#
###########


##########
#FROM SET#
##########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  %MARK%  end  ENDL  if_stmt_@0_rep_5  
 index is: 204, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 205  , change_value: end

########
#SUBSET#
########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  %MARK%  end  ENDL  if_stmt_@0_rep_5  
 index is: 204, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 205  , change_value: end

########
#TO SET#
########
index: 301, target_source: end



###########
#301  TERM#
###########


##########
#FROM SET#
##########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  %MARK%  ENDL  if_stmt_@0_rep_5  
 index is: 205, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 206  , change_value: ENDL

########
#SUBSET#
########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  %MARK%  ENDL  if_stmt_@0_rep_5  
 index is: 205, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 206  , change_value: ENDL

########
#TO SET#
########
index: 302, target_source: ENDL



###########
#302  TERM#
###########


##########
#FROM SET#
##########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  %MARK%  if_stmt_@0_rep_5  
 index is: 206, term type: to_deduce, before: ENDL, after: if_stmt_@0_rep_5
TARGET LIST: 
target index: 201  , change_value: %NULL%
target index: 202  , change_value: %NULL%
target index: 207  , change_value: if_stmt_@0_rep_5

########
#SUBSET#
########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  %MARK%  if_stmt_@0_rep_5  
 index is: 206, term type: to_deduce, before: ENDL, after: if_stmt_@0_rep_5
TARGET LIST: 
target index: 201  , change_value: %NULL%
target index: 202  , change_value: %NULL%
target index: 207  , change_value: if_stmt_@0_rep_5

if_stmt_@0_rep_5  :  %MARK%  
 index is: 201, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

if_stmt_@0_rep_5  :  %MARK%  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  
 index is: 202, term type: to_deduce, before: %NULL%, after: else_stmt_
TARGET LIST: 
target index: 203  , change_value: else_stmt_
target index: 208  , change_value: %NULL%

else_stmt_  :  %MARK%  else  else_stmt_@0_opt_2  ENDL  
 index is: 208, term type: shift, before: %NULL%, after: else
TARGET LIST: 
target index: 209  , change_value: else

########
#TO SET#
########
index: 303, target_source: if_stmt_@0_rep_5

index: 299, target_source: else_stmt_

index: 304, target_source: else



###########
#303  TERM#
###########


##########
#FROM SET#
##########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  %MARK%  
 index is: 207, term type: deduce, before: if_stmt_@0_rep_5, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
if_stmt_@0_rep_5  :  else_stmt_  stmts_  end  ENDL  if_stmt_@0_rep_5  %MARK%  
 index is: 207, term type: deduce, before: if_stmt_@0_rep_5, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#304  TERM#
###########


##########
#FROM SET#
##########
else_stmt_  :  else  %MARK%  else_stmt_@0_opt_2  ENDL  
 index is: 209, term type: to_deduce, before: else, after: else_stmt_@0_opt_2
TARGET LIST: 
target index: 210  , change_value: else_stmt_@0_opt_2
target index: 212  , change_value: %NULL%
target index: 213  , change_value: %NULL%

########
#SUBSET#
########
else_stmt_  :  else  %MARK%  else_stmt_@0_opt_2  ENDL  
 index is: 209, term type: to_deduce, before: else, after: else_stmt_@0_opt_2
TARGET LIST: 
target index: 210  , change_value: else_stmt_@0_opt_2
target index: 212  , change_value: %NULL%
target index: 213  , change_value: %NULL%

else_stmt_@0_opt_2  :  %MARK%  
 index is: 212, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

else_stmt_@0_opt_2  :  %MARK%  if  basic_expr_  
 index is: 213, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 214  , change_value: if

########
#TO SET#
########
index: 305, target_source: else_stmt_@0_opt_2

index: 307, target_source: if



###########
#305  TERM#
###########


##########
#FROM SET#
##########
else_stmt_  :  else  else_stmt_@0_opt_2  %MARK%  ENDL  
 index is: 210, term type: shift, before: else_stmt_@0_opt_2, after: ENDL
TARGET LIST: 
target index: 211  , change_value: ENDL

########
#SUBSET#
########
else_stmt_  :  else  else_stmt_@0_opt_2  %MARK%  ENDL  
 index is: 210, term type: shift, before: else_stmt_@0_opt_2, after: ENDL
TARGET LIST: 
target index: 211  , change_value: ENDL

########
#TO SET#
########
index: 306, target_source: ENDL



###########
#306  TERM#
###########


##########
#FROM SET#
##########
else_stmt_  :  else  else_stmt_@0_opt_2  ENDL  %MARK%  
 index is: 211, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
else_stmt_  :  else  else_stmt_@0_opt_2  ENDL  %MARK%  
 index is: 211, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#307  TERM#
###########


##########
#FROM SET#
##########
else_stmt_@0_opt_2  :  if  %MARK%  basic_expr_  
 index is: 214, term type: to_deduce, before: if, after: basic_expr_
TARGET LIST: 
target index: 215  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

########
#SUBSET#
########
else_stmt_@0_opt_2  :  if  %MARK%  basic_expr_  
 index is: 214, term type: to_deduce, before: if, after: basic_expr_
TARGET LIST: 
target index: 215  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 308, target_source: basic_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#308  TERM#
###########


##########
#FROM SET#
##########
else_stmt_@0_opt_2  :  if  basic_expr_  %MARK%  
 index is: 215, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
else_stmt_@0_opt_2  :  if  basic_expr_  %MARK%  
 index is: 215, term type: deduce, before: basic_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#309  TERM#
###########


##########
#FROM SET#
##########
using_stmt_  :  using  %MARK%  using_list_  endline  
 index is: 185, term type: to_deduce, before: using, after: using_list_
TARGET LIST: 
target index: 186  , change_value: using_list_
target index: 188  , change_value: %NULL%

########
#SUBSET#
########
using_stmt_  :  using  %MARK%  using_list_  endline  
 index is: 185, term type: to_deduce, before: using, after: using_list_
TARGET LIST: 
target index: 186  , change_value: using_list_
target index: 188  , change_value: %NULL%

using_list_  :  %MARK%  module_list_  using_list_@0_opt_2  
 index is: 188, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 189  , change_value: module_list_

module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 108  , change_value: ID

########
#TO SET#
########
index: 310, target_source: using_list_

index: 312, target_source: module_list_

index: 316, target_source: ID



###########
#310  TERM#
###########


##########
#FROM SET#
##########
using_stmt_  :  using  using_list_  %MARK%  endline  
 index is: 186, term type: shift, before: using_list_, after: endline
TARGET LIST: 
target index: 187  , change_value: endline

########
#SUBSET#
########
using_stmt_  :  using  using_list_  %MARK%  endline  
 index is: 186, term type: shift, before: using_list_, after: endline
TARGET LIST: 
target index: 187  , change_value: endline

########
#TO SET#
########
index: 311, target_source: endline



###########
#311  TERM#
###########


##########
#FROM SET#
##########
using_stmt_  :  using  using_list_  endline  %MARK%  
 index is: 187, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
using_stmt_  :  using  using_list_  endline  %MARK%  
 index is: 187, term type: deduce, before: endline, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#312  TERM#
###########


##########
#FROM SET#
##########
using_list_  :  module_list_  %MARK%  using_list_@0_opt_2  
 index is: 189, term type: to_deduce, before: module_list_, after: using_list_@0_opt_2
TARGET LIST: 
target index: 190  , change_value: using_list_@0_opt_2
target index: 191  , change_value: %NULL%
target index: 192  , change_value: %NULL%

########
#SUBSET#
########
using_list_  :  module_list_  %MARK%  using_list_@0_opt_2  
 index is: 189, term type: to_deduce, before: module_list_, after: using_list_@0_opt_2
TARGET LIST: 
target index: 190  , change_value: using_list_@0_opt_2
target index: 191  , change_value: %NULL%
target index: 192  , change_value: %NULL%

using_list_@0_opt_2  :  %MARK%  
 index is: 191, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

using_list_@0_opt_2  :  %MARK%  ,  using_list_  
 index is: 192, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 193  , change_value: ,

########
#TO SET#
########
index: 313, target_source: using_list_@0_opt_2

index: 314, target_source: ,



###########
#313  TERM#
###########


##########
#FROM SET#
##########
using_list_  :  module_list_  using_list_@0_opt_2  %MARK%  
 index is: 190, term type: deduce, before: using_list_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
using_list_  :  module_list_  using_list_@0_opt_2  %MARK%  
 index is: 190, term type: deduce, before: using_list_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#314  TERM#
###########


##########
#FROM SET#
##########
using_list_@0_opt_2  :  ,  %MARK%  using_list_  
 index is: 193, term type: to_deduce, before: ,, after: using_list_
TARGET LIST: 
target index: 188  , change_value: %NULL%
target index: 194  , change_value: using_list_

########
#SUBSET#
########
using_list_@0_opt_2  :  ,  %MARK%  using_list_  
 index is: 193, term type: to_deduce, before: ,, after: using_list_
TARGET LIST: 
target index: 188  , change_value: %NULL%
target index: 194  , change_value: using_list_

using_list_  :  %MARK%  module_list_  using_list_@0_opt_2  
 index is: 188, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 189  , change_value: module_list_

module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 108  , change_value: ID

########
#TO SET#
########
index: 315, target_source: using_list_

index: 312, target_source: module_list_

index: 316, target_source: ID



###########
#315  TERM#
###########


##########
#FROM SET#
##########
using_list_@0_opt_2  :  ,  using_list_  %MARK%  
 index is: 194, term type: deduce, before: using_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
using_list_@0_opt_2  :  ,  using_list_  %MARK%  
 index is: 194, term type: deduce, before: using_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#316  TERM#
###########


##########
#FROM SET#
##########
module_list_  :  ID  %MARK%  module_list_@0_opt_2  
 index is: 108, term type: to_deduce, before: ID, after: module_list_@0_opt_2
TARGET LIST: 
target index: 109  , change_value: module_list_@0_opt_2
target index: 110  , change_value: %NULL%
target index: 111  , change_value: %NULL%

########
#SUBSET#
########
module_list_  :  ID  %MARK%  module_list_@0_opt_2  
 index is: 108, term type: to_deduce, before: ID, after: module_list_@0_opt_2
TARGET LIST: 
target index: 109  , change_value: module_list_@0_opt_2
target index: 110  , change_value: %NULL%
target index: 111  , change_value: %NULL%

module_list_@0_opt_2  :  %MARK%  
 index is: 110, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

module_list_@0_opt_2  :  %MARK%  .  module_list_@0_opt_2@0_decl_2  
 index is: 111, term type: shift, before: %NULL%, after: .
TARGET LIST: 
target index: 112  , change_value: .

########
#TO SET#
########
index: 317, target_source: module_list_@0_opt_2

index: 318, target_source: .



###########
#317  TERM#
###########


##########
#FROM SET#
##########
module_list_  :  ID  module_list_@0_opt_2  %MARK%  
 index is: 109, term type: deduce, before: module_list_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
module_list_  :  ID  module_list_@0_opt_2  %MARK%  
 index is: 109, term type: deduce, before: module_list_@0_opt_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#318  TERM#
###########


##########
#FROM SET#
##########
module_list_@0_opt_2  :  .  %MARK%  module_list_@0_opt_2@0_decl_2  
 index is: 112, term type: to_deduce, before: ., after: module_list_@0_opt_2@0_decl_2
TARGET LIST: 
target index: 113  , change_value: module_list_@0_opt_2@0_decl_2
target index: 114  , change_value: %NULL%
target index: 116  , change_value: %NULL%

########
#SUBSET#
########
module_list_@0_opt_2  :  .  %MARK%  module_list_@0_opt_2@0_decl_2  
 index is: 112, term type: to_deduce, before: ., after: module_list_@0_opt_2@0_decl_2
TARGET LIST: 
target index: 113  , change_value: module_list_@0_opt_2@0_decl_2
target index: 114  , change_value: %NULL%
target index: 116  , change_value: %NULL%

module_list_@0_opt_2@0_decl_2  :  %MARK%  module_list_  
 index is: 114, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 115  , change_value: module_list_

module_list_@0_opt_2@0_decl_2  :  %MARK%  *  
 index is: 116, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 117  , change_value: *

module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 108  , change_value: ID

########
#TO SET#
########
index: 319, target_source: module_list_@0_opt_2@0_decl_2

index: 320, target_source: module_list_

index: 321, target_source: *

index: 316, target_source: ID



###########
#319  TERM#
###########


##########
#FROM SET#
##########
module_list_@0_opt_2  :  .  module_list_@0_opt_2@0_decl_2  %MARK%  
 index is: 113, term type: deduce, before: module_list_@0_opt_2@0_decl_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
module_list_@0_opt_2  :  .  module_list_@0_opt_2@0_decl_2  %MARK%  
 index is: 113, term type: deduce, before: module_list_@0_opt_2@0_decl_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#320  TERM#
###########


##########
#FROM SET#
##########
module_list_@0_opt_2@0_decl_2  :  module_list_  %MARK%  
 index is: 115, term type: deduce, before: module_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
module_list_@0_opt_2@0_decl_2  :  module_list_  %MARK%  
 index is: 115, term type: deduce, before: module_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#321  TERM#
###########


##########
#FROM SET#
##########
module_list_@0_opt_2@0_decl_2  :  *  %MARK%  
 index is: 117, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
module_list_@0_opt_2@0_decl_2  :  *  %MARK%  
 index is: 117, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#322  TERM#
###########


##########
#FROM SET#
##########
namespace_stmt_  :  namespace  %MARK%  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 178, term type: shift, before: namespace, after: ID
TARGET LIST: 
target index: 179  , change_value: ID

########
#SUBSET#
########
namespace_stmt_  :  namespace  %MARK%  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 178, term type: shift, before: namespace, after: ID
TARGET LIST: 
target index: 179  , change_value: ID

########
#TO SET#
########
index: 323, target_source: ID



###########
#323  TERM#
###########


##########
#FROM SET#
##########
namespace_stmt_  :  namespace  ID  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 179, term type: shift, before: ID, after: ENDL
TARGET LIST: 
target index: 180  , change_value: ENDL

########
#SUBSET#
########
namespace_stmt_  :  namespace  ID  %MARK%  ENDL  decl_stmts_  end  ENDL  
 index is: 179, term type: shift, before: ID, after: ENDL
TARGET LIST: 
target index: 180  , change_value: ENDL

########
#TO SET#
########
index: 324, target_source: ENDL



###########
#324  TERM#
###########


##########
#FROM SET#
##########
namespace_stmt_  :  namespace  ID  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 180, term type: to_deduce, before: ENDL, after: decl_stmts_
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 181  , change_value: decl_stmts_

########
#SUBSET#
########
namespace_stmt_  :  namespace  ID  ENDL  %MARK%  decl_stmts_  end  ENDL  
 index is: 180, term type: to_deduce, before: ENDL, after: decl_stmts_
TARGET LIST: 
target index: 25  , change_value: %NULL%
target index: 181  , change_value: decl_stmts_

decl_stmts_  :  %MARK%  decl_stmts_@0_rep_1  
 index is: 25, term type: to_deduce, before: %NULL%, after: decl_stmts_@0_rep_1
TARGET LIST: 
target index: 26  , change_value: decl_stmts_@0_rep_1
target index: 27  , change_value: %NULL%
target index: 28  , change_value: %NULL%

decl_stmts_@0_rep_1  :  %MARK%  
 index is: 27, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1  :  %MARK%  declaration_  decl_stmts_@0_rep_1@0_rep_2  decl_stmts_@0_rep_1  
 index is: 28, term type: to_deduce, before: %NULL%, after: declaration_
TARGET LIST: 
target index: 29  , change_value: declaration_
target index: 84  , change_value: %NULL%
target index: 86  , change_value: %NULL%
target index: 88  , change_value: %NULL%
target index: 90  , change_value: %NULL%
target index: 92  , change_value: %NULL%
target index: 94  , change_value: %NULL%

declaration_  :  %MARK%  class_stmt_  
 index is: 84, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 85  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

declaration_  :  %MARK%  function_stmt_  
 index is: 86, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 87  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

declaration_  :  %MARK%  using_stmt_  
 index is: 88, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 89  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

declaration_  :  %MARK%  var_stmt_  
 index is: 90, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 91  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

declaration_  :  %MARK%  namespace_stmt_  
 index is: 92, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 93  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

declaration_  :  %MARK%  prep_stmt_  
 index is: 94, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 95  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

########
#TO SET#
########
index: 325, target_source: decl_stmts_

index: 38, target_source: decl_stmts_@0_rep_1

index: 39, target_source: declaration_

index: 42, target_source: class_stmt_

index: 43, target_source: function_stmt_

index: 44, target_source: using_stmt_

index: 45, target_source: var_stmt_

index: 46, target_source: namespace_stmt_

index: 47, target_source: prep_stmt_

index: 31, target_source: class_stmt_@0_decl_1

index: 48, target_source: function

index: 309, target_source: using

index: 328, target_source: var_stmt_@0_decl_1

index: 322, target_source: namespace

index: 331, target_source: PREP

index: 333, target_source: struct

index: 334, target_source: class

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var



###########
#325  TERM#
###########


##########
#FROM SET#
##########
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 181, term type: shift, before: decl_stmts_, after: end
TARGET LIST: 
target index: 182  , change_value: end

########
#SUBSET#
########
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  %MARK%  end  ENDL  
 index is: 181, term type: shift, before: decl_stmts_, after: end
TARGET LIST: 
target index: 182  , change_value: end

########
#TO SET#
########
index: 326, target_source: end



###########
#326  TERM#
###########


##########
#FROM SET#
##########
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 182, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 183  , change_value: ENDL

########
#SUBSET#
########
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  %MARK%  ENDL  
 index is: 182, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 183  , change_value: ENDL

########
#TO SET#
########
index: 327, target_source: ENDL



###########
#327  TERM#
###########


##########
#FROM SET#
##########
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 183, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
namespace_stmt_  :  namespace  ID  ENDL  decl_stmts_  end  ENDL  %MARK%  
 index is: 183, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#328  TERM#
###########


##########
#FROM SET#
##########
var_stmt_  :  var_stmt_@0_decl_1  %MARK%  var_def_  endline_  
 index is: 137, term type: to_deduce, before: var_stmt_@0_decl_1, after: var_def_
TARGET LIST: 
target index: 130  , change_value: %NULL%
target index: 132  , change_value: %NULL%
target index: 138  , change_value: var_def_

########
#SUBSET#
########
var_stmt_  :  var_stmt_@0_decl_1  %MARK%  var_def_  endline_  
 index is: 137, term type: to_deduce, before: var_stmt_@0_decl_1, after: var_def_
TARGET LIST: 
target index: 130  , change_value: %NULL%
target index: 132  , change_value: %NULL%
target index: 138  , change_value: var_def_

var_def_  :  %MARK%  var_list_  
 index is: 130, term type: to_deduce, before: %NULL%, after: var_list_
TARGET LIST: 
target index: 131  , change_value: var_list_
target index: 162  , change_value: %NULL%

var_def_  :  %MARK%  var_bind_  =  basic_expr_  
 index is: 132, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 133  , change_value: var_bind_
target index: 146  , change_value: %NULL%

var_list_  :  %MARK%  ID  =  single_expr_  var_list_@0_opt_4  
 index is: 162, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 163  , change_value: ID

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

########
#TO SET#
########
index: 329, target_source: var_def_

index: 249, target_source: var_list_

index: 250, target_source: var_bind_

index: 253, target_source: ID

index: 173, target_source: (



###########
#329  TERM#
###########


##########
#FROM SET#
##########
var_stmt_  :  var_stmt_@0_decl_1  var_def_  %MARK%  endline_  
 index is: 138, term type: to_deduce, before: var_def_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 139  , change_value: endline_

########
#SUBSET#
########
var_stmt_  :  var_stmt_@0_decl_1  var_def_  %MARK%  endline_  
 index is: 138, term type: to_deduce, before: var_def_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 139  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 330, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



###########
#330  TERM#
###########


##########
#FROM SET#
##########
var_stmt_  :  var_stmt_@0_decl_1  var_def_  endline_  %MARK%  
 index is: 139, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_stmt_  :  var_stmt_@0_decl_1  var_def_  endline_  %MARK%  
 index is: 139, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#331  TERM#
###########


##########
#FROM SET#
##########
prep_stmt_  :  PREP  %MARK%  ENDL  
 index is: 97, term type: shift, before: PREP, after: ENDL
TARGET LIST: 
target index: 98  , change_value: ENDL

########
#SUBSET#
########
prep_stmt_  :  PREP  %MARK%  ENDL  
 index is: 97, term type: shift, before: PREP, after: ENDL
TARGET LIST: 
target index: 98  , change_value: ENDL

########
#TO SET#
########
index: 332, target_source: ENDL



###########
#332  TERM#
###########


##########
#FROM SET#
##########
prep_stmt_  :  PREP  ENDL  %MARK%  
 index is: 98, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
prep_stmt_  :  PREP  ENDL  %MARK%  
 index is: 98, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#333  TERM#
###########


##########
#FROM SET#
##########
class_stmt_@0_decl_1  :  struct  %MARK%  
 index is: 387, term type: deduce, before: struct, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
class_stmt_@0_decl_1  :  struct  %MARK%  
 index is: 387, term type: deduce, before: struct, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#334  TERM#
###########


##########
#FROM SET#
##########
class_stmt_@0_decl_1  :  class  %MARK%  
 index is: 389, term type: deduce, before: class, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
class_stmt_@0_decl_1  :  class  %MARK%  
 index is: 389, term type: deduce, before: class, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#335  TERM#
###########


##########
#FROM SET#
##########
var_stmt_@0_decl_1  :  constant  %MARK%  
 index is: 141, term type: deduce, before: constant, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_stmt_@0_decl_1  :  constant  %MARK%  
 index is: 141, term type: deduce, before: constant, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#336  TERM#
###########


##########
#FROM SET#
##########
var_stmt_@0_decl_1  :  link  %MARK%  
 index is: 143, term type: deduce, before: link, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_stmt_@0_decl_1  :  link  %MARK%  
 index is: 143, term type: deduce, before: link, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#337  TERM#
###########


##########
#FROM SET#
##########
var_stmt_@0_decl_1  :  var  %MARK%  
 index is: 145, term type: deduce, before: var, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
var_stmt_@0_decl_1  :  var  %MARK%  
 index is: 145, term type: deduce, before: var, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#338  TERM#
###########


##########
#FROM SET#
##########
block_stmt_  :  block  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 172, term type: shift, before: block, after: ENDL
TARGET LIST: 
target index: 173  , change_value: ENDL

########
#SUBSET#
########
block_stmt_  :  block  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 172, term type: shift, before: block, after: ENDL
TARGET LIST: 
target index: 173  , change_value: ENDL

########
#TO SET#
########
index: 339, target_source: ENDL



###########
#339  TERM#
###########


##########
#FROM SET#
##########
block_stmt_  :  block  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 173, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 174  , change_value: stmts_

########
#SUBSET#
########
block_stmt_  :  block  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 173, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 174  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 340, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#340  TERM#
###########


##########
#FROM SET#
##########
block_stmt_  :  block  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 174, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 175  , change_value: end

########
#SUBSET#
########
block_stmt_  :  block  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 174, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 175  , change_value: end

########
#TO SET#
########
index: 341, target_source: end



###########
#341  TERM#
###########


##########
#FROM SET#
##########
block_stmt_  :  block  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 175, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 176  , change_value: ENDL

########
#SUBSET#
########
block_stmt_  :  block  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 175, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 176  , change_value: ENDL

########
#TO SET#
########
index: 342, target_source: ENDL



###########
#342  TERM#
###########


##########
#FROM SET#
##########
block_stmt_  :  block  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 176, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
block_stmt_  :  block  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 176, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#343  TERM#
###########


##########
#FROM SET#
##########
import_stmt_  :  import  %MARK%  import_list_  endline_  
 index is: 104, term type: to_deduce, before: import, after: import_list_
TARGET LIST: 
target index: 105  , change_value: import_list_
target index: 118  , change_value: %NULL%

########
#SUBSET#
########
import_stmt_  :  import  %MARK%  import_list_  endline_  
 index is: 104, term type: to_deduce, before: import, after: import_list_
TARGET LIST: 
target index: 105  , change_value: import_list_
target index: 118  , change_value: %NULL%

import_list_  :  %MARK%  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 118, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 119  , change_value: module_list_

module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 108  , change_value: ID

########
#TO SET#
########
index: 344, target_source: import_list_

index: 346, target_source: module_list_

index: 316, target_source: ID



###########
#344  TERM#
###########


##########
#FROM SET#
##########
import_stmt_  :  import  import_list_  %MARK%  endline_  
 index is: 105, term type: to_deduce, before: import_list_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 106  , change_value: endline_

########
#SUBSET#
########
import_stmt_  :  import  import_list_  %MARK%  endline_  
 index is: 105, term type: to_deduce, before: import_list_, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 106  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 345, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



###########
#345  TERM#
###########


##########
#FROM SET#
##########
import_stmt_  :  import  import_list_  endline_  %MARK%  
 index is: 106, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
import_stmt_  :  import  import_list_  endline_  %MARK%  
 index is: 106, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#346  TERM#
###########


##########
#FROM SET#
##########
import_list_  :  module_list_  %MARK%  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 119, term type: to_deduce, before: module_list_, after: import_list_@0_opt_2
TARGET LIST: 
target index: 120  , change_value: import_list_@0_opt_2
target index: 126  , change_value: %NULL%
target index: 127  , change_value: %NULL%

########
#SUBSET#
########
import_list_  :  module_list_  %MARK%  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 119, term type: to_deduce, before: module_list_, after: import_list_@0_opt_2
TARGET LIST: 
target index: 120  , change_value: import_list_@0_opt_2
target index: 126  , change_value: %NULL%
target index: 127  , change_value: %NULL%

import_list_@0_opt_2  :  %MARK%  
 index is: 126, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

import_list_@0_opt_2  :  %MARK%  as  ID  
 index is: 127, term type: shift, before: %NULL%, after: as
TARGET LIST: 
target index: 128  , change_value: as

########
#TO SET#
########
index: 347, target_source: import_list_@0_opt_2

index: 351, target_source: as



###########
#347  TERM#
###########


##########
#FROM SET#
##########
import_list_  :  module_list_  import_list_@0_opt_2  %MARK%  import_list_@0_opt_3  
 index is: 120, term type: to_deduce, before: import_list_@0_opt_2, after: import_list_@0_opt_3
TARGET LIST: 
target index: 121  , change_value: import_list_@0_opt_3
target index: 122  , change_value: %NULL%
target index: 123  , change_value: %NULL%

########
#SUBSET#
########
import_list_  :  module_list_  import_list_@0_opt_2  %MARK%  import_list_@0_opt_3  
 index is: 120, term type: to_deduce, before: import_list_@0_opt_2, after: import_list_@0_opt_3
TARGET LIST: 
target index: 121  , change_value: import_list_@0_opt_3
target index: 122  , change_value: %NULL%
target index: 123  , change_value: %NULL%

import_list_@0_opt_3  :  %MARK%  
 index is: 122, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

import_list_@0_opt_3  :  %MARK%  ,  import_list_  
 index is: 123, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 124  , change_value: ,

########
#TO SET#
########
index: 348, target_source: import_list_@0_opt_3

index: 349, target_source: ,



###########
#348  TERM#
###########


##########
#FROM SET#
##########
import_list_  :  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  %MARK%  
 index is: 121, term type: deduce, before: import_list_@0_opt_3, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
import_list_  :  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  %MARK%  
 index is: 121, term type: deduce, before: import_list_@0_opt_3, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#349  TERM#
###########


##########
#FROM SET#
##########
import_list_@0_opt_3  :  ,  %MARK%  import_list_  
 index is: 124, term type: to_deduce, before: ,, after: import_list_
TARGET LIST: 
target index: 118  , change_value: %NULL%
target index: 125  , change_value: import_list_

########
#SUBSET#
########
import_list_@0_opt_3  :  ,  %MARK%  import_list_  
 index is: 124, term type: to_deduce, before: ,, after: import_list_
TARGET LIST: 
target index: 118  , change_value: %NULL%
target index: 125  , change_value: import_list_

import_list_  :  %MARK%  module_list_  import_list_@0_opt_2  import_list_@0_opt_3  
 index is: 118, term type: to_deduce, before: %NULL%, after: module_list_
TARGET LIST: 
target index: 107  , change_value: %NULL%
target index: 119  , change_value: module_list_

module_list_  :  %MARK%  ID  module_list_@0_opt_2  
 index is: 107, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 108  , change_value: ID

########
#TO SET#
########
index: 350, target_source: import_list_

index: 346, target_source: module_list_

index: 316, target_source: ID



###########
#350  TERM#
###########


##########
#FROM SET#
##########
import_list_@0_opt_3  :  ,  import_list_  %MARK%  
 index is: 125, term type: deduce, before: import_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
import_list_@0_opt_3  :  ,  import_list_  %MARK%  
 index is: 125, term type: deduce, before: import_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#351  TERM#
###########


##########
#FROM SET#
##########
import_list_@0_opt_2  :  as  %MARK%  ID  
 index is: 128, term type: shift, before: as, after: ID
TARGET LIST: 
target index: 129  , change_value: ID

########
#SUBSET#
########
import_list_@0_opt_2  :  as  %MARK%  ID  
 index is: 128, term type: shift, before: as, after: ID
TARGET LIST: 
target index: 129  , change_value: ID

########
#TO SET#
########
index: 352, target_source: ID



###########
#352  TERM#
###########


##########
#FROM SET#
##########
import_list_@0_opt_2  :  as  ID  %MARK%  
 index is: 129, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
import_list_@0_opt_2  :  as  ID  %MARK%  
 index is: 129, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#353  TERM#
###########


##########
#FROM SET#
##########
package_stmt_  :  package  %MARK%  ID  endline_  
 index is: 100, term type: shift, before: package, after: ID
TARGET LIST: 
target index: 101  , change_value: ID

########
#SUBSET#
########
package_stmt_  :  package  %MARK%  ID  endline_  
 index is: 100, term type: shift, before: package, after: ID
TARGET LIST: 
target index: 101  , change_value: ID

########
#TO SET#
########
index: 354, target_source: ID



###########
#354  TERM#
###########


##########
#FROM SET#
##########
package_stmt_  :  package  ID  %MARK%  endline_  
 index is: 101, term type: to_deduce, before: ID, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 102  , change_value: endline_

########
#SUBSET#
########
package_stmt_  :  package  ID  %MARK%  endline_  
 index is: 101, term type: to_deduce, before: ID, after: endline_
TARGET LIST: 
target index: 10  , change_value: %NULL%
target index: 12  , change_value: %NULL%
target index: 102  , change_value: endline_

endline_  :  %MARK%  ;  
 index is: 10, term type: shift, before: %NULL%, after: ;
TARGET LIST: 
target index: 11  , change_value: ;

endline_  :  %MARK%  ENDL  
 index is: 12, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 13  , change_value: ENDL

########
#TO SET#
########
index: 355, target_source: endline_

index: 29, target_source: ;

index: 30, target_source: ENDL



###########
#355  TERM#
###########


##########
#FROM SET#
##########
package_stmt_  :  package  ID  endline_  %MARK%  
 index is: 102, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
package_stmt_  :  package  ID  endline_  %MARK%  
 index is: 102, term type: deduce, before: endline_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#356  TERM#
###########


##########
#FROM SET#
##########
control_stmt_@0_decl_1  :  continue  %MARK%  
 index is: 394, term type: deduce, before: continue, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
control_stmt_@0_decl_1  :  continue  %MARK%  
 index is: 394, term type: deduce, before: continue, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#357  TERM#
###########


##########
#FROM SET#
##########
control_stmt_@0_decl_1  :  break  %MARK%  
 index is: 396, term type: deduce, before: break, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
control_stmt_@0_decl_1  :  break  %MARK%  
 index is: 396, term type: deduce, before: break, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#358  TERM#
###########


##########
#FROM SET#
##########
switch_case_  :  case  %MARK%  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 238, term type: to_deduce, before: case, after: logic_or_expr_
TARGET LIST: 
target index: 239  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

########
#SUBSET#
########
switch_case_  :  case  %MARK%  logic_or_expr_  ENDL  stmts_  end  ENDL  
 index is: 238, term type: to_deduce, before: case, after: logic_or_expr_
TARGET LIST: 
target index: 239  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 359, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#359  TERM#
###########


##########
#FROM SET#
##########
switch_case_  :  case  logic_or_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 239, term type: shift, before: logic_or_expr_, after: ENDL
TARGET LIST: 
target index: 240  , change_value: ENDL

########
#SUBSET#
########
switch_case_  :  case  logic_or_expr_  %MARK%  ENDL  stmts_  end  ENDL  
 index is: 239, term type: shift, before: logic_or_expr_, after: ENDL
TARGET LIST: 
target index: 240  , change_value: ENDL

########
#TO SET#
########
index: 360, target_source: ENDL



###########
#360  TERM#
###########


##########
#FROM SET#
##########
switch_case_  :  case  logic_or_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 240, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 241  , change_value: stmts_

########
#SUBSET#
########
switch_case_  :  case  logic_or_expr_  ENDL  %MARK%  stmts_  end  ENDL  
 index is: 240, term type: to_deduce, before: ENDL, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 241  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 361, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#361  TERM#
###########


##########
#FROM SET#
##########
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 241, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 242  , change_value: end

########
#SUBSET#
########
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  %MARK%  end  ENDL  
 index is: 241, term type: shift, before: stmts_, after: end
TARGET LIST: 
target index: 242  , change_value: end

########
#TO SET#
########
index: 362, target_source: end



###########
#362  TERM#
###########


##########
#FROM SET#
##########
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 242, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 243  , change_value: ENDL

########
#SUBSET#
########
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  %MARK%  ENDL  
 index is: 242, term type: shift, before: end, after: ENDL
TARGET LIST: 
target index: 243  , change_value: ENDL

########
#TO SET#
########
index: 363, target_source: ENDL



###########
#363  TERM#
###########


##########
#FROM SET#
##########
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 243, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
switch_case_  :  case  logic_or_expr_  ENDL  stmts_  end  ENDL  %MARK%  
 index is: 243, term type: deduce, before: ENDL, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#364  TERM#
###########


##########
#FROM SET#
##########
lambda_body_@0_rep_2@0_rep_2  :  ENDL  %MARK%  lambda_body_@0_rep_2@0_rep_2  
 index is: 501, term type: to_deduce, before: ENDL, after: lambda_body_@0_rep_2@0_rep_2
TARGET LIST: 
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%
target index: 502  , change_value: lambda_body_@0_rep_2@0_rep_2

########
#SUBSET#
########
lambda_body_@0_rep_2@0_rep_2  :  ENDL  %MARK%  lambda_body_@0_rep_2@0_rep_2  
 index is: 501, term type: to_deduce, before: ENDL, after: lambda_body_@0_rep_2@0_rep_2
TARGET LIST: 
target index: 499  , change_value: %NULL%
target index: 500  , change_value: %NULL%
target index: 502  , change_value: lambda_body_@0_rep_2@0_rep_2

lambda_body_@0_rep_2@0_rep_2  :  %MARK%  
 index is: 499, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

lambda_body_@0_rep_2@0_rep_2  :  %MARK%  ENDL  lambda_body_@0_rep_2@0_rep_2  
 index is: 500, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 501  , change_value: ENDL

########
#TO SET#
########
index: 365, target_source: lambda_body_@0_rep_2@0_rep_2

index: 364, target_source: ENDL



###########
#365  TERM#
###########


##########
#FROM SET#
##########
lambda_body_@0_rep_2@0_rep_2  :  ENDL  lambda_body_@0_rep_2@0_rep_2  %MARK%  
 index is: 502, term type: deduce, before: lambda_body_@0_rep_2@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_body_@0_rep_2@0_rep_2  :  ENDL  lambda_body_@0_rep_2@0_rep_2  %MARK%  
 index is: 502, term type: deduce, before: lambda_body_@0_rep_2@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#366  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_@0_opt_5  :  argument_list_  %MARK%  
 index is: 451, term type: deduce, before: argument_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_expr_@0_opt_5  :  argument_list_  %MARK%  
 index is: 451, term type: deduce, before: argument_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#367  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  argument_list_@1_opt_1  %MARK%  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 468, term type: shift, before: argument_list_@1_opt_1, after: ID
TARGET LIST: 
target index: 469  , change_value: ID

########
#SUBSET#
########
argument_list_  :  argument_list_@1_opt_1  %MARK%  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 468, term type: shift, before: argument_list_@1_opt_1, after: ID
TARGET LIST: 
target index: 469  , change_value: ID

########
#TO SET#
########
index: 368, target_source: ID



###########
#368  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  argument_list_@1_opt_1  ID  %MARK%  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 469, term type: to_deduce, before: ID, after: argument_list_@1_opt_3
TARGET LIST: 
target index: 470  , change_value: argument_list_@1_opt_3
target index: 481  , change_value: %NULL%
target index: 482  , change_value: %NULL%

########
#SUBSET#
########
argument_list_  :  argument_list_@1_opt_1  ID  %MARK%  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 469, term type: to_deduce, before: ID, after: argument_list_@1_opt_3
TARGET LIST: 
target index: 470  , change_value: argument_list_@1_opt_3
target index: 481  , change_value: %NULL%
target index: 482  , change_value: %NULL%

argument_list_@1_opt_3  :  %MARK%  
 index is: 481, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_3  :  %MARK%  :  
 index is: 482, term type: shift, before: %NULL%, after: :
TARGET LIST: 
target index: 483  , change_value: :

########
#TO SET#
########
index: 369, target_source: argument_list_@1_opt_3

index: 378, target_source: :



###########
#369  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  %MARK%  visit_expr_  argument_list_@1_rep_5  
 index is: 470, term type: to_deduce, before: argument_list_@1_opt_3, after: visit_expr_
TARGET LIST: 
target index: 471  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

########
#SUBSET#
########
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  %MARK%  visit_expr_  argument_list_@1_rep_5  
 index is: 470, term type: to_deduce, before: argument_list_@1_opt_3, after: visit_expr_
TARGET LIST: 
target index: 471  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 370, target_source: visit_expr_

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#370  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  %MARK%  argument_list_@1_rep_5  
 index is: 471, term type: to_deduce, before: visit_expr_, after: argument_list_@1_rep_5
TARGET LIST: 
target index: 472  , change_value: argument_list_@1_rep_5
target index: 476  , change_value: %NULL%
target index: 477  , change_value: %NULL%

########
#SUBSET#
########
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  %MARK%  argument_list_@1_rep_5  
 index is: 471, term type: to_deduce, before: visit_expr_, after: argument_list_@1_rep_5
TARGET LIST: 
target index: 472  , change_value: argument_list_@1_rep_5
target index: 476  , change_value: %NULL%
target index: 477  , change_value: %NULL%

argument_list_@1_rep_5  :  %MARK%  
 index is: 476, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_rep_5  :  %MARK%  ,  argument_list_  argument_list_@1_rep_5  
 index is: 477, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 478  , change_value: ,

########
#TO SET#
########
index: 371, target_source: argument_list_@1_rep_5

index: 372, target_source: ,



###########
#371  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  %MARK%  
 index is: 472, term type: deduce, before: argument_list_@1_rep_5, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
argument_list_  :  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  %MARK%  
 index is: 472, term type: deduce, before: argument_list_@1_rep_5, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#372  TERM#
###########


##########
#FROM SET#
##########
argument_list_@1_rep_5  :  ,  %MARK%  argument_list_  argument_list_@1_rep_5  
 index is: 478, term type: to_deduce, before: ,, after: argument_list_
TARGET LIST: 
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%
target index: 479  , change_value: argument_list_

########
#SUBSET#
########
argument_list_@1_rep_5  :  ,  %MARK%  argument_list_  argument_list_@1_rep_5  
 index is: 478, term type: to_deduce, before: ,, after: argument_list_
TARGET LIST: 
target index: 467  , change_value: %NULL%
target index: 473  , change_value: %NULL%
target index: 479  , change_value: argument_list_

argument_list_  :  %MARK%  argument_list_@1_opt_1  ID  argument_list_@1_opt_3  visit_expr_  argument_list_@1_rep_5  
 index is: 467, term type: to_deduce, before: %NULL%, after: argument_list_@1_opt_1
TARGET LIST: 
target index: 468  , change_value: argument_list_@1_opt_1
target index: 484  , change_value: %NULL%
target index: 485  , change_value: %NULL%

argument_list_  :  %MARK%  ...  ID  
 index is: 473, term type: shift, before: %NULL%, after: ...
TARGET LIST: 
target index: 474  , change_value: ...

argument_list_@1_opt_1  :  %MARK%  
 index is: 484, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_opt_1  :  %MARK%  =  
 index is: 485, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 486  , change_value: =

########
#TO SET#
########
index: 373, target_source: argument_list_

index: 367, target_source: argument_list_@1_opt_1

index: 375, target_source: ...

index: 377, target_source: =



###########
#373  TERM#
###########


##########
#FROM SET#
##########
argument_list_@1_rep_5  :  ,  argument_list_  %MARK%  argument_list_@1_rep_5  
 index is: 479, term type: to_deduce, before: argument_list_, after: argument_list_@1_rep_5
TARGET LIST: 
target index: 476  , change_value: %NULL%
target index: 477  , change_value: %NULL%
target index: 480  , change_value: argument_list_@1_rep_5

########
#SUBSET#
########
argument_list_@1_rep_5  :  ,  argument_list_  %MARK%  argument_list_@1_rep_5  
 index is: 479, term type: to_deduce, before: argument_list_, after: argument_list_@1_rep_5
TARGET LIST: 
target index: 476  , change_value: %NULL%
target index: 477  , change_value: %NULL%
target index: 480  , change_value: argument_list_@1_rep_5

argument_list_@1_rep_5  :  %MARK%  
 index is: 476, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

argument_list_@1_rep_5  :  %MARK%  ,  argument_list_  argument_list_@1_rep_5  
 index is: 477, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 478  , change_value: ,

########
#TO SET#
########
index: 374, target_source: argument_list_@1_rep_5

index: 372, target_source: ,



###########
#374  TERM#
###########


##########
#FROM SET#
##########
argument_list_@1_rep_5  :  ,  argument_list_  argument_list_@1_rep_5  %MARK%  
 index is: 480, term type: deduce, before: argument_list_@1_rep_5, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
argument_list_@1_rep_5  :  ,  argument_list_  argument_list_@1_rep_5  %MARK%  
 index is: 480, term type: deduce, before: argument_list_@1_rep_5, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#375  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  ...  %MARK%  ID  
 index is: 474, term type: shift, before: ..., after: ID
TARGET LIST: 
target index: 475  , change_value: ID

########
#SUBSET#
########
argument_list_  :  ...  %MARK%  ID  
 index is: 474, term type: shift, before: ..., after: ID
TARGET LIST: 
target index: 475  , change_value: ID

########
#TO SET#
########
index: 376, target_source: ID



###########
#376  TERM#
###########


##########
#FROM SET#
##########
argument_list_  :  ...  ID  %MARK%  
 index is: 475, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
argument_list_  :  ...  ID  %MARK%  
 index is: 475, term type: deduce, before: ID, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#377  TERM#
###########


##########
#FROM SET#
##########
argument_list_@1_opt_1  :  =  %MARK%  
 index is: 486, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
argument_list_@1_opt_1  :  =  %MARK%  
 index is: 486, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#378  TERM#
###########


##########
#FROM SET#
##########
argument_list_@1_opt_3  :  :  %MARK%  
 index is: 483, term type: deduce, before: :, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
argument_list_@1_opt_3  :  :  %MARK%  
 index is: 483, term type: deduce, before: :, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#379  TERM#
###########


##########
#FROM SET#
##########
lambda_expr_@0_opt_2  :  capture_list_  %MARK%  
 index is: 454, term type: deduce, before: capture_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
lambda_expr_@0_opt_2  :  capture_list_  %MARK%  
 index is: 454, term type: deduce, before: capture_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#380  TERM#
###########


##########
#FROM SET#
##########
capture_list_  :  capture_list_@0_opt_1  %MARK%  ID  capture_list_@0_rep_3  
 index is: 456, term type: shift, before: capture_list_@0_opt_1, after: ID
TARGET LIST: 
target index: 457  , change_value: ID

########
#SUBSET#
########
capture_list_  :  capture_list_@0_opt_1  %MARK%  ID  capture_list_@0_rep_3  
 index is: 456, term type: shift, before: capture_list_@0_opt_1, after: ID
TARGET LIST: 
target index: 457  , change_value: ID

########
#TO SET#
########
index: 381, target_source: ID



###########
#381  TERM#
###########


##########
#FROM SET#
##########
capture_list_  :  capture_list_@0_opt_1  ID  %MARK%  capture_list_@0_rep_3  
 index is: 457, term type: to_deduce, before: ID, after: capture_list_@0_rep_3
TARGET LIST: 
target index: 458  , change_value: capture_list_@0_rep_3
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%

########
#SUBSET#
########
capture_list_  :  capture_list_@0_opt_1  ID  %MARK%  capture_list_@0_rep_3  
 index is: 457, term type: to_deduce, before: ID, after: capture_list_@0_rep_3
TARGET LIST: 
target index: 458  , change_value: capture_list_@0_rep_3
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%

capture_list_@0_rep_3  :  %MARK%  
 index is: 459, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_@0_rep_3  :  %MARK%  ,  capture_list_  capture_list_@0_rep_3  
 index is: 460, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 461  , change_value: ,

########
#TO SET#
########
index: 382, target_source: capture_list_@0_rep_3

index: 383, target_source: ,



###########
#382  TERM#
###########


##########
#FROM SET#
##########
capture_list_  :  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  %MARK%  
 index is: 458, term type: deduce, before: capture_list_@0_rep_3, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
capture_list_  :  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  %MARK%  
 index is: 458, term type: deduce, before: capture_list_@0_rep_3, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#383  TERM#
###########


##########
#FROM SET#
##########
capture_list_@0_rep_3  :  ,  %MARK%  capture_list_  capture_list_@0_rep_3  
 index is: 461, term type: to_deduce, before: ,, after: capture_list_
TARGET LIST: 
target index: 455  , change_value: %NULL%
target index: 462  , change_value: capture_list_

########
#SUBSET#
########
capture_list_@0_rep_3  :  ,  %MARK%  capture_list_  capture_list_@0_rep_3  
 index is: 461, term type: to_deduce, before: ,, after: capture_list_
TARGET LIST: 
target index: 455  , change_value: %NULL%
target index: 462  , change_value: capture_list_

capture_list_  :  %MARK%  capture_list_@0_opt_1  ID  capture_list_@0_rep_3  
 index is: 455, term type: to_deduce, before: %NULL%, after: capture_list_@0_opt_1
TARGET LIST: 
target index: 456  , change_value: capture_list_@0_opt_1
target index: 464  , change_value: %NULL%
target index: 465  , change_value: %NULL%

capture_list_@0_opt_1  :  %MARK%  
 index is: 464, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_@0_opt_1  :  %MARK%  =  
 index is: 465, term type: shift, before: %NULL%, after: =
TARGET LIST: 
target index: 466  , change_value: =

########
#TO SET#
########
index: 384, target_source: capture_list_

index: 380, target_source: capture_list_@0_opt_1

index: 386, target_source: =



###########
#384  TERM#
###########


##########
#FROM SET#
##########
capture_list_@0_rep_3  :  ,  capture_list_  %MARK%  capture_list_@0_rep_3  
 index is: 462, term type: to_deduce, before: capture_list_, after: capture_list_@0_rep_3
TARGET LIST: 
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%
target index: 463  , change_value: capture_list_@0_rep_3

########
#SUBSET#
########
capture_list_@0_rep_3  :  ,  capture_list_  %MARK%  capture_list_@0_rep_3  
 index is: 462, term type: to_deduce, before: capture_list_, after: capture_list_@0_rep_3
TARGET LIST: 
target index: 459  , change_value: %NULL%
target index: 460  , change_value: %NULL%
target index: 463  , change_value: capture_list_@0_rep_3

capture_list_@0_rep_3  :  %MARK%  
 index is: 459, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

capture_list_@0_rep_3  :  %MARK%  ,  capture_list_  capture_list_@0_rep_3  
 index is: 460, term type: shift, before: %NULL%, after: ,
TARGET LIST: 
target index: 461  , change_value: ,

########
#TO SET#
########
index: 385, target_source: capture_list_@0_rep_3

index: 383, target_source: ,



###########
#385  TERM#
###########


##########
#FROM SET#
##########
capture_list_@0_rep_3  :  ,  capture_list_  capture_list_@0_rep_3  %MARK%  
 index is: 463, term type: deduce, before: capture_list_@0_rep_3, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
capture_list_@0_rep_3  :  ,  capture_list_  capture_list_@0_rep_3  %MARK%  
 index is: 463, term type: deduce, before: capture_list_@0_rep_3, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#386  TERM#
###########


##########
#FROM SET#
##########
capture_list_@0_opt_1  :  =  %MARK%  
 index is: 466, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
capture_list_@0_opt_1  :  =  %MARK%  
 index is: 466, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#387  TERM#
###########


##########
#FROM SET#
##########
mul_expr_@0_opt_2@0_decl_1  :  ^  %MARK%  
 index is: 584, term type: deduce, before: ^, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
mul_expr_@0_opt_2@0_decl_1  :  ^  %MARK%  
 index is: 584, term type: deduce, before: ^, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#388  TERM#
###########


##########
#FROM SET#
##########
mul_expr_@0_opt_2@0_decl_1  :  %  %MARK%  
 index is: 586, term type: deduce, before: %, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
mul_expr_@0_opt_2@0_decl_1  :  %  %MARK%  
 index is: 586, term type: deduce, before: %, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#389  TERM#
###########


##########
#FROM SET#
##########
mul_expr_@0_opt_2@0_decl_1  :  /  %MARK%  
 index is: 588, term type: deduce, before: /, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
mul_expr_@0_opt_2@0_decl_1  :  /  %MARK%  
 index is: 588, term type: deduce, before: /, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#390  TERM#
###########


##########
#FROM SET#
##########
mul_expr_@0_opt_2@0_decl_1  :  *  %MARK%  
 index is: 590, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
mul_expr_@0_opt_2@0_decl_1  :  *  %MARK%  
 index is: 590, term type: deduce, before: *, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#391  TERM#
###########


##########
#FROM SET#
##########
add_expr_@0_opt_2@0_decl_1  :  -  %MARK%  
 index is: 573, term type: deduce, before: -, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
add_expr_@0_opt_2@0_decl_1  :  -  %MARK%  
 index is: 573, term type: deduce, before: -, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#392  TERM#
###########


##########
#FROM SET#
##########
add_expr_@0_opt_2@0_decl_1  :  +  %MARK%  
 index is: 575, term type: deduce, before: +, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
add_expr_@0_opt_2@0_decl_1  :  +  %MARK%  
 index is: 575, term type: deduce, before: +, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#393  TERM#
###########


##########
#FROM SET#
##########
relat_expr_@0_opt_2@0_decl_1  :  <=  %MARK%  
 index is: 558, term type: deduce, before: <=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
relat_expr_@0_opt_2@0_decl_1  :  <=  %MARK%  
 index is: 558, term type: deduce, before: <=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#394  TERM#
###########


##########
#FROM SET#
##########
relat_expr_@0_opt_2@0_decl_1  :  >=  %MARK%  
 index is: 560, term type: deduce, before: >=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
relat_expr_@0_opt_2@0_decl_1  :  >=  %MARK%  
 index is: 560, term type: deduce, before: >=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#395  TERM#
###########


##########
#FROM SET#
##########
relat_expr_@0_opt_2@0_decl_1  :  <  %MARK%  
 index is: 562, term type: deduce, before: <, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
relat_expr_@0_opt_2@0_decl_1  :  <  %MARK%  
 index is: 562, term type: deduce, before: <, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#396  TERM#
###########


##########
#FROM SET#
##########
relat_expr_@0_opt_2@0_decl_1  :  >  %MARK%  
 index is: 564, term type: deduce, before: >, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
relat_expr_@0_opt_2@0_decl_1  :  >  %MARK%  
 index is: 564, term type: deduce, before: >, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#397  TERM#
###########


##########
#FROM SET#
##########
equal_expr_@0_opt_2@0_decl_1  :  !=  %MARK%  
 index is: 547, term type: deduce, before: !=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
equal_expr_@0_opt_2@0_decl_1  :  !=  %MARK%  
 index is: 547, term type: deduce, before: !=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#398  TERM#
###########


##########
#FROM SET#
##########
equal_expr_@0_opt_2@0_decl_1  :  ==  %MARK%  
 index is: 549, term type: deduce, before: ==, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
equal_expr_@0_opt_2@0_decl_1  :  ==  %MARK%  
 index is: 549, term type: deduce, before: ==, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#399  TERM#
###########


##########
#FROM SET#
##########
logic_and_expr_@0_opt_2@0_decl_1  :  and  %MARK%  
 index is: 536, term type: deduce, before: and, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_and_expr_@0_opt_2@0_decl_1  :  and  %MARK%  
 index is: 536, term type: deduce, before: and, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#400  TERM#
###########


##########
#FROM SET#
##########
logic_and_expr_@0_opt_2@0_decl_1  :  &&  %MARK%  
 index is: 538, term type: deduce, before: &&, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_and_expr_@0_opt_2@0_decl_1  :  &&  %MARK%  
 index is: 538, term type: deduce, before: &&, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#401  TERM#
###########


##########
#FROM SET#
##########
logic_or_expr_@0_opt_2@0_decl_1  :  or  %MARK%  
 index is: 525, term type: deduce, before: or, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_or_expr_@0_opt_2@0_decl_1  :  or  %MARK%  
 index is: 525, term type: deduce, before: or, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#402  TERM#
###########


##########
#FROM SET#
##########
logic_or_expr_@0_opt_2@0_decl_1  :  ||  %MARK%  
 index is: 527, term type: deduce, before: ||, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
logic_or_expr_@0_opt_2@0_decl_1  :  ||  %MARK%  
 index is: 527, term type: deduce, before: ||, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#403  TERM#
###########


##########
#FROM SET#
##########
cond_postfix_  :  ?  %MARK%  logic_or_expr_  :  cond_expr_  
 index is: 513, term type: to_deduce, before: ?, after: logic_or_expr_
TARGET LIST: 
target index: 514  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

########
#SUBSET#
########
cond_postfix_  :  ?  %MARK%  logic_or_expr_  :  cond_expr_  
 index is: 513, term type: to_deduce, before: ?, after: logic_or_expr_
TARGET LIST: 
target index: 514  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 404, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#404  TERM#
###########


##########
#FROM SET#
##########
cond_postfix_  :  ?  logic_or_expr_  %MARK%  :  cond_expr_  
 index is: 514, term type: shift, before: logic_or_expr_, after: :
TARGET LIST: 
target index: 515  , change_value: :

########
#SUBSET#
########
cond_postfix_  :  ?  logic_or_expr_  %MARK%  :  cond_expr_  
 index is: 514, term type: shift, before: logic_or_expr_, after: :
TARGET LIST: 
target index: 515  , change_value: :

########
#TO SET#
########
index: 405, target_source: :



###########
#405  TERM#
###########


##########
#FROM SET#
##########
cond_postfix_  :  ?  logic_or_expr_  :  %MARK%  cond_expr_  
 index is: 515, term type: to_deduce, before: :, after: cond_expr_
TARGET LIST: 
target index: 503  , change_value: %NULL%
target index: 516  , change_value: cond_expr_

########
#SUBSET#
########
cond_postfix_  :  ?  logic_or_expr_  :  %MARK%  cond_expr_  
 index is: 515, term type: to_deduce, before: :, after: cond_expr_
TARGET LIST: 
target index: 503  , change_value: %NULL%
target index: 516  , change_value: cond_expr_

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 406, target_source: cond_expr_

index: 77, target_source: logic_or_expr_

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#406  TERM#
###########


##########
#FROM SET#
##########
cond_postfix_  :  ?  logic_or_expr_  :  cond_expr_  %MARK%  
 index is: 516, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
cond_postfix_  :  ?  logic_or_expr_  :  cond_expr_  %MARK%  
 index is: 516, term type: deduce, before: cond_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#407  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  ^=  %MARK%  
 index is: 426, term type: deduce, before: ^=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  ^=  %MARK%  
 index is: 426, term type: deduce, before: ^=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#408  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  %=  %MARK%  
 index is: 428, term type: deduce, before: %=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  %=  %MARK%  
 index is: 428, term type: deduce, before: %=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#409  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  /=  %MARK%  
 index is: 430, term type: deduce, before: /=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  /=  %MARK%  
 index is: 430, term type: deduce, before: /=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#410  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  *=  %MARK%  
 index is: 432, term type: deduce, before: *=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  *=  %MARK%  
 index is: 432, term type: deduce, before: *=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#411  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  -=  %MARK%  
 index is: 434, term type: deduce, before: -=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  -=  %MARK%  
 index is: 434, term type: deduce, before: -=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#412  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  +=  %MARK%  
 index is: 436, term type: deduce, before: +=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  +=  %MARK%  
 index is: 436, term type: deduce, before: +=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#413  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  :=  %MARK%  
 index is: 438, term type: deduce, before: :=, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  :=  %MARK%  
 index is: 438, term type: deduce, before: :=, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#414  TERM#
###########


##########
#FROM SET#
##########
asi_op_  :  =  %MARK%  
 index is: 440, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
asi_op_  :  =  %MARK%  
 index is: 440, term type: deduce, before: =, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#415  TERM#
###########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  {  %MARK%  stmts_  }  
 index is: 336, term type: to_deduce, before: {, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 337  , change_value: stmts_

########
#SUBSET#
########
function_body_@0_decl_1  :  {  %MARK%  stmts_  }  
 index is: 336, term type: to_deduce, before: {, after: stmts_
TARGET LIST: 
target index: 14  , change_value: %NULL%
target index: 337  , change_value: stmts_

stmts_  :  %MARK%  stmts_@0_rep_1  
 index is: 14, term type: to_deduce, before: %NULL%, after: stmts_@0_rep_1
TARGET LIST: 
target index: 15  , change_value: stmts_@0_rep_1
target index: 16  , change_value: %NULL%
target index: 17  , change_value: %NULL%

stmts_@0_rep_1  :  %MARK%  
 index is: 16, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1  :  %MARK%  statement_  stmts_@0_rep_1@0_rep_2  stmts_@0_rep_1  
 index is: 17, term type: to_deduce, before: %NULL%, after: statement_
TARGET LIST: 
target index: 18  , change_value: statement_
target index: 44  , change_value: %NULL%
target index: 46  , change_value: %NULL%
target index: 48  , change_value: %NULL%
target index: 50  , change_value: %NULL%
target index: 52  , change_value: %NULL%
target index: 54  , change_value: %NULL%
target index: 56  , change_value: %NULL%
target index: 58  , change_value: %NULL%
target index: 60  , change_value: %NULL%
target index: 62  , change_value: %NULL%
target index: 64  , change_value: %NULL%
target index: 66  , change_value: %NULL%
target index: 68  , change_value: %NULL%
target index: 70  , change_value: %NULL%
target index: 72  , change_value: %NULL%
target index: 74  , change_value: %NULL%
target index: 76  , change_value: %NULL%
target index: 78  , change_value: %NULL%
target index: 80  , change_value: %NULL%
target index: 82  , change_value: %NULL%

statement_  :  %MARK%  expr_stmt_  
 index is: 44, term type: to_deduce, before: %NULL%, after: expr_stmt_
TARGET LIST: 
target index: 45  , change_value: expr_stmt_
target index: 397  , change_value: %NULL%

statement_  :  %MARK%  class_stmt_  
 index is: 46, term type: to_deduce, before: %NULL%, after: class_stmt_
TARGET LIST: 
target index: 47  , change_value: class_stmt_
target index: 374  , change_value: %NULL%

statement_  :  %MARK%  throw_stmt_  
 index is: 48, term type: to_deduce, before: %NULL%, after: throw_stmt_
TARGET LIST: 
target index: 49  , change_value: throw_stmt_
target index: 367  , change_value: %NULL%

statement_  :  %MARK%  try_stmt_  
 index is: 50, term type: to_deduce, before: %NULL%, after: try_stmt_
TARGET LIST: 
target index: 51  , change_value: try_stmt_
target index: 346  , change_value: %NULL%

statement_  :  %MARK%  return_stmt_  
 index is: 52, term type: to_deduce, before: %NULL%, after: return_stmt_
TARGET LIST: 
target index: 53  , change_value: return_stmt_
target index: 339  , change_value: %NULL%

statement_  :  %MARK%  function_stmt_  
 index is: 54, term type: to_deduce, before: %NULL%, after: function_stmt_
TARGET LIST: 
target index: 55  , change_value: function_stmt_
target index: 314  , change_value: %NULL%

statement_  :  %MARK%  control_stmt_  
 index is: 56, term type: to_deduce, before: %NULL%, after: control_stmt_
TARGET LIST: 
target index: 57  , change_value: control_stmt_
target index: 390  , change_value: %NULL%

statement_  :  %MARK%  foreach_stmt_  
 index is: 58, term type: to_deduce, before: %NULL%, after: foreach_stmt_
TARGET LIST: 
target index: 59  , change_value: foreach_stmt_
target index: 297  , change_value: %NULL%

statement_  :  %MARK%  for_stmt_  
 index is: 60, term type: to_deduce, before: %NULL%, after: for_stmt_
TARGET LIST: 
target index: 61  , change_value: for_stmt_
target index: 272  , change_value: %NULL%

statement_  :  %MARK%  loop_stmt_  
 index is: 62, term type: to_deduce, before: %NULL%, after: loop_stmt_
TARGET LIST: 
target index: 63  , change_value: loop_stmt_
target index: 257  , change_value: %NULL%

statement_  :  %MARK%  while_stmt_  
 index is: 64, term type: to_deduce, before: %NULL%, after: while_stmt_
TARGET LIST: 
target index: 65  , change_value: while_stmt_
target index: 250  , change_value: %NULL%

statement_  :  %MARK%  switch_stmt_  
 index is: 66, term type: to_deduce, before: %NULL%, after: switch_stmt_
TARGET LIST: 
target index: 67  , change_value: switch_stmt_
target index: 216  , change_value: %NULL%

statement_  :  %MARK%  if_stmt_  
 index is: 68, term type: to_deduce, before: %NULL%, after: if_stmt_
TARGET LIST: 
target index: 69  , change_value: if_stmt_
target index: 195  , change_value: %NULL%

statement_  :  %MARK%  using_stmt_  
 index is: 70, term type: to_deduce, before: %NULL%, after: using_stmt_
TARGET LIST: 
target index: 71  , change_value: using_stmt_
target index: 184  , change_value: %NULL%

statement_  :  %MARK%  namespace_stmt_  
 index is: 72, term type: to_deduce, before: %NULL%, after: namespace_stmt_
TARGET LIST: 
target index: 73  , change_value: namespace_stmt_
target index: 177  , change_value: %NULL%

statement_  :  %MARK%  block_stmt_  
 index is: 74, term type: to_deduce, before: %NULL%, after: block_stmt_
TARGET LIST: 
target index: 75  , change_value: block_stmt_
target index: 171  , change_value: %NULL%

statement_  :  %MARK%  var_stmt_  
 index is: 76, term type: to_deduce, before: %NULL%, after: var_stmt_
TARGET LIST: 
target index: 77  , change_value: var_stmt_
target index: 136  , change_value: %NULL%

statement_  :  %MARK%  import_stmt_  
 index is: 78, term type: to_deduce, before: %NULL%, after: import_stmt_
TARGET LIST: 
target index: 79  , change_value: import_stmt_
target index: 103  , change_value: %NULL%

statement_  :  %MARK%  package_stmt_  
 index is: 80, term type: to_deduce, before: %NULL%, after: package_stmt_
TARGET LIST: 
target index: 81  , change_value: package_stmt_
target index: 99  , change_value: %NULL%

statement_  :  %MARK%  prep_stmt_  
 index is: 82, term type: to_deduce, before: %NULL%, after: prep_stmt_
TARGET LIST: 
target index: 83  , change_value: prep_stmt_
target index: 96  , change_value: %NULL%

expr_stmt_  :  %MARK%  expr_  endline_  
 index is: 397, term type: to_deduce, before: %NULL%, after: expr_
TARGET LIST: 
target index: 398  , change_value: expr_
target index: 403  , change_value: %NULL%

class_stmt_  :  %MARK%  class_stmt_@0_decl_1  ID  class_stmt_@0_opt_3  ENDL  decl_stmts_  end  ENDL  
 index is: 374, term type: to_deduce, before: %NULL%, after: class_stmt_@0_decl_1
TARGET LIST: 
target index: 375  , change_value: class_stmt_@0_decl_1
target index: 386  , change_value: %NULL%
target index: 388  , change_value: %NULL%

throw_stmt_  :  %MARK%  throw  throw_stmt_@0_opt_2  endline_  
 index is: 367, term type: shift, before: %NULL%, after: throw
TARGET LIST: 
target index: 368  , change_value: throw

try_stmt_  :  %MARK%  try  ENDL  stmts_  try_stmt_@0_rep_4  end  ENDL  
 index is: 346, term type: shift, before: %NULL%, after: try
TARGET LIST: 
target index: 347  , change_value: try

return_stmt_  :  %MARK%  return  return_stmt_@0_opt_2  endline_  
 index is: 339, term type: shift, before: %NULL%, after: return
TARGET LIST: 
target index: 340  , change_value: return

function_stmt_  :  %MARK%  function  ID  (  function_stmt_@0_opt_4  )  function_stmt_@0_opt_6  function_body_  
 index is: 314, term type: shift, before: %NULL%, after: function
TARGET LIST: 
target index: 315  , change_value: function

control_stmt_  :  %MARK%  control_stmt_@0_decl_1  endline_  
 index is: 390, term type: to_deduce, before: %NULL%, after: control_stmt_@0_decl_1
TARGET LIST: 
target index: 391  , change_value: control_stmt_@0_decl_1
target index: 393  , change_value: %NULL%
target index: 395  , change_value: %NULL%

foreach_stmt_  :  %MARK%  foreach  ID  in  basic_expr_  for_body_  
 index is: 297, term type: shift, before: %NULL%, after: foreach
TARGET LIST: 
target index: 298  , change_value: foreach

for_stmt_  :  %MARK%  for  for_stmt_@0_opt_2  for_stmt_@0_decl_3  for_stmt_@0_opt_4  for_stmt_@0_decl_5  for_stmt_@0_opt_6  for_body_  
 index is: 272, term type: shift, before: %NULL%, after: for
TARGET LIST: 
target index: 273  , change_value: for

loop_stmt_  :  %MARK%  loop  ENDL  stmts_  loop_stmt_@0_decl_4  
 index is: 257, term type: shift, before: %NULL%, after: loop
TARGET LIST: 
target index: 258  , change_value: loop

while_stmt_  :  %MARK%  while  basic_expr_  ENDL  stmts_  end  ENDL  
 index is: 250, term type: shift, before: %NULL%, after: while
TARGET LIST: 
target index: 251  , change_value: while

switch_stmt_  :  %MARK%  switch  basic_expr_  ENDL  switch_stmts_  end  ENDL  
 index is: 216, term type: shift, before: %NULL%, after: switch
TARGET LIST: 
target index: 217  , change_value: switch

if_stmt_  :  %MARK%  if  basic_expr_  ENDL  stmts_  if_stmt_@0_rep_5  
 index is: 195, term type: shift, before: %NULL%, after: if
TARGET LIST: 
target index: 196  , change_value: if

using_stmt_  :  %MARK%  using  using_list_  endline  
 index is: 184, term type: shift, before: %NULL%, after: using
TARGET LIST: 
target index: 185  , change_value: using

namespace_stmt_  :  %MARK%  namespace  ID  ENDL  decl_stmts_  end  ENDL  
 index is: 177, term type: shift, before: %NULL%, after: namespace
TARGET LIST: 
target index: 178  , change_value: namespace

block_stmt_  :  %MARK%  block  ENDL  stmts_  end  ENDL  
 index is: 171, term type: shift, before: %NULL%, after: block
TARGET LIST: 
target index: 172  , change_value: block

var_stmt_  :  %MARK%  var_stmt_@0_decl_1  var_def_  endline_  
 index is: 136, term type: to_deduce, before: %NULL%, after: var_stmt_@0_decl_1
TARGET LIST: 
target index: 137  , change_value: var_stmt_@0_decl_1
target index: 140  , change_value: %NULL%
target index: 142  , change_value: %NULL%
target index: 144  , change_value: %NULL%

import_stmt_  :  %MARK%  import  import_list_  endline_  
 index is: 103, term type: shift, before: %NULL%, after: import
TARGET LIST: 
target index: 104  , change_value: import

package_stmt_  :  %MARK%  package  ID  endline_  
 index is: 99, term type: shift, before: %NULL%, after: package
TARGET LIST: 
target index: 100  , change_value: package

prep_stmt_  :  %MARK%  PREP  ENDL  
 index is: 96, term type: shift, before: %NULL%, after: PREP
TARGET LIST: 
target index: 97  , change_value: PREP

expr_  :  %MARK%  single_expr_  expr_@0_opt_2  
 index is: 403, term type: to_deduce, before: %NULL%, after: single_expr_
TARGET LIST: 
target index: 404  , change_value: single_expr_
target index: 410  , change_value: %NULL%
target index: 412  , change_value: %NULL%

class_stmt_@0_decl_1  :  %MARK%  struct  
 index is: 386, term type: shift, before: %NULL%, after: struct
TARGET LIST: 
target index: 387  , change_value: struct

class_stmt_@0_decl_1  :  %MARK%  class  
 index is: 388, term type: shift, before: %NULL%, after: class
TARGET LIST: 
target index: 389  , change_value: class

control_stmt_@0_decl_1  :  %MARK%  continue  
 index is: 393, term type: shift, before: %NULL%, after: continue
TARGET LIST: 
target index: 394  , change_value: continue

control_stmt_@0_decl_1  :  %MARK%  break  
 index is: 395, term type: shift, before: %NULL%, after: break
TARGET LIST: 
target index: 396  , change_value: break

var_stmt_@0_decl_1  :  %MARK%  constant  
 index is: 140, term type: shift, before: %NULL%, after: constant
TARGET LIST: 
target index: 141  , change_value: constant

var_stmt_@0_decl_1  :  %MARK%  link  
 index is: 142, term type: shift, before: %NULL%, after: link
TARGET LIST: 
target index: 143  , change_value: link

var_stmt_@0_decl_1  :  %MARK%  var  
 index is: 144, term type: shift, before: %NULL%, after: var
TARGET LIST: 
target index: 145  , change_value: var

single_expr_  :  %MARK%  basic_expr_  
 index is: 410, term type: to_deduce, before: %NULL%, after: basic_expr_
TARGET LIST: 
target index: 411  , change_value: basic_expr_
target index: 414  , change_value: %NULL%
target index: 417  , change_value: %NULL%

single_expr_  :  %MARK%  lambda_expr_  
 index is: 412, term type: to_deduce, before: %NULL%, after: lambda_expr_
TARGET LIST: 
target index: 413  , change_value: lambda_expr_
target index: 441  , change_value: %NULL%

basic_expr_  :  %MARK%  cond_expr_  basic_expr_@1_opt_2  
 index is: 414, term type: to_deduce, before: %NULL%, after: cond_expr_
TARGET LIST: 
target index: 415  , change_value: cond_expr_
target index: 503  , change_value: %NULL%

basic_expr_  :  %MARK%  var_bind_  =  cond_expr_  
 index is: 417, term type: to_deduce, before: %NULL%, after: var_bind_
TARGET LIST: 
target index: 146  , change_value: %NULL%
target index: 418  , change_value: var_bind_

lambda_expr_  :  %MARK%  [  lambda_expr_@0_opt_2  ]  (  lambda_expr_@0_opt_5  )  lambda_body_  
 index is: 441, term type: shift, before: %NULL%, after: [
TARGET LIST: 
target index: 442  , change_value: [

cond_expr_  :  %MARK%  logic_or_expr_  cond_expr_@0_opt_2  
 index is: 503, term type: to_deduce, before: %NULL%, after: logic_or_expr_
TARGET LIST: 
target index: 504  , change_value: logic_or_expr_
target index: 517  , change_value: %NULL%

var_bind_  :  %MARK%  (  var_bind_list_  var_bind_@0_rep_3  )  
 index is: 146, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 147  , change_value: (

logic_or_expr_  :  %MARK%  logic_and_expr_  logic_or_expr_@0_opt_2  
 index is: 517, term type: to_deduce, before: %NULL%, after: logic_and_expr_
TARGET LIST: 
target index: 518  , change_value: logic_and_expr_
target index: 528  , change_value: %NULL%

logic_and_expr_  :  %MARK%  equal_expr_  logic_and_expr_@0_opt_2  
 index is: 528, term type: to_deduce, before: %NULL%, after: equal_expr_
TARGET LIST: 
target index: 529  , change_value: equal_expr_
target index: 539  , change_value: %NULL%

equal_expr_  :  %MARK%  relat_expr_  equal_expr_@0_opt_2  
 index is: 539, term type: to_deduce, before: %NULL%, after: relat_expr_
TARGET LIST: 
target index: 540  , change_value: relat_expr_
target index: 550  , change_value: %NULL%

relat_expr_  :  %MARK%  add_expr_  relat_expr_@0_opt_2  
 index is: 550, term type: to_deduce, before: %NULL%, after: add_expr_
TARGET LIST: 
target index: 551  , change_value: add_expr_
target index: 565  , change_value: %NULL%

add_expr_  :  %MARK%  mul_expr_  add_expr_@0_opt_2  
 index is: 565, term type: to_deduce, before: %NULL%, after: mul_expr_
TARGET LIST: 
target index: 566  , change_value: mul_expr_
target index: 576  , change_value: %NULL%

mul_expr_  :  %MARK%  unary_expr_  mul_expr_@0_opt_2  
 index is: 576, term type: to_deduce, before: %NULL%, after: unary_expr_
TARGET LIST: 
target index: 577  , change_value: unary_expr_
target index: 591  , change_value: %NULL%
target index: 594  , change_value: %NULL%
target index: 598  , change_value: %NULL%

unary_expr_  :  %MARK%  prim_expr_  unary_expr_@2_opt_2  
 index is: 591, term type: to_deduce, before: %NULL%, after: prim_expr_
TARGET LIST: 
target index: 592  , change_value: prim_expr_
target index: 637  , change_value: %NULL%
target index: 639  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_expr_@1_decl_1  unary_expr_  unary_expr_@1_opt_3  
 index is: 594, term type: to_deduce, before: %NULL%, after: unary_expr_@1_decl_1
TARGET LIST: 
target index: 595  , change_value: unary_expr_@1_decl_1
target index: 607  , change_value: %NULL%
target index: 609  , change_value: %NULL%

unary_expr_  :  %MARK%  unary_op_  unary_expr_  
 index is: 598, term type: to_deduce, before: %NULL%, after: unary_op_
TARGET LIST: 
target index: 599  , change_value: unary_op_
target index: 611  , change_value: %NULL%
target index: 613  , change_value: %NULL%
target index: 615  , change_value: %NULL%
target index: 617  , change_value: %NULL%
target index: 619  , change_value: %NULL%
target index: 621  , change_value: %NULL%
target index: 623  , change_value: %NULL%

prim_expr_  :  %MARK%  constant_  
 index is: 637, term type: to_deduce, before: %NULL%, after: constant_
TARGET LIST: 
target index: 638  , change_value: constant_
target index: 688  , change_value: %NULL%
target index: 690  , change_value: %NULL%
target index: 692  , change_value: %NULL%
target index: 694  , change_value: %NULL%

prim_expr_  :  %MARK%  visit_expr_  
 index is: 639, term type: to_deduce, before: %NULL%, after: visit_expr_
TARGET LIST: 
target index: 640  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

unary_expr_@1_decl_1  :  %MARK%  gcnew  
 index is: 607, term type: shift, before: %NULL%, after: gcnew
TARGET LIST: 
target index: 608  , change_value: gcnew

unary_expr_@1_decl_1  :  %MARK%  new  
 index is: 609, term type: shift, before: %NULL%, after: new
TARGET LIST: 
target index: 610  , change_value: new

unary_op_  :  %MARK%  !  
 index is: 611, term type: shift, before: %NULL%, after: !
TARGET LIST: 
target index: 612  , change_value: !

unary_op_  :  %MARK%  -  
 index is: 613, term type: shift, before: %NULL%, after: -
TARGET LIST: 
target index: 614  , change_value: -

unary_op_  :  %MARK%  &  
 index is: 615, term type: shift, before: %NULL%, after: &
TARGET LIST: 
target index: 616  , change_value: &

unary_op_  :  %MARK%  *  
 index is: 617, term type: shift, before: %NULL%, after: *
TARGET LIST: 
target index: 618  , change_value: *

unary_op_  :  %MARK%  --  
 index is: 619, term type: shift, before: %NULL%, after: --
TARGET LIST: 
target index: 620  , change_value: --

unary_op_  :  %MARK%  ++  
 index is: 621, term type: shift, before: %NULL%, after: ++
TARGET LIST: 
target index: 622  , change_value: ++

unary_op_  :  %MARK%  typeid  
 index is: 623, term type: shift, before: %NULL%, after: typeid
TARGET LIST: 
target index: 624  , change_value: typeid

constant_  :  %MARK%  false  
 index is: 688, term type: shift, before: %NULL%, after: false
TARGET LIST: 
target index: 689  , change_value: false

constant_  :  %MARK%  true  
 index is: 690, term type: shift, before: %NULL%, after: true
TARGET LIST: 
target index: 691  , change_value: true

constant_  :  %MARK%  null  
 index is: 692, term type: shift, before: %NULL%, after: null
TARGET LIST: 
target index: 693  , change_value: null

constant_  :  %MARK%  NUM  
 index is: 694, term type: shift, before: %NULL%, after: NUM
TARGET LIST: 
target index: 695  , change_value: NUM

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 416, target_source: stmts_

index: 3, target_source: stmts_@0_rep_1

index: 4, target_source: statement_

index: 7, target_source: expr_stmt_

index: 8, target_source: class_stmt_

index: 9, target_source: throw_stmt_

index: 10, target_source: try_stmt_

index: 11, target_source: return_stmt_

index: 12, target_source: function_stmt_

index: 13, target_source: control_stmt_

index: 14, target_source: foreach_stmt_

index: 15, target_source: for_stmt_

index: 16, target_source: loop_stmt_

index: 17, target_source: while_stmt_

index: 18, target_source: switch_stmt_

index: 19, target_source: if_stmt_

index: 20, target_source: using_stmt_

index: 21, target_source: namespace_stmt_

index: 22, target_source: block_stmt_

index: 23, target_source: var_stmt_

index: 24, target_source: import_stmt_

index: 25, target_source: package_stmt_

index: 26, target_source: prep_stmt_

index: 27, target_source: expr_

index: 31, target_source: class_stmt_@0_decl_1

index: 60, target_source: throw

index: 201, target_source: try

index: 216, target_source: return

index: 48, target_source: function

index: 220, target_source: control_stmt_@0_decl_1

index: 222, target_source: foreach

index: 232, target_source: for

index: 259, target_source: loop

index: 269, target_source: while

index: 275, target_source: switch

index: 294, target_source: if

index: 309, target_source: using

index: 322, target_source: namespace

index: 338, target_source: block

index: 328, target_source: var_stmt_@0_decl_1

index: 343, target_source: import

index: 353, target_source: package

index: 331, target_source: PREP

index: 64, target_source: single_expr_

index: 333, target_source: struct

index: 334, target_source: class

index: 356, target_source: continue

index: 357, target_source: break

index: 335, target_source: constant

index: 336, target_source: link

index: 337, target_source: var

index: 68, target_source: basic_expr_

index: 69, target_source: lambda_expr_

index: 70, target_source: cond_expr_

index: 74, target_source: var_bind_

index: 123, target_source: [

index: 77, target_source: logic_or_expr_

index: 163, target_source: (

index: 82, target_source: logic_and_expr_

index: 86, target_source: equal_expr_

index: 90, target_source: relat_expr_

index: 94, target_source: add_expr_

index: 98, target_source: mul_expr_

index: 102, target_source: unary_expr_

index: 106, target_source: prim_expr_

index: 115, target_source: unary_expr_@1_decl_1

index: 132, target_source: unary_op_

index: 134, target_source: constant_

index: 135, target_source: visit_expr_

index: 136, target_source: gcnew

index: 137, target_source: new

index: 138, target_source: !

index: 139, target_source: -

index: 140, target_source: &

index: 141, target_source: *

index: 142, target_source: --

index: 143, target_source: ++

index: 144, target_source: typeid

index: 145, target_source: false

index: 146, target_source: true

index: 147, target_source: null

index: 148, target_source: NUM

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 191, target_source: ID



###########
#416  TERM#
###########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  {  stmts_  %MARK%  }  
 index is: 337, term type: shift, before: stmts_, after: }
TARGET LIST: 
target index: 338  , change_value: }

########
#SUBSET#
########
function_body_@0_decl_1  :  {  stmts_  %MARK%  }  
 index is: 337, term type: shift, before: stmts_, after: }
TARGET LIST: 
target index: 338  , change_value: }

########
#TO SET#
########
index: 417, target_source: }



###########
#417  TERM#
###########


##########
#FROM SET#
##########
function_body_@0_decl_1  :  {  stmts_  }  %MARK%  
 index is: 338, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
function_body_@0_decl_1  :  {  stmts_  }  %MARK%  
 index is: 338, term type: deduce, before: }, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#418  TERM#
###########


##########
#FROM SET#
##########
function_stmt_@0_opt_6  :  override  %MARK%  
 index is: 324, term type: deduce, before: override, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
function_stmt_@0_opt_6  :  override  %MARK%  
 index is: 324, term type: deduce, before: override, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#419  TERM#
###########


##########
#FROM SET#
##########
function_stmt_@0_opt_4  :  argument_list_  %MARK%  
 index is: 327, term type: deduce, before: argument_list_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
function_stmt_@0_opt_4  :  argument_list_  %MARK%  
 index is: 327, term type: deduce, before: argument_list_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#420  TERM#
###########


##########
#FROM SET#
##########
decl_stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  decl_stmts_@0_rep_1@0_rep_2  
 index is: 34, term type: to_deduce, before: ENDL, after: decl_stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%
target index: 35  , change_value: decl_stmts_@0_rep_1@0_rep_2

########
#SUBSET#
########
decl_stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  decl_stmts_@0_rep_1@0_rep_2  
 index is: 34, term type: to_deduce, before: ENDL, after: decl_stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 32  , change_value: %NULL%
target index: 33  , change_value: %NULL%
target index: 35  , change_value: decl_stmts_@0_rep_1@0_rep_2

decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 32, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

decl_stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  decl_stmts_@0_rep_1@0_rep_2  
 index is: 33, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 34  , change_value: ENDL

########
#TO SET#
########
index: 421, target_source: decl_stmts_@0_rep_1@0_rep_2

index: 420, target_source: ENDL



###########
#421  TERM#
###########


##########
#FROM SET#
##########
decl_stmts_@0_rep_1@0_rep_2  :  ENDL  decl_stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 35, term type: deduce, before: decl_stmts_@0_rep_1@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
decl_stmts_@0_rep_1@0_rep_2  :  ENDL  decl_stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 35, term type: deduce, before: decl_stmts_@0_rep_1@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#422  TERM#
###########


##########
#FROM SET#
##########
class_stmt_@0_opt_3  :  extends  %MARK%  visit_expr_  
 index is: 384, term type: to_deduce, before: extends, after: visit_expr_
TARGET LIST: 
target index: 385  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

########
#SUBSET#
########
class_stmt_@0_opt_3  :  extends  %MARK%  visit_expr_  
 index is: 384, term type: to_deduce, before: extends, after: visit_expr_
TARGET LIST: 
target index: 385  , change_value: visit_expr_
target index: 641  , change_value: %NULL%

visit_expr_  :  %MARK%  object_  visit_expr_@0_opt_2  
 index is: 641, term type: to_deduce, before: %NULL%, after: object_
TARGET LIST: 
target index: 642  , change_value: object_
target index: 652  , change_value: %NULL%
target index: 654  , change_value: %NULL%
target index: 656  , change_value: %NULL%
target index: 658  , change_value: %NULL%
target index: 660  , change_value: %NULL%
target index: 663  , change_value: %NULL%

object_  :  %MARK%  CHAR  
 index is: 652, term type: shift, before: %NULL%, after: CHAR
TARGET LIST: 
target index: 653  , change_value: CHAR

object_  :  %MARK%  element_  
 index is: 654, term type: to_deduce, before: %NULL%, after: element_
TARGET LIST: 
target index: 655  , change_value: element_
target index: 672  , change_value: %NULL%

object_  :  %MARK%  global  
 index is: 656, term type: shift, before: %NULL%, after: global
TARGET LIST: 
target index: 657  , change_value: global

object_  :  %MARK%  local  
 index is: 658, term type: shift, before: %NULL%, after: local
TARGET LIST: 
target index: 659  , change_value: local

object_  :  %MARK%  STR  object_@1_opt_2  
 index is: 660, term type: shift, before: %NULL%, after: STR
TARGET LIST: 
target index: 661  , change_value: STR

object_  :  %MARK%  array_  object_@0_opt_2  
 index is: 663, term type: to_deduce, before: %NULL%, after: array_
TARGET LIST: 
target index: 664  , change_value: array_
target index: 696  , change_value: %NULL%

element_  :  %MARK%  element_@0_decl_1  element_@0_rep_2  
 index is: 672, term type: to_deduce, before: %NULL%, after: element_@0_decl_1
TARGET LIST: 
target index: 673  , change_value: element_@0_decl_1
target index: 682  , change_value: %NULL%
target index: 686  , change_value: %NULL%

array_  :  %MARK%  {  array_@0_opt_2  }  
 index is: 696, term type: shift, before: %NULL%, after: {
TARGET LIST: 
target index: 697  , change_value: {

element_@0_decl_1  :  %MARK%  (  single_expr_  )  
 index is: 682, term type: shift, before: %NULL%, after: (
TARGET LIST: 
target index: 683  , change_value: (

element_@0_decl_1  :  %MARK%  ID  
 index is: 686, term type: shift, before: %NULL%, after: ID
TARGET LIST: 
target index: 687  , change_value: ID

########
#TO SET#
########
index: 423, target_source: visit_expr_

index: 149, target_source: object_

index: 153, target_source: CHAR

index: 154, target_source: element_

index: 155, target_source: global

index: 156, target_source: local

index: 157, target_source: STR

index: 178, target_source: array_

index: 181, target_source: element_@0_decl_1

index: 119, target_source: {

index: 192, target_source: (

index: 191, target_source: ID



###########
#423  TERM#
###########


##########
#FROM SET#
##########
class_stmt_@0_opt_3  :  extends  visit_expr_  %MARK%  
 index is: 385, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
class_stmt_@0_opt_3  :  extends  visit_expr_  %MARK%  
 index is: 385, term type: deduce, before: visit_expr_, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


###########
#424  TERM#
###########


##########
#FROM SET#
##########
stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  stmts_@0_rep_1@0_rep_2  
 index is: 23, term type: to_deduce, before: ENDL, after: stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%
target index: 24  , change_value: stmts_@0_rep_1@0_rep_2

########
#SUBSET#
########
stmts_@0_rep_1@0_rep_2  :  ENDL  %MARK%  stmts_@0_rep_1@0_rep_2  
 index is: 23, term type: to_deduce, before: ENDL, after: stmts_@0_rep_1@0_rep_2
TARGET LIST: 
target index: 21  , change_value: %NULL%
target index: 22  , change_value: %NULL%
target index: 24  , change_value: stmts_@0_rep_1@0_rep_2

stmts_@0_rep_1@0_rep_2  :  %MARK%  
 index is: 21, term type: deduce, before: %NULL%, after: %NULL%
TARGET LIST: 

stmts_@0_rep_1@0_rep_2  :  %MARK%  ENDL  stmts_@0_rep_1@0_rep_2  
 index is: 22, term type: shift, before: %NULL%, after: ENDL
TARGET LIST: 
target index: 23  , change_value: ENDL

########
#TO SET#
########
index: 425, target_source: stmts_@0_rep_1@0_rep_2

index: 424, target_source: ENDL



###########
#425  TERM#
###########


##########
#FROM SET#
##########
stmts_@0_rep_1@0_rep_2  :  ENDL  stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 24, term type: deduce, before: stmts_@0_rep_1@0_rep_2, after: %NULL%
TARGET LIST: 

########
#SUBSET#
########
stmts_@0_rep_1@0_rep_2  :  ENDL  stmts_@0_rep_1@0_rep_2  %MARK%  
 index is: 24, term type: deduce, before: stmts_@0_rep_1@0_rep_2, after: %NULL%
TARGET LIST: 

########
#TO SET#
########


throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
; is terminal1
ENDL is terminal2
ID is terminal2
extends is terminal5
ENDL is terminal2
function is terminal5
using is terminal5
namespace is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
constant is terminal5
link is terminal5
var is terminal5
end is terminal5
ENDL is terminal2
ENDL is terminal2
function is terminal5
using is terminal5
namespace is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
constant is terminal5
link is terminal5
var is terminal5
ID is terminal2
( is terminal1
... is terminal1
= is terminal1
) is terminal1
override is terminal5
ENDL is terminal2
{ is terminal1
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
; is terminal1
ENDL is terminal2
, is terminal1
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
^= is terminal1
%= is terminal1
/= is terminal1
*= is terminal1
-= is terminal1
+= is terminal1
:= is terminal1
= is terminal1
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
= is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
: is terminal1
? is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
or is terminal5
|| is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
and is terminal5
&& is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
!= is terminal1
== is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
<= is terminal1
>= is terminal1
< is terminal1
> is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
- is terminal1
+ is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
^ is terminal1
% is terminal1
/ is terminal1
* is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
... is terminal1
-- is terminal1
++ is terminal1
... is terminal1
-- is terminal1
++ is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
{ is terminal1
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
} is terminal1
= is terminal1
] is terminal1
( is terminal1
... is terminal1
= is terminal1
) is terminal1
-> is terminal1
{ is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
. is terminal1
-> is terminal1
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
] is terminal1
... is terminal1
ID is terminal2
( is terminal1
[ is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
, is terminal1
) is terminal1
... is terminal1
ID is terminal2
( is terminal1
, is terminal1
... is terminal1
ID is terminal2
( is terminal1
) is terminal1
= is terminal1
[ is terminal1
[ is terminal1
( is terminal1
[ is terminal1
( is terminal1
[ is terminal1
( is terminal1
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
) is terminal1
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
} is terminal1
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
catch is terminal5
end is terminal5
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
catch is terminal5
ID is terminal2
: is terminal1
ENDL is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
; is terminal1
ENDL is terminal2
; is terminal1
ENDL is terminal2
ID is terminal2
in is terminal5
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
do is terminal5
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
ID is terminal2
( is terminal1
, is terminal1
; is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
, is terminal1
; is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
do is terminal5
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
; is terminal1
ENDL is terminal2
= is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
= is terminal1
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
, is terminal1
ID is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
end is terminal5
until is terminal5
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
default is terminal5
case is terminal5
end is terminal5
ENDL is terminal2
ENDL is terminal2
ENDL is terminal2
default is terminal5
case is terminal5
default is terminal5
case is terminal5
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
else is terminal5
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
else is terminal5
if is terminal5
ENDL is terminal2
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ID is terminal2
endline is terminal5
, is terminal1
ID is terminal2
. is terminal1
* is terminal1
ID is terminal2
ID is terminal2
ENDL is terminal2
function is terminal5
using is terminal5
namespace is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
constant is terminal5
link is terminal5
var is terminal5
end is terminal5
ENDL is terminal2
ID is terminal2
( is terminal1
; is terminal1
ENDL is terminal2
ENDL is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
ID is terminal2
; is terminal1
ENDL is terminal2
as is terminal5
, is terminal1
ID is terminal2
ID is terminal2
ID is terminal2
; is terminal1
ENDL is terminal2
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
end is terminal5
ENDL is terminal2
ENDL is terminal2
ID is terminal2
: is terminal1
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
, is terminal1
... is terminal1
= is terminal1
, is terminal1
ID is terminal2
ID is terminal2
, is terminal1
= is terminal1
, is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
: is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
throw is terminal5
try is terminal5
return is terminal5
function is terminal5
foreach is terminal5
for is terminal5
loop is terminal5
while is terminal5
switch is terminal5
if is terminal5
using is terminal5
namespace is terminal5
block is terminal5
import is terminal5
package is terminal5
PREP is terminal2
struct is terminal5
class is terminal5
continue is terminal5
break is terminal5
constant is terminal5
link is terminal5
var is terminal5
[ is terminal1
( is terminal1
gcnew is terminal5
new is terminal5
! is terminal1
- is terminal1
& is terminal1
* is terminal1
-- is terminal1
++ is terminal1
typeid is terminal5
false is terminal5
true is terminal5
null is terminal5
NUM is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
} is terminal1
ENDL is terminal2
CHAR is terminal2
global is terminal5
local is terminal5
STR is terminal2
{ is terminal1
( is terminal1
ID is terminal2
ENDL is terminal2
