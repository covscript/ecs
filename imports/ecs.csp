# Extended Covariant Script Header: v1.2.4
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2017-2023 Michael Lee(李登淳)
#
# Email:   lee@unicov.cn, mikecovlee@163.com
# Github:  https://github.com/mikecovlee
# Website: http://covscript.org.cn

import sdk_extension as sdk

package ecs

# Types

namespace type_validator
    function __type(obj)
        return sdk.typeids.get_real(obj) == sdk.typeids.type
    end
    function __range(obj)
        return sdk.typeids.get_real(obj) == sdk.typeids.range
    end
    function __istream(obj)
        return sdk.typeids.get_real(obj) == sdk.typeids.istream
    end
    function __ostream(obj)
        return sdk.typeids.get_real(obj) == sdk.typeids.ostream
    end
    function __function(obj)
        link real_type = sdk.typeids.get_real(obj)
        return real_type == sdk.typeids.callable || real_type == sdk.typeids.memberfn
    end
    function __exception(obj)
        return sdk.typeids.get_real(obj) == sdk.typeids.exception
    end
    function __namespace(obj)
        return sdk.typeids.get_real(obj) == sdk.typeids.namespace
    end
    function __integer(obj)
        return typeid(obj) == typeid(number) && obj.is_integer()
    end
    function __float(obj)
        return typeid(obj) == typeid(number) && obj.is_float()
    end
end

@begin
var special_type = {
    "type", "range", "istream", "ostream", "function", "exception", "namespace",
    "integer", "float"
}.to_hash_set()
@end

# Exceptions

var current_except = null

function throw_exception(data)
    current_except = data
    throw runtime.exception("__ecs_except__")
end

function get_exception()
    var except = null
    swap(except, current_except)
    return move(except)
end

# For Legacy CovScript Only

function handle_exception(e)
    if e.what == "__ecs_except__"
        return get_exception()
    else
        return e
    end
end

function param_new(type, args)
    var data = new type
    if !args.empty()
        data.construct(args...)
    end
    return move(data)
end

function param_gcnew(type, args)
    var data = gcnew type
    if !args.empty()
        data->construct(args...)
    end
    return move(data)
end

function check_type_s(name, id, func)
    if !func(id)
        throw throw_exception(runtime.exception("Wrong type for function argument \"" + name + "\"."))
    end
end

function check_type(name, id, type)
    if typeid id != typeid type
        throw throw_exception(runtime.exception("Wrong type for function argument \"" + name + "\"."))
    end
end

function init_lambda(...args)
    link func = args.pop_front()
    return param_new(func, args).call
end

class slice_step_error
    var error_text = new string
    function construct(msg)
        error_text = to_string(msg)
    end
    function what()
        return error_text
    end
end

function ecs_slice_ext(arr, beg, end, step)
    var range_begin = 0, range_end = arr.size - 1, range_step = 1
    var slice_data = new array
    if beg != null
        range_begin = beg
    end
    if end != null
        range_end = end
    end
    if step == null
        if range_begin > range_end
            range_step = -1
        end
    else
        range_step = step
    end
    if range_begin > range_end
        if range_step >= 0
            throw_exception(param_new(slice_step_error, {"Use positive step in negative range."}))
        end
        while range_begin >= range_end
            slice_data.push_back(arr[range_begin])
            range_begin += range_step
        end
    else
        if range_step <= 0
            throw_exception(param_new(slice_step_error, {"Use negative step in positive range."}))
        end
        while range_begin <= range_end
            slice_data.push_back(arr[range_begin])
            range_begin += range_step
        end
    end
    return move(slice_data)
end